[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d UniLA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-W16-1/main[image:https://travis-ci.org/CS2103-AY1819S2-W16-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* UniLA is a desktop utilities application designed for\tNUS students who are typing oriented."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* UniLA provides an efficient and convenient solution for managing contact list and event list, contact interactions, planning meetings, setting up reminders, etc."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* The application is primarily concerned with CLI (Command Line Interface) Interaction, with a simple and intuitive GUI provided."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "daDangminh": 6,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        \u0027site-name\u0027: \u0027UniLA\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2103-ay1819s2-w16-1/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 2,
      "-": 235
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d Jiang Wulin"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "image::jwl1997.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "{empty}[http://github.com/jwl1997[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Event list component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d Truong Cong Minh Dang"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "image::dadangminh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "{empty}[http://github.com/daDangminh[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Storage component"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d Chen Yinya"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "image::yinya998.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "{empty}[http://github.com/yinya998[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Contact list optimization"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d Wang Jiarui"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "image::jillwangjill.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "{empty}[http://github.com/JillWangJill[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "Responsibilities: In-app reminder"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d Foo Yong Qi"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "image::yonggqiii.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "{empty}[http://github.com/yonggqiii[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "Responsibilities: Meeting planner"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "daDangminh": 19,
      "-": 35
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level4/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* *Email us* : You can also reach us at `dadangminh15@gmail.com`"
      }
    ],
    "authorContributionMap": {
      "daDangminh": 1,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d UniLA - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "// tag::planmeeting[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d\u003d\u003d [Proposed] Meeting Planner"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "_{Explain here how the meeting planner feature will be implemented}_"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "// end::planmeeting[]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `UniLA` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Add person / event"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "1. User inputs text to console to add person/event."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "2. UniLA acknowledges and adds person/event to the list."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "3. UniLA is updated with a latest list of persons/events."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. The format of parameters entered are invalid."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. UniLA shows an error message."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person/event"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons/events"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "2.  UniLA shows a list of persons/events"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person/event in the list"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "4.  UniLA deletes the person/event"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. UniLA shows an error message."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Edit person/event"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to edit a specific person/event in the list."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "2.  UniLA updates itself."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. UniLA shows an error message."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "* 1b. The arguments for edit command are invalid."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "** 1b1. UniLA shows an error message."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: List persons/events"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "1. User request to list all the persons/events."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "2. UniLA displays list of persons."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. There is no event/person in UniLA."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "** UniLA shows a successful message."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 8,
      "-": 1023
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 4 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w16-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook Level 4 (AB4) is for those who *prefer to use a desktop app for managing contacts*. More importantly, AB4 is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB4 can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Finds persons whose fields contain any of the given keywords. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Example1: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Example2: [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* If there is no prefix, all fields will be searched"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* `find John PGP` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Returns any person having fields with keywords `John` or `PGP`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* `find n/Betsy t/friends` +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Returns the person having name `Betsy` AND tag `friends`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* `find t/friends teammate` +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Returns any person having tag `friends` OR tag `teammate`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Redirecting to email services : `email`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Redirect user to external email service on browser to email a specific email address"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Format: `email INDEX`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Sorting the name in contact list alphabetically : `sort`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Sort the name in contact list in alphabetical order"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `sort`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Adding avatar to a person : `avatar`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Adds avatar to a person (identified by the index number used in the last listing). +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `avatar INDEX IMAGE_PATH`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* The given path must be pointed to a valid image in png, jp(e)g and svg format."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* The path should be valid."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`avatar 3 James.jpg` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Adds avatar to the 3rd person in the address book."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Searching in Facebook : `facebook`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Searches for a person’s name on Facebook. +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `facebook INDEX`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`facebook 3` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "The name of the 3rd person in the address book will be searched on Facebook."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Searching in LinkedIn : `linkedin`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Searches for a person’s name on LinkedIn. +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `linkedin INDEX`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`linkedin 3` +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "The name of the 3rd person in the address book will be searched on LinkedIn."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Importing data from xml : `import`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Imports the data from an external XML file to the address book. The file may contains data about Contacts, or Events.  +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `import FILEPATH`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Imports data from the location specified by `FILEPATH`."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `FILEPATH` must end with an extension of `.xml`."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* The file name in `FILEPATH` should be valid."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Repeated data that already exists in address book will not be imported."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Data in the XML file must be in the identifiable format."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* For Windows users:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`import C:\\Users\\Yinya\\Desktop\\Contacts.xml`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* For macOS and Linux users:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`import /Users/Yinya/Desktop/Contacts.xml`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Exporting data to xml : `export`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Exports the data from an external XML file to the address book. The file will contain all the data in the application including Contacts and Events. +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `export FILEPATH`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Exports data to the location specified by `FILEPATH`."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `FILEPATH` must end with an extension of `.xml`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* The file name in `FILEPATH` should be valid."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* For Windows users:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`export C:\\Users\\Yinya\\Desktop\\Contacts.xml`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* For macOS and Linux users:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`export /Users/Yinya/Desktop/Contacts.xml`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Sort events by date or label : `sort`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Sorts the event list by the days left by adding -l into command, and list it.Or by the label( urgent, important, normal) by adding -d into command, and list it.+"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `sort -l`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `sort -d`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* When sorting by label, the events with same label will be sorted by event index."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* When sorting by days left, events with less days left will be in higher priority."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d\u003d Remind user about upcoming event : `remind/repeat`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Reminds users by automatically sending a pop message inside APP before any time of events beginning time"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Format: `remind EVENT_LIST_INDEX REMINDTIME_BEFORE`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "the event with EVENT_LIST_INDEX will be reminded before REMINDTIME_BEFORE minutes earlier than event beginning time"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Format: `repeat EVENT_LIST_INDEX REMINDTIMEAFTER`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "The event with EVENT_LIST_INDEX will be repeatedly reminded once after REMINDTIME_AFTER minutes than now"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "****"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* In UniLA,remind function is already set up by default. Every event will be reminded 2 hours before event."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `EVENT_LIST_INDEX` refers to index number shown in the displayed Event List"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `EVENT_LIST_INDEX` must be a positive integer 1,2,3,4,..."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `REMINDTIME_BEFORE` refers to how long would user prefer to have the remind before the event beginning."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `REMINDTIME_BEFORE` and `REMINDTIME_AFTER` must be a positive number 1,2,...,15,16,...,60,... Unit is MIN"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `REMINDTIME_AFTER` refers to how long would user prefer to wait before next repeated reminder."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `repeat` can only be used after first `remind`."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `repeat` can be used for several times."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "****"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `remind 3 60`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `repeat 3 10`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Connecting a person to an event : `connect`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Connects one user from Contact List to Event List by contacts index and event index +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `connect CONTACT_LIST_INDEX EVENT_LIST_INDEX`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `CONTACT_LIST_INDEX` refers to the index number shown in the displayed Contact List."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `EVENT_LIST_INDEX` refers to the index number shown in the displayed Event List."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Two index must be a positive integer 1,2,3,4,..."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Find the participant index from Contact List+"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`listE` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Find the event index from Event List+"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`connect 3 19`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Add the third user’s name from Contact List into 19th event’ s participants list"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Disconnecting a person with an event : `disconnect`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Disconnects one user from Contact List to Event List by contacts index and event index +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `disconnect CONTACT_LIST_INDEX EVENT_LIST_INDEX`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `CONTACT_LIST_INDEX` refers to the index number shown in the displayed Contact List."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `EVENT_LIST_INDEX` refers to the index number shown in the displayed Event List."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Two index must be a positive integer 1,2,3,4,..."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Find the participant index from Contact List+"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`listE` +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Find the event index from Event List+"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`disconnect 3 19`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Disconnect the third user’s name from Contact List with 19th event’ s participants list"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Adding an event: `addE`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Adds an event to event list+"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `addE n/NAME [d/DESCRIPTION] v/VENUE s/STARTING_TIME [e/ENDING_TIME] [t/LABEL]...`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "An event can have any number of label (including 0)"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `addE n/career talk d/Google company info session v/com1 level2 s/2019-01-31 14:00:00 t/important`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "* `addE n/CS2103 project meeting v/central library s/2019-12-31 16:00:00`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Deleting an event : `deleteE`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Deletes the specified event from the event list. +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `deleteE INDEX`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Deletes the event at the specified `INDEX`."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* The index refers to the index number shown in the displayed event list."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`deleteE 2` +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Deletes the 2nd event in the event list."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Listing all events : `listE`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Shows a list of all events in the event list. +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `listE`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clearE`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Clears all entries from the event list. +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `clearE`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Showing all the participants : `displayP`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Show all participants in specific event"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `displayP INDEX`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Index must be positive integers 1,2,3…."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `listE` +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "List all events in index order, find the event index. +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`displayP 23` +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Return all participants names in 23rd event."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d\u003d\u003d Planning a meeting : `meet`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Show all contacts"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Format: `meet INDEX`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* Index *must be positive integers* 1,2,3..."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* INDEX may take on multiple indices."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "List all contacts in index order, find the contact index. +"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "`meet 1 5 8` +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Return a suitable meeting timeslot and venue among indicated contacts."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* *Remind* : `remind`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* *Repeat* : `repeat`"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 25,
      "yinya998": 12,
      "yonggqiii": 16,
      "jwl1997": 209,
      "-": 253
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Finds and lists all persons in address book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * whose field(name, address, email, phone) contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \": Finds all persons whose field contain any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Parameters: [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Example1: \" + COMMAND_WORD + \" yinya alex  \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"\\\\if there\u0027s no prefix, all fields will be searched\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Example2: \" + COMMAND_WORD + \" p/123456 t/teammate\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Example3: \" + COMMAND_WORD + \" t/friends teammate\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    //private final NameContainsKeywordsPredicate predicate;//todo delete?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_NO_PARAMETER \u003d \"Must provide at least one parameters to find.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private Predicate\u003cPerson\u003e predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public FindCommand(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public Predicate\u003cPerson\u003e getPredicate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yinya998": 23,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " * Import new contacts from the specified file path into the current address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New contacts successfully imported!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    protected static final String MESSAGE_INVALID_FILE \u003d \"Please input a valid file path\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            + \": Imports contacts using a path to a .json file.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            + \"Parameters: PATH\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" data/contacts.json\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private AddressBook addressBookImported;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public ImportCommand(Path importPath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        requireNonNull(importPath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        this.filePath \u003d importPath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        addressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            if (addressBookStorage.readAddressBook(filePath).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                this.addressBookImported \u003d new AddressBook(addressBookStorage.readAddressBook().get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                ObservableList\u003cPerson\u003e people \u003d addressBookImported.getPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                for (int i \u003d 0; i \u003c people.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                        model.addPerson(people.get(i));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                    } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_FILE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_FILE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_FILE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daDangminh": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MeetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * {@code MeetCommand} forms a meeting event with a list of persons."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * @author yonggqiii"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class MeetCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"meet\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED \u003d \"Meet command not implemented yet\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \": Plans a meeting with contacts.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \"Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 4 5\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Set\u003cInteger\u003e indices;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Creates a MeetCommand using a Set of integers based on the one-based index."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param indices The set of integers to be processed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public MeetCommand(Set\u003cInteger\u003e indices) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.indices \u003d indices;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.MeetCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        case MeetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return new MeetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daDangminh": 4,
      "yonggqiii": 4,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final Prefix PREFIX_AVATOR \u003d new Prefix(\"av/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_LABEL \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.AddressContainsKeywordPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.EmailContainsKeywordPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.PhoneContainsKeywordPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.TagsContainsKeywordPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * check if there\u0027s a prefix in the command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private boolean hasPrefix(String command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String[] commands \u003d command.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return (commands[0].contains(PREFIX_NAME.toString()) || commands[0].contains(PREFIX_EMAIL.toString())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || commands[0].contains(PREFIX_ADDRESS.toString())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || commands[0].contains(PREFIX_PHONE.toString())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || commands[0].contains(PREFIX_TAG.toString()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        //String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        //return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ArrayList\u003cPredicate\u003cPerson\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Predicate\u003cPerson\u003e predicateResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // if there\u0027s no prefix, find in all fields"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (!hasPrefix(trimmedArgs)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String[] splitedKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new NameContainsKeywordsPredicate(Arrays.asList(splitedKeywords)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new PhoneContainsKeywordPredicate(Arrays.asList(splitedKeywords)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new EmailContainsKeywordPredicate(Arrays.asList(splitedKeywords)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new AddressContainsKeywordPredicate(Arrays.asList(splitedKeywords)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new TagsContainsKeywordPredicate(Arrays.asList(splitedKeywords)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            Predicate\u003cPerson\u003e[] predicatesList \u003d predicates.toArray(new Predicate[predicates.size()]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicateResult \u003d Stream.of(predicatesList).reduce(condition -\u003e false, Predicate::or);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return new FindCommand(predicateResult);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // create find Command according to the specific prefix"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String[] nameList \u003d argMultimap.getValue(PREFIX_NAME).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new NameContainsKeywordsPredicate(Arrays.asList(nameList)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String[] emailList \u003d argMultimap.getValue(PREFIX_EMAIL).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new EmailContainsKeywordPredicate(Arrays.asList(emailList)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String[] phoneList \u003d argMultimap.getValue(PREFIX_PHONE).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new PhoneContainsKeywordPredicate(Arrays.asList(phoneList)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String[] addressList \u003d argMultimap.getValue(PREFIX_ADDRESS).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new AddressContainsKeywordPredicate(Arrays.asList(addressList)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String[] tagList \u003d argMultimap.getValue(PREFIX_TAG).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new TagsContainsKeywordPredicate(Arrays.asList(tagList)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Predicate\u003cPerson\u003e[] predicatesList \u003d predicates.toArray(new Predicate[predicates.size()]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        predicateResult \u003d Stream.of(predicatesList).reduce(condition -\u003e true, Predicate::and);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return new FindCommand(predicateResult);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yinya998": 91,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**@@author Bumblebee"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        // remove leading and trailing white space"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        // TODO: check invalid args"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        Path filePath \u003d Paths.get(trimmedArgs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        return new ImportCommand(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daDangminh": 46,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MeetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.MeetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * Parses input arguments and creates a new MeetCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * @author yonggqiii"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class MeetCommandParser implements Parser\u003cMeetCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MeetCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * and returns an MeetCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public MeetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // remove leading and trailing white space"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MeetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        String[] splitArgs \u003d trimmedArgs.split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cInteger\u003e indices \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            for (int i \u003d 0; i \u003c splitArgs.length; ++i) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                indices.add(Integer.parseInt(splitArgs[i]));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MeetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new MeetCommand(indices);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/AddressContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Address} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class AddressContainsKeywordPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public AddressContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this || (other instanceof AddressContainsKeywordPredicate"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((AddressContainsKeywordPredicate) other).keywords));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yinya998": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/EmailContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Email} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class EmailContainsKeywordPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public EmailContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this || (other instanceof EmailContainsKeywordPredicate"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((EmailContainsKeywordPredicate) other).keywords));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yinya998": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public String getTagsAsStringNoBracket() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        StringBuffer sb \u003d new StringBuffer(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        for (Tag tag: tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            sb.append(tag.toStringNoBracket() + \" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 8,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PhoneContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class PhoneContainsKeywordPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public PhoneContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this || (other instanceof PhoneContainsKeywordPredicate"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((PhoneContainsKeywordPredicate) other).keywords));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yinya998": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TagsContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class TagsContainsKeywordPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public TagsContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getTagsAsStringNoBracket(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this || (other instanceof TagsContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagsContainsKeywordPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/DuplicateReminderException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Signals that the operation will result in duplicate reminder in reminder list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Reminders are considered duplicates if they have the same identity."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class DuplicateReminderException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE \u003d \"Operation would result in duplicate reminder\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public DuplicateReminderException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        super(MESSAGE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/NotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Signals that the given data is not found in the reminder list, aka has some errors."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class NotFoundException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public NotFoundException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/Reminder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " *  Represents a Reminder in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " *  Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Every filed must be present and not NULL"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Reminder(Event event, String message) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireAllNonNull(event, message);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Reminder(String name, String message) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireAllNonNull(name, message);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Reminder (Reminder source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this(source.getEvent(), source.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Set the message of reminder, reminder message must be present and not NULL"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void setMessage(String message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireAllNonNull(message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    //TODO: implement getEvent, which needs a get() in event class, event file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Event getEvent() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Returns true if both reminders have same data filed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * This defines a stronger notion of equality between two reminders."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (other instanceof Reminder \u0026\u0026 this.equals((Reminder) other)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return Objects.hash(event, message);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/ReminderList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Represents a ReminderList in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class ReminderList implements Iterable\u003cReminder\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * If the reminder list contains reminder other, then return true."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Otherwise, return false."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean contains(Reminder other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return internalList.contains(other);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *  Add reminder toAdd into reminder list, which throws {@code DuplicateReminderException}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *  If toAdd already exists in reminder list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void add(Reminder toAdd) throws DuplicateReminderException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        internalList.add(new Reminder(toAdd));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Iterator\u003cReminder\u003e iterator() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *  Returns true if both reminder lists have same data filed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *  This defines a stronger notion of equality between two reminders."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                || (other instanceof ReminderList // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((ReminderList) other).internalList));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public String toStringNoBracket() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 5,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                instanceof FindCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertTrue(parser.parseCommand(FindCommand.COMMAND_WORD + \" n/baz\") instanceof FindCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        //todo"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 10,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String Command \u003d \"n/Alice Bob\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String[] splitedKeywords \u003d Command.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ArrayList\u003cPredicate\u003cPerson\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        predicates.add(new NameContainsKeywordsPredicate(Arrays.asList(splitedKeywords)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Predicate\u003cPerson\u003e[] predicatesList \u003d predicates.toArray(new Predicate[predicates.size()]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Predicate\u003cPerson\u003e PredicateResult \u003d Stream.of(predicatesList).reduce(condition -\u003e false, Predicate::or);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        no leading and trailing whitespaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new FindCommand(PredicateResult);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertParseSuccess(parser, \"n/Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        multiple whitespaces between keywords"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "*/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 16,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // Keywords match phone, email and address and tag, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\", \"family\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withTags(\"family\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 4,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final Person YINYA \u003d new PersonBuilder().withName(\"Chen Yinya\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withAddress(\"Utown\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withEmail(\"yinya@example.com\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withTags(\"teammate\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final Person KAI \u003d new PersonBuilder().withName(\"Kai Song\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withAddress(\"PGP\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withEmail(\"kai@example.com\").withPhone(\"67890\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withTags(\"owesMoney\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 10,
      "-": 76
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KAI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.YINYA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found*/"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found*/"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found*/"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: find address of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: find email of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 3 persons found */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL, BENSON, ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: search keywords in all fields if there\u0027s no prefix -\u003e 2 persons found*/"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" yinya PGP\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, YINYA, KAI);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: search multiple keywords in same fields -\u003e 4 persons found*/"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" t/friends teammate\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL, BENSON, ALICE, YINYA);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: search keywords in different fields -\u003e 1 persons found*/"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" t/friends n/daniel\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: search keywords in different fields -\u003e 0 persons found*/"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" a/utown t/owesMoney\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 36,
      "-": 190
    }
  }
]
