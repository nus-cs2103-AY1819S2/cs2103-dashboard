[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d PocketProject"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/cs2103-ay1819s2-w10-2/main[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/cs2103-ay1819s2-w10-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/cs2103-ay1819s2-w10-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* PocketProject (Project Manager)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* This is a desktop Project Manager application. Most of the user interactions happen using a CLI (Command Line Interface)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "and there is   also a GUI to support the system. It is an application using Java as the main programming language."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* It is intended for managers who are in charge of many software engineering projects and who have a large number of"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "employees assigned to each project at any given time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* Managers can view project details such as"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Employees assigned"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Deadline"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Client"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Milestones"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d Authors"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* Daryl Tan (https://github.com/ditan96[@ditan96])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* Jeff Gan (https://github.com/jeffgan96[@jeffgan96])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* Jothinandan Pillay (https://github.com/jothipillay[@jothipillay])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* Lin Dehui (https://github.com/dehui333[@dehui333])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* Shune Lei (https://github.com/shunnizuka[@shunnizuka])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* PocketProject is based on the AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* Some parts of this application were inspired by the excellent"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ditan96"
        },
        "content": "http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by _Marco Jakob_."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ditan96": 17,
      "-": 26,
      "jothipillay": 10
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "      \"githubId\": \"ditan96\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "      \"displayName\": \"DAR...ANG\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "      \"authorNames\": [\"ditan96\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "      \"githubId\": \"jeffgan96\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "      \"displayName\": \"GAN...EFF\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "      \"authorNames\": [\"jeffgan96\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "      \"githubId\": \"dehui333\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "      \"displayName\": \"LIN...HUI\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "      \"authorNames\": [\"dehui333\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "      \"githubId\": \"jothipillay\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "      \"displayName\": \"MAN...LAY\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "      \"authorNames\": [\"jothipillay\", \"jothi pillay\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "      \"githubId\": \"shunnizuka\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "      \"displayName\": \"SHU...TUN\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "      \"authorNames\": [\"shunnizuka\", \"x240\\\\Shune\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shunnizuka": 30
    }
  },
  {
    "path": "copyright.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿Some code adapted from http://code.makery.ch/library/javafx-8-tutorial/ by Marco Jakob"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Susumu Yoshida - http://www.mcdodesign.com/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "- address_book_32.png"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "- AddressApp.ico"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Jan Jan Kovařík - http://glyphicons.com/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "- calendar.png"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "- edit.png"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 1,
      "-": 9
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "PocketProject was developed by the https://github.com/cs2103-ay1819s2-w10-2[W10-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003d\u003d\u003d DARYL IGNATIUS TAN BOON YANG"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "image::ditan96.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ditan96"
        },
        "content": "{empty}[https://github.com/ditan96[github]]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*Roles*: Team lead, Integration"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*Responsibilities*: Logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003d\u003d\u003d GAN MING RUI JEFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "image::jeffgan96.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "{empty}[http://github.com/jeffgan96[github]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*Roles*: Code Quality"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*Responsibilities*: UI, JavaFX"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003d\u003d\u003d LIN DEHUI"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "image::dehui333.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ditan96"
        },
        "content": "{empty}[http://github.com/dehui333[github]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*Roles*: Scheduling and tracking"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*Responsibilities*: Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003d\u003d\u003d MANICKAMALAR JOTHINANDAN PILLAY"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "image::jothipillay.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ditan96"
        },
        "content": "{empty}[http://github.com/jothipillay[github]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*Roles*: Documentation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*Responsibilities*: Logic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003d\u003d\u003d SHUNE LEI YEE TUN"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "image::shunnizuka.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ditan96"
        },
        "content": "{empty}[http://github.com/shunnizuka[github]]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*Roles*: Deliverables and deadlines"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*Responsibilities*: Storage"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ditan96": 21,
      "jeffgan96": 10,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2103-ay1819s2-w10-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "* *Email us* : You can also reach us at `Shune [at] e0201222@u.nus.edu` +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                                        `Jothi [at] jothinandan.pillay@u.nus.edu` +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                                        `Jeff [at] e0176359@u.nus.edu` +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                                        `Daryl [at] e0148782@u.nus.edu` +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                                        `Dehui [at] e0203126@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "jeffgan96": 5,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d PocketProject - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w10-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "By: `Team CS2103-AY1819S2-W10-2`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "PocketProject is primarily an application for software engineering project managers who are currently in-charge of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "a large team of employees and many projects. This application employs the use of a Command Line Interface(CLI) to easily"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "navigate through the application which contributes to the efficiency and user-friendliness of the end product."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "This application allows managers to keep track of all the employees and their related background information such as their"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "GitHub account username and relevant skills. Additionally, it also helps to keep track of all the projects that the manager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "is currently involved with and key details of the project such the client, deadline and milestones can also be stored."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Through the combination of the two main components, the application allows the storing and viewing of all the employees"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "working on particular project and all the projects currently under a single employee among other functionalities."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d Legends"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "The following section details and previews a few legends that will"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "be used throughout the user guide. These legends are used to represent"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "special information such as tips and warnings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|Legend |Meaning"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|image:ug-lightbulb.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|The light bulb icon will be used to indicate any useful tips or shortcuts"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "that users can take note of while using the PocketProject application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|image:ug-exclamation.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|The exclamation mark icon will be used to indicate any warnings that users"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " can take note of while using the PocketProject application."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|image:ug-smart.png[width\u003d\"60\"]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|The graduation cap icon will be used to indicate any advanced usages or"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " extra technical information about how a particular command works should"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " users be interested to know."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Open link:{repoURL}/blob/master/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/blob/master/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/pocketproject` repo."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/pocketproject`), you should do the following:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/blob/master/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/blob/master/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/blob/master/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ditan96"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/blob/master/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ditan96"
        },
        "content": "`Main` has only one class called link:{repoURL}/blob/master/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ditan96"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `EmployeeListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ditan96"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/blob/master/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/blob/master/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ditan96"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ".  `Logic` uses the `PocketProjectParser` class to parse the user command."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a employee)."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* stores the Pocket Project data."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cEmployee\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ditan96"
        },
        "content": "As a more OOP model, we can store a `Skill` list in `Pocket Project`, which `Employee` can reference. This would allow `Pocket Project` to only require one `Skill` object per unique `Skill`, instead of each `Employee` needing their own `Skill` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* can save the Pocket Project data in json format and read it back."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ditan96"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "// skill::addTo[]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d Add employee/milestone to projects feature"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "This feature focuses on the adding of employees or milestones to a selected project and is mainly facilitated"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "by the model component of the PocketProject application. This feature supports two main commands:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `addto [project name] employee [employee index]` -- removes the employee at index `[employee index]` in the list of all employees in the Pocket Project application."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `addto [project name] milestone [milestone details]` -- adds the milestone specified in `[milestone details]` to the list of milestones in the project named `[project name]`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "These operations are supported by the methods in the `Model` interface: `Model#addEmployeeTo(Project, Employee)` and `Model#addMilestoneTo(Project, Milestone)`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "These two methods only take in the project and employee/milestone as arguments as the correct Employee/Milestone object would be located by"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "`AddEmployeeToCommand#excute()` or `AddMilestoneToCommand#execute()` before the methods of `Model` are called."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Given below is an example usage scenario and how the addition of employee/milestone to a project feature behaves at each step."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "`AddEmployeeTo Command`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Step 1. The user enters the command `list employees\u0027. The app displays the list of employees in the Pocket Project by executing the `list` command."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Step 2. The user enters `addto Apollo employee 1`. The `LogicManager` passes the entered string to the `PocketProjectParser`. The `PocketProjectParser` parses the string received and identifies the command as falling under the class of `AddToCommand`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "by the `addto` keyword and passes the rest of the string to the `AddToCommandParser` to identify which type of `AddToCommand` is being executed and what are the arguments."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "The `AddToCommandParser` then creates command object and passes it to the `LogicManager` to be executed. The command execution will check the validity of the arguments and then call the methods of the `Model` component to add the corresponding object."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "`AddMilestoneTo Command`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Step 1. The user enters the command `addto Apollo milestone [milestone details]\u0027. The rest of the execution process is"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "similar to Step 2 of the `AddEmployeeTo Command` mentioned above. Only the object added is decided between an employee or a"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "milestone depending on the user input."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-lightbulb.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Tip: The `[project name]` entered must be valid and exists in the app. The `[employee index]` given must refer to some existing employee. Also,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "the milestone added needs to be of the correct format. If not, exceptions would be thrown during the execution of the command."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d Future Planned Implementations"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "The following additional features are scheduled to be implemented in future version."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "1. Add an alias to to the addto commands so that it is more user-friendly for users of this application. Users"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "can key in the two above mentioned commands by replacing `employee` with `e` and `milestone` with `m`. The commands can be"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "input as such:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `addto [project name] e [employee index]` -- removes the employee at index `[employee index]` in the list of all employees in the Pocket Project application."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `addto [project name] m [milestone details]` -- adds the milestone specified in `[milestone details]` to the list of milestones in the project named `[project name]`."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "The commands will be processed in the same way without any other changes."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "// end::addto[]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dehui333"
        },
        "content": "// skill::removefrom[]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003d\u003d\u003d Remove employee/milestone from projects feature"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dehui333"
        },
        "content": "The removing of employee or milestone from projects is facilitated by the model component of the PocketProject."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dehui333"
        },
        "content": "This feature currently supports these two commands:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dehui333"
        },
        "content": "* `removefrom [project name] employee [employee index]` -- removes the employee at index `[employee index]` in the list of employees in the project named `[project name]`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dehui333"
        },
        "content": "* `removefrom [project name] milestone [milestone index]` -- removes the milestone at index `[milestone index]` in the list of milestones in the project named `[project name]`."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dehui333"
        },
        "content": "These operations are supported by the methods in the `Model` interface: `Model#removeEmployeeFrom(Project, Employee)` and `Model#removeMilestoneFrom(Project, Milestone)`."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dehui333"
        },
        "content": "The methods does not take in indices as arguments since the corresponding Employee or Milestone object associated with the Project object would be found by `RemoveEmployeeFromCommand#excute()`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dehui333"
        },
        "content": "or `RemoveMilestoneFromCommand#execute()`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dehui333"
        },
        "content": "before the methods of `Model` are called."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dehui333"
        },
        "content": "The sequence diagram for the execution of the removing of employee from a project is as follows, the sequence for the removal of milestone is similar:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dehui333"
        },
        "content": "image::remove_employee_from_sequence_diagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "dehui333"
        },
        "content": "Given below is an example usage scenario and how the removal of employee/milestone feature behaves at each step."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "dehui333"
        },
        "content": "Step 1. The user enters the command `view project Apollo\u0027. The app displays the list of employees and milestones in the project named \"Apollo\" by executing the `view` command."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dehui333"
        },
        "content": "Step 2. The user enters `removefrom Apollo employee 1`. The `LogicManager` passes the entered string to the `PocketProjectParser`. The `PocketProjectParser` parses the string received and identifies the command as falling under the class of `RemoveFromCommand` (which constitutes of `RemoveEmployeeFromCommand`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "dehui333"
        },
        "content": "and `RemoveMilestoneFromCommand` by the `removefrom` keyword and passes the rest of the string to the `RemoveFromCommandParser` to identify which type of `RemoveFromCommand` is being executed and what are the arguments."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dehui333"
        },
        "content": "The `RemoveFromCommandParser` then creates command object and passes it to the `LogicManager` to be executed. The command execution will check the validity of the arguments and then call the methods of the `Model` component to remove the corresponding objects."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dehui333"
        },
        "content": "Step 3. The user executes \u0027removefrom Apollo milestone 2\u0027. The execution of this command is similar to step 2, just that the type of object changes from `Employee` to `Milestone`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-lightbulb.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Tip: The `[project name]` entered must be valid and exists in the app. The `[employee index]` or `[milestone index]` given must refer to some existing employee or milestone. If not, exceptions would be thrown during the execution of the command."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the command string (e.g. `removefrom Apollo employee 1`) is parsed"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dehui333"
        },
        "content": "Alternative 1: Let `PocketProjectParser` handle the whole string and construct the command."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dehui333"
        },
        "content": "Alternative 2: Having 2 parsing stages where the `PocketProjectParser` identify that the command string is trying to execute a `RemoveFromCommand` from the `removefrom` key word, then passes"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dehui333"
        },
        "content": "the rest of the string to another specialized `RemoveFromCommandParser`. (current implementation)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "dehui333"
        },
        "content": "Using alternative 2 is better  as it provides better abstraction as the details of the 2 different types of `RemoveFromCommand` will be hidden away, hence it is more in line with OOP principles."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dehui333"
        },
        "content": "There will also be less clutter in `PocketProjectParser` as there are already a lot of other commands being parsed."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dehui333"
        },
        "content": "// end::removefrom[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "\u003d\u003d\u003d Find Employee/Project/Skill feature"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "For the current `find` feature, there are 3 main commands that the user can execute:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    1. `find employee [keywords]` - display employees with name containing keywords"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    2. `find project [keywords]` - display projects with name containing keywords"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    3. `find skill [keywords]` - display employees who has skills matching the keywords"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "The `FindCommandParser` differentiate these 3 commands based on the `COMMAND_KEYWORDS` entered by the users (e.g. employee/project/skill)."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "The following sequence diagram shows how the `find employee` command works:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "image::findcommand_sequence_diagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "Usage Scenario example for `find employee`:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "1. User executes `find employee John` to look for employees whose names contains the word \u0027John\u0027."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "2. `PocketProjectParser` will parse and identify the command as a `FindCommand` and pass on the argument `employee John` to `FindCommandParser`."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "3.  `FindCommandParser` identify the command based on the `COMMAND_KEYWORD` employee."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "4. `find employee` command is executed. Employees with name consisting the keywords are filtered out from the employeelist and the `filteredEmployees` list which is the list displayed on the ui is updated."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "The working mechanism for `find project` is similar to `find employee`. Instead of updating the `filteredEmployees`, `filteredProjects` is updated instead to display the list of projects with name consisting the keywords."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "For `find skill` command, the `List\u003cSkills\u003eskills` from employee is retrieved as a `String` to match against the keywords. Then the matched employees are filtered and displayed on the ui."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How `find` command is parsed"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "Alternative 1: Have a nested `FindCommandParser` (current implementation)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "Alternative 2: Let `PocketProjectParser` handle parsing of all the `find` commands"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "Using Alternative 1 is better as it provides better abstraction as the details of the 3 different commands will be hidden away. Hence it is more in line with OOP principles. There will also be less clutter in `FindCommandParser` as there are already a lot of other commands being parsed."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ditan96"
        },
        "content": "// skill::undoredo[]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003d\u003d\u003d List Employee/Project feature"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "For the current list feature, there are 2 main commands that the user can execute:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    1. `list employee` - displays all employees"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    2. `list project` - displays all projects"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "The `ListCommandParser` will parse the user input based on the `COMMAND_KEYWORD` entered by the user, and then execute the appropriate command based on the keyword given."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "The following sequence diagram shows how the list employee command works:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "image::listcommand_sequence_diagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "Usage Scenario example for `list employee`:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "1.\tUser executes `list employee` to list all employees in PocketProject."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "2.\t`PocketProjectParser` will parse and identify the command as a `ListCommand` and pass the argument employee to `ListCommandParser`."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "3.\t`ListCommandParser` identifies the command to execute based on the `COMMAND_KEYWORD` and returns a `ListEmployeeCommand`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "4.\t`LogicManager` then executes `ListEmployeeCommand`. All the employees in PocketProject will be returned by the `filteredEmployees` list."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "The mechanism for `list project` is similar to `list employee`, apart from the fact that a `ListProjectCommand` is executed instead."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How `list command` is parsed"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "Alternative 1: Have a separate command parser for all `list` commands (current implementation)"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "Alternative 2: Let `PocketProjectParser` handle parsing of all the `list` commands"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "Using Alternative 1 is better as it provides better abstraction as the `listCommandParser` will handle all `list` commands. It also reduces the cluttering in the main `PocketProjectParser`."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ditan96"
        },
        "content": "// skill::stats[]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ditan96"
        },
        "content": "\u003d\u003d\u003d [Proposed] Stats feature"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ditan96"
        },
        "content": "\u003d\u003d\u003d\u003d Planned Implementation"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ditan96"
        },
        "content": "The displaying of statistics in Pocket Project will be facilitated by the model component. This feature is"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ditan96"
        },
        "content": "planned to support 1 main command:"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* `stats` -- Displays the total number of projects and the respective number of ongoing and completed projects"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ditan96"
        },
        "content": "The operation will be supported by the methods in the `Model` interface: `Model#getProjectList()` and `Model#getCompletedProjectList`."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ditan96"
        },
        "content": "These two methods each will retrieve an unmodifiable list of ongoing projects and completed projects respectively."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ditan96"
        },
        "content": "The following sequence diagram shows how the stats command will work:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ditan96"
        },
        "content": "image::stats_sequence_diagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ditan96"
        },
        "content": "Usage Scenario example for `stats`:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ditan96"
        },
        "content": "1.\tUser executes `stats` to view project statistics in Pocket Project."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ditan96"
        },
        "content": "2.\t`PocketProjectParser` will parse and identify the command as a `StatsCommand` and returns a `StatsCommand`."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ditan96"
        },
        "content": "3.\t`LogicManager` then executes `StatsCommand`, calling the `Model#getProjectList()` and `Model#getCompletedProjectList()` methods"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ditan96"
        },
        "content": " which return the list of ongoing and completed projects respectively."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ditan96"
        },
        "content": "4.  `StatsCommand` then returns the total number of projects and the respective number of ongoing and completed projects."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ditan96"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ditan96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the number of projects is obtained."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ditan96"
        },
        "content": "Alternative 1: Obtain the required project lists through `Model` and and get the size of the lists."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ditan96"
        },
        "content": "Alternative 2: Let `UniqueProjectList` keep track of the number of projects and implement a `UniqueProjectList#getSize()` method which is called by `StatsCommand`."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ditan96"
        },
        "content": "Using Alternative 1 is better as the Pocket Project statistics only need to be displayed when the user executes `stats`."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ditan96"
        },
        "content": "Alternative 2 would require additional checks to ensure that there is live update of project statistics in `UniqueProjectList` every time a project is added, deleted or completed."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ditan96"
        },
        "content": "// end::stats[]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedPocketProject`."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "It extends `PocketProject` with an undo/redo history, stored internally as an `pocketProjectStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `VersionedPocketProject#commit()` -- Saves the current pocket project state in its history."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `VersionedPocketProject#undo()` -- Restores the previous pocket project state from its history."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `VersionedPocketProject#redo()` -- Restores a previously undone pocket project state from its history."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitPocketProject()`, `Model#undoPocketProject()` and `Model#redoPocketProject()` respectively."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedPocketProject` will be initialized with the initial pocket project state, and the `currentStatePointer` pointing to that single pocket project state."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th employee in the pocket project. The `delete` command calls `Model#commitPocketProject()`, causing the modified state of the pocket project after the `delete 5` command executes to be saved in the `pocketProjectStateList`, and the `currentStatePointer` is shifted to the newly inserted pocket project state."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new employee. The `add` command also calls `Model#commitPocketProject()`, causing another modified pocket project state to be saved into the `pocketProjectStateList`."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "If a command fails its execution, it will not call `Model#commitPocketProject()`, so the pocket project state will not be saved into the `pocketProjectStateList`."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ditan96"
        },
        "content": "Step 4. The user now decides that adding the employee was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoPocketProject()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous Pocket Project state, and restores the Pocket Project to that state."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ditan96"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial Pocket Project state, then there are no previous Pocket Project states to restore. The `undo` command uses `Model#canUndoPocketProject()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ditan96"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoPocketProject()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the Pocket Project to that state."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ditan96"
        },
        "content": "If the `currentStatePointer` is at index `pocketProjectStateList.size() - 1`, pointing to the latest Pocket Project state, then there are no undone Pocket Project states to restore. The `redo` command uses `Model#canRedoPocketProject()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ditan96"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the Pocket Project, such as `list`, will usually not call `Model#commitPocketProject()`, `Model#undoPocketProject()` or `Model#redoPocketProject()`. Thus, the `pocketProjectStateList` remains unchanged."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ditan96"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitPocketProject()`. Since the `currentStatePointer` is not pointing at the end of the `pocketProjectStateList`, all pocket project states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire Pocket Project."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the employee being deleted)."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of Pocket Project states."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedPocketProject`."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ditan96"
        },
        "content": "// skill::dataencryption[]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ditan96"
        },
        "content": "The link:{repoURL}/blob/master/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ditan96"
        },
        "content": "The files in link:{repoURL}/blob/master/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ditan96"
        },
        "content": "The files in link:{repoURL}/blob/master/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ditan96"
        },
        "content": "Modifying the template files in link:{repoURL}/blob/master/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ditan96"
        },
        "content": ".  Update the version number in link:{repoURL}/blob/master/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ditan96"
        },
        "content": "A project often depends on third-party libraries. For example, Pocket Project depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all employees in the list."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/blob/master/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/blob/master/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** link:{repoURL}/blob/master/src/main/java/seedu/address/logic/parser/PocketProjectParser.java[`PocketProjectParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Modify the switch statement in link:{repoURL}/blob/master/src/main/java/seedu/address/logic/parser/PocketProjectParser.java[`PocketProjectParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular skill from everyone in the Pocket Project, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Add a `removeSkill(Skill)` method. The specified skill will be removed from everyone in the Pocket Project."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** The link:{repoURL}/blob/master/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/blob/master/src/main/java/seedu/address/model/PocketProject.java[`PocketProject`] API need to be updated."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting skills?"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "ditan96"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/blob/master/src/main/java/seedu/address/model/PocketProject.java[`PocketProject`] and link:{repoURL}/blob/master/src/main/java/seedu/address/model/employee/Employee.java[`Employee`] classes can be used to implement the skill removal logic. link:{repoURL}/blob/master/src/main/java/seedu/address/model/PocketProject.java[`PocketProject`] allows you to update a employee, and link:{repoURL}/blob/master/src/main/java/seedu/address/model/employee/Employee.java[`Employee`] allows you to update the skills."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Implement a `removeSkill(Skill)` method in link:{repoURL}/blob/master/src/main/java/seedu/address/model/PocketProject.java[`PocketProject`]. Loop through each employee, and remove the `skill` from each employee."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Add a new API method `deleteSkill(Skill)` in link:{repoURL}/blob/master/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/blob/master/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `PocketProject#removeSkill(Skill)`."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your Pocket Project application. You realize that one of the users occasionally tries to delete non-existent skills from a contact, because the skills all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last employee in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Use different colors for different skills inside employee cards. For example, `friends` skills can be all in brown, and `colleagues` skills can be all in yellow."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** The skill labels are created inside link:{repoURL}/blob/master/src/main/java/seedu/address/ui/EmployeeCard.java[the `EmployeeCard` constructor] (`new Label(skill.skillName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** You can modify the existing test methods for `EmployeeCard` \u0027s to include testing the skill\u0027s color as well."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*** The PR uses the hash code of the skill names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own skill colors, and directly saving the colors to storage, so that skills retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/blob/master/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** link:{repoURL}/blob/master/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/blob/master/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/blob/master/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Refer to link:{repoURL}/blob/master/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Modify link:{repoURL}/blob/master/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Modify link:{repoURL}/blob/master/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*** The system tests link:{repoURL}/blob/master/src/test/java/systemtests/PocketProjectSystemTest.java[`PocketProjectSystemTest#assertCommandBoxShowsDefaultStyle() and PocketProjectSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Modify the link:{repoURL}/blob/master/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the Pocket Project."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** link:{repoURL}/blob/master/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** link:{repoURL}/blob/master/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the Pocket Project is updated."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Modify the constructor of link:{repoURL}/blob/master/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of employees when the application just started."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Use link:{repoURL}/blob/master/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handlePocketProjectChangedEvent(PocketProjectChangedEvent)`] to update the number of employees whenever there are new changes to the PocketProject."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** For tests, modify link:{repoURL}/blob/master/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** For system tests, modify link:{repoURL}/blob/master/src/test/java/systemtests/PocketProjectSystemTest.java[`PocketProjectSystemTest`] to also verify the new total number of employees status bar."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the Pocket Project to the cloud. However, the current implementation of the application constantly saves the Pocket Project after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the Pocket Project storage."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Add a new method `backupPocketProject(ReadOnlyPocketProject)`, so that the pocket project can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Add the API method in link:{repoURL}/blob/master/src/main/java/seedu/address/storage/PocketProjectStorage.java[`PocketProjectStorage`] interface."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** Implement the logic in link:{repoURL}/blob/master/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/blob/master/src/main/java/seedu/address/storage/JsonPocketProjectStorage.java[`JsonPocketProjectStorage`] class."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*Scenario:* You are a software maintainer for `PocketProject`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on skills alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "Edits the remark for a employee specified in the `INDEX`. +"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "Edits the remark for the first employee to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "Removes the remark for the first employee."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/blob/master/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/main/java/seedu/address/logic/parser/PocketProjectParser.java[`PocketProjectParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Add new test method to link:{repoURL}/blob/master/src/test/java/seedu/address/logic/parser/PocketProjectParserTest.java[`PocketProjectParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/main/java/seedu/address/logic/parser/PocketProjectParser.java[`PocketProjectParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/test/java/seedu/address/logic/parser/PocketProjectParserTest.java[`PocketProjectParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "ditan96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `EmployeeCard`"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "ditan96"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/blob/master/src/main/java/seedu/address/ui/EmployeeCard.java[`EmployeeCard`] s to display a remark for each employee later."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/blob/master/src/main/resources/view/EmployeeListCard.fxml[`EmployeeListCard.fxml`]."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Add FXML annotation in link:{repoURL}/blob/master/src/main/java/seedu/address/ui/EmployeeCard.java[`EmployeeCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/test/java/guitests/guihandles/EmployeeCardHandle.java[`EmployeeCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "ditan96"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/blob/master/src/main/java/seedu/address/model/employee/Employee.java[`Employee`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/blob/master/src/main/java/seedu/address/model/employee/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "ditan96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Employee` to support a `Remark` field"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "ditan96"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/blob/master/src/main/java/seedu/address/model/employee/Employee.java[`Employee`]."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/blob/master/src/main/java/seedu/address/model/employee/Employee.java[`Employee`]."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the employee will be created without a remark)."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/pocketproject.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "ditan96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedEmployee` class"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "ditan96"
        },
        "content": "We now have `Remark` s for `Employee` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/blob/master/src/main/java/seedu/address/storage/JsonAdaptedEmployee.java[`JsonAdaptedEmployee`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Fix `invalidAndValidEmployeePocketProject.json`, `typicalEmployeesPocketProject.json`, `validPocketProject.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "ditan96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `EmployeeBuilder`"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "ditan96"
        },
        "content": "Since `Employee` can now have a `Remark`, we should add a helper method to link:{repoURL}/blob/master/src/test/java/seedu/address/testutil/EmployeeBuilder.java[`EmployeeBuilder`], so that users are able to create remarks when building a link:{repoURL}/blob/master/src/main/java/seedu/address/model/employee/Employee.java[`Employee`]."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/blob/master/src/test/java/seedu/address/testutil/EmployeeBuilder.java[`EmployeeBuilder`]. This method will create a new `Remark` for the employee that it is currently building."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Try and use the method on any sample `Employee` in link:{repoURL}/blob/master/src/test/java/seedu/address/testutil/TypicalEmployees.java[`TypicalEmployees`]."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "ditan96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `EmployeeCard`"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "ditan96"
        },
        "content": "Our remark label in link:{repoURL}/blob/master/src/main/java/seedu/address/ui/EmployeeCard.java[`EmployeeCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/main/java/seedu/address/ui/EmployeeCard.java[`EmployeeCard`]\u0027s constructor to bind the `Remark` field to the `Employee` \u0027s remark."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "ditan96"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysEmployee(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a employee."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "ditan96"
        },
        "content": "* has a need to manage a significant number of employees and software engineering projects"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "ditan96"
        },
        "content": "*Value proposition*: manage employees and projects faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "ditan96"
        },
        "content": "|`* * *` |Software engineering project manager |Be able to add/delete projects in the app |Keep track of any new projects and remove unnecessary entries"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "ditan96"
        },
        "content": "|`* * *` |Software engineering project manager |See all the current ongoing projects listed by priority |Keep track of which projects require immediate attention"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "ditan96"
        },
        "content": "|`* * *` |Software engineering project manager |Find all employees that have a certain skill |Assign the right people with the required skills to the right projects"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "ditan96"
        },
        "content": "|`* * *` |Software engineering project manager |Add/delete skills from employees |Update the skills possessed by employees as and when required"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "ditan96"
        },
        "content": "|`* *` |Software engineering project manager |See total number of projects listed as completed and ongoing|Keep track of how many projects have been successfully completed and the number of ongoing projects at a glance"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "ditan96"
        },
        "content": "|`* *` |Software engineering project manager |See a recommended list of employees based on the skill requirement of a project|Easily assign employees with the required skills to the project"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "ditan96"
        },
        "content": "(For all use cases below, the *System* is the `PocketProject` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003d\u003d\u003d Use case: Delete employee"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "1.  User requests to list employees"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "ditan96"
        },
        "content": "2.  PocketProject shows a list of employees"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "3.  User requests to delete a specific employee in the list"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "ditan96"
        },
        "content": "4.  PocketProject deletes the employee"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "ditan96"
        },
        "content": "** 3a1. PocketProject shows an error message."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".  Should be able to hold up to 1000 employees without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003d\u003d\u003d Deleting a employee"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ". Deleting a employee while all employees are listed"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".. Prerequisites: List all employees using the `list` command. Multiple employees in the list."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "   Expected: No employee is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "ditan96": 142,
      "jeffgan96": 48,
      "dehui333": 47,
      "-": 818,
      "shunnizuka": 31,
      "jothipillay": 100
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d Pocket Project - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w10-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Authors: `Daryl Tan, Jeff Gan, Jothinandan Pillay, Lin Dehui, Shune Lei`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Since: `August 2018` License: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "PocketProject is primarily an application for software engineering project managers who are currently in-charge of"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "a team of large employees and many projects. This application employs the use of a Command Line Interface(CLI) to easily"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "navigate through the application which contributes to the efficiency and user-friendliness of the end product."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "This application allows managers to keep track of all the employees and their related background information such as their"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "GitHub account username and relevant skills. Additionally, it also helps to keep track of all the projects that the manager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "is currently involved with and key details of the project such the client, deadline and milestones can also be stored."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Through the combination of the two main components, the application allows the storing and viewing of all the employees"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "working on particular project and all the projects currently under a single employee among other functionalities."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ".  Download the latest `pocketproject.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Pocket Project."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "* *`list employee`* : lists all employees"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "`John Doe` to the Pocket Project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* **`delete`**`3` : deletes the 3rd employee shown in the current list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d Legends"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "The following section details and previews a few legends that will"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "be used throughout the user guide. These legends are used to represent"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "special information such as tips and warnings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|Legend |Meaning"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|image:ug-notepadpencil.png[width\u003d\"40\"]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|The note pad icon indicates any useful tips or things that users"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "need to take note of while using the Pocket Project application."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|image:ug-lightbulb.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|The light bulb icon indicates any shortcuts"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "that users can use while using the Pocket Project application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|image:ug-exclamation.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|The exclamation mark icon indicates any warnings that users"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " can take note of while using the Pocket Project application."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|image:ug-smart.png[width\u003d\"60\"]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|The graduation cap icon indicates any advanced usages or"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " extra technical information about how a particular command works should the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " users be interested to know."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [s/Skill]` can be used as `n/John Doe s/Java` or as `n/John Doe`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[s/Skill]...` can be used as `{nbsp}` (i.e. 0 times), `s/Java`, `s/Java s/HTML` etc."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, then  `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d Add an employee or project to the application: `add`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d Add an employee to the application: `add employee`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Adds an employee to the list of employees."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Format: `add employee n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [s/SKILL]...`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `add employee n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `add employee n/Betsy Crowe e/betsycrowe@example.com a/Newgate Prison p/1234567 s/HTML`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-notepadpencil.png[width\u003d\"40\"]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "An employee can have any number of skills (including 0)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d Add a project to the application: `add project`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Adds a project to the list of projects."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Format: `add project n/NAME d/DEADLINE c/CLIENT_NAME`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `add project n/Apollo d/12/12/2019 c/FairPrice`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `add project n/Xtreme c/John Smith d/13/04/2020`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-lightbulb.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Users can simply use \u0027e\u0027 as an alias for \u0027employee\u0027 and \u0027p\u0027 as an alias for \u0027project\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "while keying in a command into the CLI."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d Delete an employee or a project from the application `delete`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d Delete an employee from the application: `delete employee`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Deletes the specified employee from the employee list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Format: `delete employee INDEX`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-notepadpencil.png[width\u003d\"40\"]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Deletes the employee at the specified `INDEX`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "The index refers to the index number (one-based) shown in the displayed list of employees."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-exclamation.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "The index must be a *positive integer* and cannot be larger than the size of the list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dehui333"
        },
        "content": "* `list employees` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dehui333"
        },
        "content": "`delete employee 2` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Deletes the 2nd person in the displayed employee list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dehui333"
        },
        "content": "* `find employee Betsy` +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dehui333"
        },
        "content": "`delete employee 1` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Deletes the 1st person in the resultant employee list shown by the `find` command."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-notepadpencil.png[width\u003d\"40\"]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Either the `list employee` command or the `find employee` command needs to be invoked"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "before calling the `delete employee` command as the index is referenced from the last returned list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "of employees."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a project from the application: `delete project`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Deletes the project from the list of projects."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dehui333"
        },
        "content": "Format: `delete project PROJECT_NAME` or `delete project PROJECT_INDEX`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "`delete project Apollo` +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Deletes project \"Apollo\" from project list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dehui333"
        },
        "content": "`delete project 2` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dehui333"
        },
        "content": "Deletes the second project shown in the most recent displayed list of projects."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-lightbulb.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Users can simply use \u0027e\u0027 as an alias for \u0027employee\u0027 and \u0027p\u0027 as an alias for \u0027project\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "while keying in a command into the CLI."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d Listing all employees or projects in application : `list`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d List all employees in the application: `list employees`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Shows a list of all employees in the employee list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Format: `list employees`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d List all projects in the application: `list projects`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Shows a list of all projects in the project list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Format: `list projects`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-lightbulb.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Users can simply use \u0027e\u0027 as an alias for \u0027employee\u0027 and \u0027p\u0027 as an alias for \u0027project\u0027"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "while keying in a command into the CLI."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d Edit an employee in the application : `edit`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Edits an existing employee."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [s/SKILL]...`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-notepadpencil.png[width\u003d\"40\"]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Edits the employee at the specified `INDEX`. The index refers to the index number shown in the displayed employee list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-notepadpencil.png[width\u003d\"40\"]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "At least one of the optional fields must be provided and all existing values will be updated with the input values."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "When editing skills, the existing skills of the person will be removed i.e adding of skills is not cumulative."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `edit 2 n/Betsy Crower s/Java` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and sets Java as the only skill."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `edit 2 n/Betsy Crower s/C++ s/HTML` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Edits the name of the 2nd employee to be `Betsy Crower` and sets C++ and HTML as the skills."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-exclamation.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "The index must be a *positive integer* and cannot be larger than the size of the list."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-lightbulb.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "You can remove all the person\u0027s skills by typing `s/` without specifying any skills after it."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d Locating employees, projects or skills by name: `find`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d Find employees in the application: `find employee`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Finds employees whose names contain any of the given keywords."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "Format: `find employee KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `find employee John` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `find employee Betsy Tim John` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "Returns any employee having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d Find projects in the application: `find project`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Finds projects whose names contain any of the given keywords."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Format: `find project KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "* `find project Apollo` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Returns a list of projects with names that contain Apollo"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d Find employees with skills: `find skill`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Finds employees with the chosen skill."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Format: `find skill KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-notepadpencil.png[width\u003d\"40\"]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-notepadpencil.png[width\u003d\"40\"]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "* `find skill java` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Returns a list of employees who has java skill."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `find skill java C++`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Returns a list of employees who have either java or C++ or both."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-notepadpencil.png[width\u003d\"40\"]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "image:ug-exclamation.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-lightbulb.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Users can simply use \u0027e\u0027 as an alias for \u0027employee\u0027, \u0027p\u0027 as an alias for \u0027project\u0027, \u0027s\u0027 as an alias for \u0027skills\u0027"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "while keying in a command into the CLI."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d Find Command Usage Scenario"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "For example, to delete Bernice Yu from the employee list, you can follow these steps:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "Step 1: `find employee Bernice` - to narrow down the list to all employees with name containing Bernice"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "image::findEmployeeBernice.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "Step 2: `delete 1` - deletes Bernice Yu who is the 1st employee in the result of the `find employee Bernice` command."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d View the details of employees or projects : `view`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d View details of an employee: `view employee`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Returns a view of details of the chosen employee."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Format: `view employee EMPLOYEE_INDEX`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-notepadpencil.png[width\u003d\"40\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "When viewing the employee, the GitHub page of the employee"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "will also be loaded."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "`list employees` +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "`view employee 3` +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Displays details of the employee at index 3"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d View details of a project: `view project`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Returns the list of milestones and employees in a project."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Format: `view project PROJECT_NAME`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "`view project Apollo` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Displays details (client, deadline, employees, milestones) of project “Apollo”."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-lightbulb.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Users can simply use \u0027e\u0027 as an alias for \u0027employee\u0027 and \u0027p\u0027 as an alias for \u0027project\u0027"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "while keying in a command into the CLI."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d Add an employee or milestone to a project : `addto`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d Add an employee to a project: `addto employee`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Adds an employee to a project."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Format: `addto PROJECT_NAME employee EMPLOYEE_INDEX`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-notepadpencil.png[width\u003d\"40\"]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Adds the employee at the specified `INDEX`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "The index refers to the index number (one-based) shown in the displayed list of employees."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-exclamation.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "The index must be a *positive integer* and cannot be larger than the size of the list."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `list employees` +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "`addto Apollo employee 2` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Adds the 2nd person in the displayed employee list to project \"Apollo\"."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* `find employee John Han` +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "`addto Apollo employee 5` +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Adds the 5th person in the displayed employee list to project \"Apollo\"."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d Add a milestone to a project: `addto milestone`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Adds a milestone to a project."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Format: `addto PROJECT_NAME milestone MS_DETAILS MS_DATE`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-exclamation.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Date must be of the format DD/MM/YYYY"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "`addto Apollo milestone Completed UI for program 23/11/2015` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Milestone added to project \"Apollo\"."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-lightbulb.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Users can simply use \u0027e\u0027 as an alias for \u0027employee\u0027 and \u0027m\u0027 as an alias for \u0027milestone\u0027"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "while keying in a command into the CLI."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d Remove an employee or milestone from a project : `removefrom`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d Remove an employee from a project: `removefrom employee`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Removing an employee from a project."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dehui333"
        },
        "content": "Format: `removefrom PROJECT_NAME employee EMPLOYEE_INDEX`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "dehui333"
        },
        "content": "`view project Apollo` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dehui333"
        },
        "content": "`removefrom Apollo employee 3` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Removes the employee at 3rd position at displayed list of employees from Project Apollo."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d\u003d Remove a milestone from a project: `removefrom milestone`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Removing a milestone from a project."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dehui333"
        },
        "content": "Format: `removefrom PROJECT_NAME milestone MS_INDEX`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "dehui333"
        },
        "content": "`view project Apollo` +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dehui333"
        },
        "content": "`removefrom Apollo milestone 1` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Removes the milestone at 1st position of displayed list of milestone from Project Apollo."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-notepadpencil.png[width\u003d\"40\"]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Removes the employee at the specified `INDEX`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "The index refers to the index number (one-based) shown in the displayed list of employees."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-exclamation.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "The index must be a *positive integer* and cannot be larger than the size of the list."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "image:ug-lightbulb.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Users can simply use \u0027e\u0027 as an alias for \u0027employee\u0027 and \u0027m\u0027 as an alias for \u0027milestone\u0027"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "while keying in a command into the CLI."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d To indicate the project has been completed : `complete`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Indicates that a project is completed."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Format: `complete PROJ_NAME`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "`complete Project Apollo` +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Project Apollo has been finished and delivered to client."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d Sort the projects by name or deadline : `sort`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Returns a sorted list of projects by the sort key value."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Available keys: name, deadline."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Name: returns list in lexicographic order +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Deadline: returns list by earliest deadline first."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Format: `sort KEY_VALUE`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "`sort name` +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "List of project have been sorted by name."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "`sort deadline` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "List of projects have been sorted by deadline with the"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "earliest deadline displayed at the top of the list."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d\u003d Display statistics regarding all the projects : `stats`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Returns the number of completed projects and number of currently ongoing projects."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Format: `stats`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "`stats` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Total number of ongoing projects: 4 +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Total number of completed projects: 9"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "Pocket Project data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ditan96"
        },
        "content": "// skill::dataencryption[]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "\u003d\u003d\u003d Project commands `[coming in v2.0]`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "_{Commands related to managing of project will be added soon.}_"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "*Q*: How do I transfer my data to another Computer?"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "data of your previous Pocket Project folder."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ". `alphanumeric` only contains either digits (0-9) or letters of the English"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "alphabet (A-Z)."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ". `command line interface (cli)` a means of interacting with a computer program where the user issues commands to the"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "program in the form of successive lines of text."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ". `lexicographic` ordering of words based on how it would appear in a dictionary."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ". `milestone` a key event that is completed during the entire timeline"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "of the project."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ". `one-based indexing` way of numbering in which the initial element of a sequence is assigned the index 1."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ". `zero-based indexing` way of numbering in which the initial element of a sequence is assigned the index 0."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "* *Add* `add employee n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [s/Skill]...` +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "e.g. `add employee n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 s/Java s/Python`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "* *Delete* : `delete COMMAND_KEYWORD INDEX` +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "e.g. `delete employee 3` `delete project 1`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "* *List* : `list COMMAND_KEYWORD` +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "e.g. `list employee` `list project`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "* *Edit* : `edit employee INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [s/Skill]...` +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "e.g. `edit employee 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "* *Find* : `find COMMAND_KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "e.g. `find employee Jake` `find project Apollo` `find skill Java`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "* *View* : `view employee EMPLOYEE_INDEX` , `view project PROJECT_NAME` +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "e.g. `view employee 3` `view project Apollo`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "* *Addto*: `addto PROJECT_NAME employee EMPLOYEE_INDEX` ,`addto PROJECT_NAME milestone MS_DETAILS MS_DATE` +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "e.g. `addto Apollo employee 2` `addto Apollo milestone Completed UI for program 23/11/2015`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "* *Removefrom*: `removefrom PROJECT_NAME employee EMPLOYEE_INDEX` `removefrom PROJECT_NAME milestone MS_INDEX` +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "e.g. `removefrom Apollo employee 1` `removefrom Apollo milestone 1`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "* *Complete* : `complete PROJECT_NAME` +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "e.g. `complete Apollo`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "* *Sort*: `sort COMMAND_KEYWORD` +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "e.g. `sort name` `sort deadline`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "* *Stats*: `stat`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "* *Exit*:  `exit`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "jeffgan96": 2,
      "dehui333": 14,
      "-": 156,
      "shunnizuka": 36,
      "jothipillay": 291
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.storage.JsonPocketProjectStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.storage.PocketProjectStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PocketProject ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        PocketProjectStorage pocketProjectStorage \u003d new JsonPocketProjectStorage(userPrefs.getPocketProjectFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        storage \u003d new StorageManager(pocketProjectStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Optional\u003cReadOnlyPocketProject\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ReadOnlyPocketProject initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            addressBookOptional \u003d storage.readPocketProject();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample PocketProject\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSamplePocketProject);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty PocketProject\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            initialData \u003d new PocketProject();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PocketProject\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            initialData \u003d new PocketProject();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PocketProject\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        logger.info(\"Starting PocketProject \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 18,
      "-": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final String MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX \u003d \"The employee index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX \u003d \"The project index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public static final String MESSAGE_EMPLOYEES_LISTED_OVERVIEW \u003d \"%1$d employees listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public static final String MESSAGE_PROJECTS_LISTED_OVERVIEW \u003d \"%1$d projects listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String MESSAGE_INVALID_PROJECT_NAME \u003d \"The project name provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_INVALID_MILESTONE_DISPLAYED_INDEX \u003d \"The milestone index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "jeffgan96": 1,
      "dehui333": 1,
      "-": 10,
      "shunnizuka": 2,
      "jothipillay": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "shunnizuka": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns the PocketProject."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see seedu.address.model.Model#getPocketProject()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    ReadOnlyPocketProject getPocketProject();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    ObservableList\u003cEmployee\u003e getFilteredEmployeeList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of projects */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    ObservableList\u003cProject\u003e getFilteredProjectList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    Path getPocketProjectFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Selected employee in the filtered employee list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * null if no employee is selected."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see seedu.address.model.Model#selectedEmployeeProperty()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    ReadOnlyProperty\u003cEmployee\u003e selectedEmployeeProperty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Sets the selected employee in the filtered employee list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedEmployee(Employee)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    void setSelectedEmployee(Employee employee);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Selected project in the filtered project list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * null if no project is selected."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * @see seedu.address.model.Model#selectedProjectProperty()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    ReadOnlyProperty\u003cProject\u003e selectedProjectProperty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Sets the selected project in the filtered project list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedProject(Project)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    void setSelectedProject(Project project);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 10,
      "jeffgan96": 13,
      "dehui333": 4,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.logic.parser.PocketProjectParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final PocketProjectParser pocketProjectParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private boolean pocketProjectModified;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProjectParser \u003d new PocketProjectParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // Set pocketProjectModified to true whenever the models\u0027 pocket project is modified."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.getPocketProject().addListener(observable -\u003e pocketProjectModified \u003d true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProjectModified \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            Command command \u003d pocketProjectParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        if (pocketProjectModified) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            logger.info(\"Pocket project modified, saving to file.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                storage.savePocketProject(model.getPocketProject());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public ReadOnlyPocketProject getPocketProject() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return model.getPocketProject();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public ObservableList\u003cEmployee\u003e getFilteredEmployeeList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return model.getFilteredEmployeeList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return model.getFilteredProjectList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public Path getPocketProjectFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return model.getPocketProjectFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public ReadOnlyProperty\u003cEmployee\u003e selectedEmployeeProperty() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return model.selectedEmployeeProperty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setSelectedEmployee(Employee employee) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.setSelectedEmployee(employee);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ReadOnlyProperty\u003cProject\u003e selectedProjectProperty() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return model.selectedProjectProperty();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void setSelectedProject(Project project) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        model.setSelectedProject(project);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 22,
      "jeffgan96": 7,
      "dehui333": 4,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Represents an add command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" employee/project \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \": Adds the employee/project identified by the index number/project name used in\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \" the displayed employee/project list.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + AddEmployeeCommand.MESSAGE_USAGE + \"\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + AddProjectCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "jothipillay": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEmployeeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Adds an employee to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class AddEmployeeCommand extends AddCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String ADD_EMPLOYEE_KEYWORD \u003d \"employee\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" employee\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \": Adds an employee to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + \"[\" + PREFIX_SKILL + \"SKILL]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" employee \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + PREFIX_SKILL + \"Java \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + PREFIX_SKILL + \"UI\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_ADD_EMPLOYEE_SUCCESS \u003d \"New employee added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EMPLOYEE \u003d \"This employee already exists in the pocket project\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private final Employee toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Employee}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public AddEmployeeCommand(Employee employee) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireNonNull(employee);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        toAdd \u003d employee;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if (model.hasEmployee(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        model.addEmployee(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.commitPocketProject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_EMPLOYEE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                || (other instanceof AddEmployeeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEmployeeCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ditan96": 6,
      "jothipillay": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEmployeeToCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " *  Adds an employee input by the user into the employee list associated with each project."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class AddEmployeeToCommand extends AddToCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String ADD_EMPLOYEE_KEYWORD \u003d \"employee\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" PROJECT_NAME employee\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \": adds the employee by the index number used in\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \"  the displayed employee list into the respective list stored under the stated project.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Apollo employee 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_ADDTOPROJECT_EMPLOYEE_SUCCESS \u003d \"Added Employee: %1$s from %2$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJ_EMPLOYEE \u003d \"This employee already exists in the PocketProject.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private final ProjectName targetProjectName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public AddEmployeeToCommand(Index targetIndex, ProjectName targetProjectName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        this.targetProjectName \u003d targetProjectName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        List\u003cEmployee\u003e lastShownList \u003d model.getFilteredEmployeeList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Employee employeeToAdd \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Project targetProject \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        List\u003cProject\u003e projectList \u003d model.getProjectList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        for (Project p: projectList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            if (p.hasProjectName(targetProjectName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                targetProject \u003d p;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if (targetProject \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        ObservableList\u003cEmployee\u003e targetList \u003d targetProject.getEmployees();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if (targetList.contains(employeeToAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PROJ_EMPLOYEE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        targetProject.addEmployee(employeeToAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.commitPocketProject();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADDTOPROJECT_EMPLOYEE_SUCCESS, employeeToAdd,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            targetProject.getProjectName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                || (other instanceof AddEmployeeToCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((AddEmployeeToCommand) other).targetIndex)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                \u0026\u0026 targetProjectName.equals(((AddEmployeeToCommand) other).targetProjectName)); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "jothipillay": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddMilestoneToCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Adds a milestone to a project in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class AddMilestoneToCommand extends AddToCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String ADD_MILESTONE_KEYWORD \u003d \"milestone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" PROJECT_NAME milestone\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \": add the specified milestone to the list of milestones in project.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Apollo milestone Finished UserGuide 23/04/2019\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_ADD_MILESTONE_SUCCESS \u003d \"Added milestone: %1$s from %2$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MILESTONE \u003d \"This milestone already exists in the PocketProject.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private final ProjectName targetProjectName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private final Milestone milestoneToAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public AddMilestoneToCommand(ProjectName targetProject, Milestone milestone) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireNonNull(milestone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        this.milestoneToAdd \u003d milestone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        this.targetProjectName \u003d targetProject;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Project targetProject \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        List\u003cProject\u003e projectList \u003d model.getProjectList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        for (Project p: projectList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            if (p.hasProjectName(targetProjectName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                targetProject \u003d p;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if (targetProject \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_NAME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        List\u003cMilestone\u003e milestoneList \u003d targetProject.getMilestones();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if (milestoneList.contains(milestoneToAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MILESTONE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        targetProject.addMilestone(milestoneToAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.commitPocketProject();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_MILESTONE_SUCCESS, milestoneToAdd,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            targetProject.getProjectName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                || (other instanceof AddMilestoneToCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                \u0026\u0026 targetProjectName.equals(((AddMilestoneToCommand) other).targetProjectName))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                \u0026\u0026 milestoneToAdd.equals(((AddMilestoneToCommand) other).milestoneToAdd); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "jothipillay": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddProjectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Adds a project to the list of projects in the Pocket Project application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class AddProjectCommand extends AddCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String ADD_PROJECT_KEYWORD \u003d \"project\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" project\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \": Adds the project identified by the name of the project.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PREFIX_CLIENT + \"CLIENT \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PREFIX_DEADLINE + \"DEADLINE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" project\" + \" Apollo\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PREFIX_CLIENT + \"SymbCorp \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PREFIX_DEADLINE + \"23/11/2020 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_ADD_PROJECT_SUCCESS \u003d \"Added Project: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"This project already exists in the pocket project\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private final Project toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Employee}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public AddProjectCommand(Project project) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        toAdd \u003d project;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if (model.hasProject(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        model.addProject(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.commitPocketProject();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_PROJECT_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                || (other instanceof AddProjectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddProjectCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "jothipillay": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddToCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Represents a AddTo command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public abstract class AddToCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addto\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" PROJECT_NAME employee/milestone\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \": adds the employee/milestone into the respective lists stored under the stated project.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + AddEmployeeToCommand.MESSAGE_USAGE + \"\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + AddMilestoneToCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jothipillay": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.setPocketProject(new PocketProject());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.commitPocketProject();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 3,
      "-": 22,
      "jothipillay": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return this.feedbackToUser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 4,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Represents a delete command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" employee/project\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \": Deletes the employee/project identified by the index number/project name used in\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \" the displayed employee/project list.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + DeleteEmployeeCommand.MESSAGE_USAGE + \"\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + DeleteProjectCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 7,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteEmployeeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Deletes a employee identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class DeleteEmployeeCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String DELETE_EMPLOYEE_KEYWORD \u003d \"employee\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" employee\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \": Deletes the employee identified by the index number used in the displayed employee list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String MESSAGE_DELETE_EMPLOYEE_SUCCESS \u003d \"Deleted Employee: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public DeleteEmployeeCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        List\u003cEmployee\u003e lastShownList \u003d model.getFilteredEmployeeList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Employee employeeToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        model.deleteEmployee(employeeToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.commitPocketProject();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, employeeToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                || (other instanceof DeleteEmployeeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteEmployeeCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "dehui333": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteProjectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Deletes a employee identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class DeleteProjectCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String DELETE_PROJECT_KEYWORD \u003d \"project\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" project\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \": Deletes the project identified by the name or index(must be positive integer) of the project.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \"Parameters: PROJECT_NAME/PROJECT_INDEX\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" project\" + \" Apollo\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" project\" + \" 1\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String MESSAGE_DELETE_PROJECT_SUCCESS \u003d \"Deleted Project: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final ProjectName projectName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public DeleteProjectCommand(ProjectName targetName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.projectName \u003d targetName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.targetIndex \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public DeleteProjectCommand(Index index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.projectName \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        ProjectName targetName \u003d this.projectName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (targetName \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            targetName \u003d lastShownList.get(targetIndex.getZeroBased()).getProjectName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        List\u003cProject\u003e projectList \u003d model.getProjectList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Project projectToDelete \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Project p: projectList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            if (p.hasProjectName(targetName)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                projectToDelete \u003d p;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                model.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                model.commitPocketProject();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (!found) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_NAME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PROJECT_SUCCESS, projectToDelete));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (projectName !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                    || (other instanceof DeleteProjectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                    \u0026\u0026 projectName.equals(((DeleteProjectCommand) other).projectName));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                    || (other instanceof DeleteProjectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                    \u0026\u0026 targetIndex.equals(((DeleteProjectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "dehui333": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EMPLOYEES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Edits the details of an existing employee in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the employee identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \"by the index number used in the displayed employee list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + \"[\" + PREFIX_SKILL + \"SKILL]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final String MESSAGE_EDIT_EMPLOYEE_SUCCESS \u003d \"Edited Employee: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EMPLOYEE \u003d \"This employee already exists in the address book.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final EditEmployeeDescriptor editEmployeeDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * @param index of the employee in the filtered employee list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @param editEmployeeDescriptor details to edit the employee with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EditCommand(Index index, EditEmployeeDescriptor editEmployeeDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        requireNonNull(editEmployeeDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        this.editEmployeeDescriptor \u003d new EditEmployeeDescriptor(editEmployeeDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        List\u003cEmployee\u003e lastShownList \u003d model.getFilteredEmployeeList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Employee employeeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee editedEmployee \u003d createEditedEmployee(employeeToEdit, editEmployeeDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        if (!employeeToEdit.isSameEmployee(editedEmployee) \u0026\u0026 model.hasEmployee(editedEmployee)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.setEmployee(employeeToEdit, editedEmployee);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.commitPocketProject();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EMPLOYEE_SUCCESS, editedEmployee));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Creates and returns a {@code Employee} with the details of {@code employeeToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * edited with {@code editEmployeeDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static Employee createEditedEmployee(Employee employeeToEdit,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                                                        EditEmployeeDescriptor editEmployeeDescriptor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assert employeeToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Name updatedName \u003d editEmployeeDescriptor.getName().orElse(employeeToEdit.getName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Phone updatedPhone \u003d editEmployeeDescriptor.getPhone().orElse(employeeToEdit.getPhone());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Email updatedEmail \u003d editEmployeeDescriptor.getEmail().orElse(employeeToEdit.getEmail());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Address updatedAddress \u003d editEmployeeDescriptor.getAddress().orElse(employeeToEdit.getAddress());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Set\u003cSkill\u003e updatedSkills \u003d editEmployeeDescriptor.getSkills().orElse(employeeToEdit.getSkills());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return new Employee(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedSkills);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                \u0026\u0026 editEmployeeDescriptor.equals(e.editEmployeeDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Stores the details to edit the employee with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * corresponding field value of the employee."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static class EditEmployeeDescriptor {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        private Set\u003cSkill\u003e skills;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public EditEmployeeDescriptor() {}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ditan96"
        },
        "content": "         * A defensive copy of {@code skills} is used internally."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public EditEmployeeDescriptor(EditEmployeeDescriptor toCopy) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            setSkills(toCopy.skills);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, skills);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ditan96"
        },
        "content": "         * Sets {@code skills} to this object\u0027s {@code skills}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ditan96"
        },
        "content": "         * A defensive copy of {@code skills} is used internally."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void setSkills(Set\u003cSkill\u003e skills) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            this.skills \u003d (skills !\u003d null) ? new HashSet\u003c\u003e(skills) : null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ditan96"
        },
        "content": "         * Returns an unmodifiable skill set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ditan96"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code skills} is null."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public Optional\u003cSet\u003cSkill\u003e\u003e getSkills() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            return (skills !\u003d null) ? Optional.of(Collections.unmodifiableSet(skills)) : Optional.empty();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            if (!(other instanceof EditEmployeeDescriptor)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            EditEmployeeDescriptor e \u003d (EditEmployeeDescriptor) other;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                    \u0026\u0026 getSkills().equals(e.getSkills());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 48,
      "jeffgan96": 14,
      "-": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " * Represent a find command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "public abstract class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" employee/project/skill\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        + \": Finds all employees/project/skill which contain \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        + \"the specified arguments (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        + \"Parameters: ARGUMENTS \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        + FindEmployeeCommand.MESSAGE_USAGE + \"\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        + FindProjectCommand.MESSAGE_USAGE + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        + FindSkillCommand.MESSAGE_USAGE + \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "shunnizuka": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindEmployeeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.employee.EmployeeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " * Finds and lists all employees in PocketProject whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "public class FindEmployeeCommand extends FindCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public static final String FIND_EMPLOYEE_KEYWORD \u003d \"employee\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d FindCommand.COMMAND_WORD + \" \" + FIND_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        + \" [ARGUMENTS]\" + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        + \": Find all employees with names containing [ARGUMENTS]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private final EmployeeNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public FindEmployeeCommand(EmployeeNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.updateFilteredEmployeeList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            String.format(Messages.MESSAGE_EMPLOYEES_LISTED_OVERVIEW, model.getFilteredEmployeeList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            || (other instanceof FindEmployeeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindEmployeeCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 3,
      "-": 28,
      "shunnizuka": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindProjectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.project.ProjectNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " * Finds and lists all projects in PocketProject whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "public class FindProjectCommand extends FindCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public static final String FIND_PROJECT_KEYWORD \u003d \"project\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d FindCommand.COMMAND_WORD + \" \" + FIND_PROJECT_KEYWORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        + \" [ARGUMENTS]\" + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        + \": Find all projects with names containing [ARGUMENTS]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private final ProjectNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public FindProjectCommand(ProjectNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        model.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            String.format(Messages.MESSAGE_PROJECTS_LISTED_OVERVIEW, model.getFilteredProjectList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            || (other instanceof FindProjectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindProjectCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "shunnizuka": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindSkillCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.skill.EmployeeSkillContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " * Finds and lists all persons in address book whose skills match any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "public class FindSkillCommand extends FindCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public static final String FIND_SKILL_KEYWORD \u003d \"skill\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d FindCommand.COMMAND_WORD + \" \" + FIND_SKILL_KEYWORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        + \" [ARGUMENTS]\" + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        + \": Find all employees with skills containing [ARGUMENTS]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private final EmployeeSkillContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public FindSkillCommand(EmployeeSkillContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        model.updateFilteredEmployeeList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            String.format(Messages.MESSAGE_EMPLOYEES_LISTED_OVERVIEW, model.getFilteredEmployeeList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            || (other instanceof FindSkillCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindSkillCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "shunnizuka": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * An abstract class to generalise all types of list commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Note that the {@code execute} command is not defined here so any classes inheriting from this has to implement it"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ListEmployeeCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + ListProjectCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 6,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListEmployeeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EMPLOYEES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Lists all employees in the employees list to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ListEmployeeCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String LIST_EMPLOYEE_KEYWORD \u003d \"employee\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all employees\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ListCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + LIST_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \": Lists all employees registered in Pocket Project\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                || (other instanceof ListEmployeeCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 2,
      "jeffgan96": 15,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListProjectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Lists all projects in the projects list to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ListProjectCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String LIST_PROJECT_KEYWORD \u003d \"project\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all projects\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ListCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + LIST_PROJECT_KEYWORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \": Lists all projects registered in Pocket Project\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                || (other instanceof ListProjectCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EMPLOYEES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        if (!model.canRedoPocketProject()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.redoPocketProject();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveEmployeeFromCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Removes an employee identified using it\u0027s displayed index from a project in the Pocket Project."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class RemoveEmployeeFromCommand extends RemoveFromCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String REMOVE_EMPLOYEE_KEYWORD \u003d \"employee\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" PROJECT_NAME employee\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \": removes the employee identified by the index number\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \" used in the displayed employee list from the project.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Apollo employee 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String MESSAGE_REMOVE_EMPLOYEE_SUCCESS \u003d \"Removed Employee: %1$s from %2$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final ProjectName targetProjectName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public RemoveEmployeeFromCommand(Index targetIndex, ProjectName targetProjectName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.targetProjectName \u003d targetProjectName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Project targetProject \u003d model.getProjectWithName(targetProjectName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (targetProject \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_NAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        ObservableList\u003cEmployee\u003e targetList \u003d targetProject.getEmployees();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d targetList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Employee targetEmployee \u003d targetList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        model.removeEmployeeFrom(targetProject, targetEmployee);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.commitPocketProject();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_EMPLOYEE_SUCCESS, targetEmployee,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                targetProject.getProjectName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                || (other instanceof RemoveEmployeeFromCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RemoveEmployeeFromCommand) other).targetIndex)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                \u0026\u0026 targetProjectName.equals(((RemoveEmployeeFromCommand) other).targetProjectName)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "dehui333": 61,
      "jothipillay": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveFromCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Represents a RemoveFrom command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public abstract class RemoveFromCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removefrom\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" PROJECT_NAME employee/milestone\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \": removes the employee/milestone identified by the index number used in\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \" the displayed employee/milestone list.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + RemoveEmployeeFromCommand.MESSAGE_USAGE + \"\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + RemoveMilestoneFromCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveMilestoneFromCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Removes a milestone identified using it\u0027s displayed index from a project in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class RemoveMilestoneFromCommand extends RemoveFromCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String REMOVE_MILESTONE_KEYWORD \u003d \"milestone\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" PROJECT_NAME milestone\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \": removes the milestone identified by the index number\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \" used in the displayed milestone list from the project.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Apollo milestone 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String MESSAGE_REMOVE_MILESTONE_SUCCESS \u003d \"Removed milestone: %1$s from %2$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final ProjectName targetProjectName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public RemoveMilestoneFromCommand(Index targetIndex, ProjectName targetProject) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.targetProjectName \u003d targetProject;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Project targetProject \u003d model.getProjectWithName(targetProjectName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (targetProject \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_NAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        List\u003cMilestone\u003e targetList \u003d targetProject.getMilestones();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d targetList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MILESTONE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Milestone targetMilestone \u003d targetList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        model.removeMilestoneFrom(targetProject, targetMilestone);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.commitPocketProject();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_MILESTONE_SUCCESS, targetMilestone,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                targetProject.getProjectName()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                || (other instanceof RemoveMilestoneFromCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RemoveMilestoneFromCommand) other).targetIndex)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                \u0026\u0026 targetProjectName.equals(((RemoveMilestoneFromCommand) other).targetProjectName)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "dehui333": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EMPLOYEES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        if (!model.canUndoPocketProject()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.undoPocketProject();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * An abstract class to generalise all types of view commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Note that the {@code execute} command is not defined here so any classes inheriting from this has to implement it"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public abstract class ViewCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"view employee/project INDEX\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + ViewEmployeeCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + ViewProjectCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewEmployeeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Selects a employee identified using it\u0027s displayed index from the employee list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ViewEmployeeCommand extends ViewCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String VIEW_EMPLOYEE_KEYWORD \u003d \"employee\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ViewCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + VIEW_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \": Selects the employee identified by the index number used in the displayed employee list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + ViewCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + VIEW_EMPLOYEE_KEYWORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String MESSAGE_VIEW_EMPLOYEE_SUCCESS \u003d \"Viewing employee details at index: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ViewEmployeeCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        List\u003cEmployee\u003e filteredEmployeeList \u003d model.getFilteredEmployeeList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredEmployeeList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.setSelectedEmployee(filteredEmployeeList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_EMPLOYEE_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                || (other instanceof ViewEmployeeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewEmployeeCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 3,
      "jeffgan96": 18,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewProjectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Selects a project identified using it\u0027s displayed index from the projects list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ViewProjectCommand extends ViewCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String VIEW_PROJECT_KEYWORD \u003d \"project\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ViewCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + VIEW_PROJECT_KEYWORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \": Selects the project identified by the index number used in the displayed project list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + ViewCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + VIEW_PROJECT_KEYWORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String MESSAGE_VIEW_PROJECT_SUCCESS \u003d \"Viewing project details at index: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ViewProjectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cProject\u003e filteredProjectList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredProjectList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        model.setSelectedProject(filteredProjectList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_PROJECT_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                || (other instanceof ViewProjectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewProjectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddEmployeeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddProjectCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.employee.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.employee.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.employee.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.employee.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Parses input arguments and creates a new AddEmployeeCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Used for separation of add type word and args."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private static final Pattern ADD_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ckeyword\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddEmployeeCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        final Matcher matcher \u003d ADD_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final String keyword \u003d matcher.group(\"keyword\").toLowerCase();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (keyword.equals(AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD) || keyword.equals(\"e\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                    ArgumentTokenizer.tokenize(arguments, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                    PREFIX_SKILL);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                        AddEmployeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            Set\u003cSkill\u003e skillList \u003d ParserUtil.parseSkills(argMultimap.getAllValues(PREFIX_SKILL));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            Employee employee \u003d new Employee(name, phone, email, address, skillList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            return new AddEmployeeCommand(employee);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        } else if (keyword.equals(AddProjectCommand.ADD_PROJECT_KEYWORD) || keyword.equals(\"p\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                    ArgumentTokenizer.tokenize(arguments, PREFIX_NAME, PREFIX_CLIENT, PREFIX_DEADLINE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_CLIENT, PREFIX_DEADLINE)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                    AddProjectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            ProjectName projectName \u003d ParserUtil.parseProjectName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            Client client \u003d ParserUtil.parseClient(argMultimap.getValue(PREFIX_CLIENT).get());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            Deadline deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            Project project \u003d new Project(projectName, client, deadline);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            return new AddProjectCommand(project);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new ParseException (String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 5,
      "dehui333": 3,
      "-": 39,
      "jothipillay": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddToCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddEmployeeToCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddMilestoneToCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddToCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Parses input arguments and creates a new AddToCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class AddToCommandParser implements Parser\u003cAddToCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Used for separation of type keyword and args."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private static final Pattern ADD_TO_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003cproject\u003e(\\\\S+\\\\s)+)\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \"(?\u003ckeyword\u003eemployee\\\\s|milestone\\\\s)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddToCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * and returns an AddToCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public AddToCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        final Matcher matcher \u003d ADD_TO_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        final ProjectName projectName \u003d new ProjectName(matcher.group(\"project\").trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final String keyword \u003d matcher.group(\"keyword\").trim().toLowerCase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (keyword.equals(AddEmployeeToCommand.ADD_EMPLOYEE_KEYWORD) || keyword.equals(\"e\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(arguments.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                return new AddEmployeeToCommand(index, projectName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEmployeeToCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        } else if (keyword.equals(AddMilestoneToCommand.ADD_MILESTONE_KEYWORD) || keyword.equals(\"m\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                Milestone milestone \u003d ParserUtil.parseMilestone(arguments.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                return new AddMilestoneToCommand(projectName, milestone);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMilestoneToCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new ParseException ("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 3,
      "jothipillay": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final Prefix PREFIX_SKILL \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final Prefix PREFIX_CLIENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "-": 13,
      "jothipillay": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.DeleteEmployeeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.DeleteProjectCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Used for separation of delete type word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private static final Pattern DELETE_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ckeyword\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private static final String INTEGER_STRING_FORMAT \u003d \"(-?)[0-9]+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final Matcher matcher \u003d DELETE_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final String keyword \u003d matcher.group(\"keyword\").toLowerCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (keyword.equals(DeleteEmployeeCommand.DELETE_EMPLOYEE_KEYWORD) || keyword.equals(\"e\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(arguments.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                return new DeleteEmployeeCommand(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEmployeeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        } else if (keyword.equals(DeleteProjectCommand.DELETE_PROJECT_KEYWORD) || keyword.equals(\"p\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            String argument \u003d arguments.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            if (argument.matches(INTEGER_STRING_FORMAT)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                    Index index \u003d ParserUtil.parseIndex(argument);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                    return new DeleteProjectCommand(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                } catch (ParseException pe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                            DeleteProjectCommand.MESSAGE_USAGE, pe));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                return new DeleteProjectCommand(new ProjectName(argument));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new ParseException ("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 42,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEmployeeDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_SKILL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditEmployeeDescriptor editEmployeeDescriptor \u003d new EditEmployeeDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            editEmployeeDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            editEmployeeDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            editEmployeeDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            editEmployeeDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        parseSkillsForEdit(argMultimap.getAllValues(PREFIX_SKILL)).ifPresent(editEmployeeDescriptor::setSkills);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        if (!editEmployeeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return new EditCommand(index, editEmployeeDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e skills} into a {@code Set\u003cSkill\u003e} if {@code skills} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * If {@code skills} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code Set\u003cSkill\u003e} containing zero skills."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Optional\u003cSet\u003cSkill\u003e\u003e parseSkillsForEdit(Collection\u003cString\u003e skills) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assert skills !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        if (skills.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Collection\u003cString\u003e skillSet \u003d skills.size() \u003d\u003d 1 \u0026\u0026 skills.contains(\"\") ? Collections.emptySet() : skills;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return Optional.of(ParserUtil.parseSkills(skillSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 20,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.FindEmployeeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.FindProjectCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.FindSkillCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.employee.EmployeeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.project.ProjectNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.skill.EmployeeSkillContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " * Parses input arguments and creates a new FindEmployeeCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private static final Pattern FIND_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ckeyword\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindEmployeeCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * and returns an FindEmployeeCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        final Matcher matcher \u003d FIND_COMMAND_FORMAT.matcher(trimmedArgs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final String keyword \u003d matcher.group(\"keyword\").toLowerCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        String[] nameKeywords \u003d arguments.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (keyword.equals(FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD) || keyword.equals(\"e\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            return new FindEmployeeCommand(new EmployeeNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        } else if (keyword.equals(FindProjectCommand.FIND_PROJECT_KEYWORD) || keyword.equals(\"p\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            return new FindProjectCommand(new ProjectNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        } else if (keyword.equals(FindSkillCommand.FIND_SKILL_KEYWORD) || keyword.equals(\"s\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            return new FindSkillCommand(new EmployeeSkillContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEmployeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 7,
      "-": 26,
      "shunnizuka": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ListEmployeeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ListProjectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private static final Pattern LIST_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ckeyword\u003e\\\\S+)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        final Matcher matcher \u003d LIST_COMMAND_FORMAT.matcher(trimmedArgs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final String keyword \u003d matcher.group(\"keyword\").toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (keyword.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (keyword.equals(ListEmployeeCommand.LIST_EMPLOYEE_KEYWORD) || keyword.equals(\"e\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            return new ListEmployeeCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        } else if (keyword.equals(ListProjectCommand.LIST_PROJECT_KEYWORD) || keyword.equals(\"p\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            return new ListProjectCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 43,
      "dehui333": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddMilestoneToCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Client;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Parses a {@code String event} into a {@code Milestone}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed and event split into"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * description and date to check for validity"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @throws ParseException if the given {@code event} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static Milestone parseMilestone(String event) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String trimmedMilestone \u003d event.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        int position \u003d trimmedMilestone.lastIndexOf(\" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if ((position \u003e trimmedMilestone.length()) || (position \u003c 0)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                AddMilestoneToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String milestoneDesc \u003d trimmedMilestone.substring(0, position);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String date \u003d trimmedMilestone.substring(position + 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if (!Milestone.isValidMilestone(milestoneDesc.trim(), date.trim())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new ParseException(Milestone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return new Milestone(milestoneDesc, date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Parses a {@code String skill} into a {@code Skill}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @throws ParseException if the given {@code skill} is invalid."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static Skill parseSkill(String skill) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        requireNonNull(skill);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        String trimmedSkill \u003d skill.trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        if (!Skill.isValidSkillName(trimmedSkill)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            throw new ParseException(Skill.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return new Skill(trimmedSkill);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e skills} into a {@code Set\u003cSkill\u003e}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static Set\u003cSkill\u003e parseSkills(Collection\u003cString\u003e skills) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        requireNonNull(skills);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        final Set\u003cSkill\u003e skillSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        for (String skillName : skills) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            skillSet.add(parseSkill(skillName));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return skillSet;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Parses a {@code String name} into a {@code Client}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @throws ParseException if the given {@code client} is invalid."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static Client parseClient(String client) throws ParseException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String trimmedClient \u003d client.trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if (!Client.isValidName(trimmedClient)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new ParseException(Client.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return new Client(trimmedClient);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Parses a {@code String name} into a {@code Deadline}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @throws ParseException if the given {@code deadline} is invalid."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static Deadline parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String trimmedDate \u003d deadline.trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if (!Deadline.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return new Deadline(trimmedDate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Parses a {@code String name} into a {@code Project Name}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @throws ParseException if the given {@code project name} is invalid."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static ProjectName parseProjectName(String name) throws ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if (!ProjectName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new ParseException(ProjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return new ProjectName(trimmedName);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 16,
      "jeffgan96": 4,
      "-": 114,
      "jothipillay": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PocketProjectParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddToCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "//import seedu.address.logic.commands.FindEmployeeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.RemoveFromCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class PocketProjectParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        case AddToCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            return new AddToCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        case RemoveFromCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            return new RemoveFromCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "jeffgan96": 19,
      "dehui333": 2,
      "-": 75,
      "shunnizuka": 1,
      "jothipillay": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemoveFromCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.RemoveEmployeeFromCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.RemoveFromCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.RemoveMilestoneFromCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Parses input arguments and creates a new RemoveFromCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class RemoveFromCommandParser implements Parser\u003cRemoveFromCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Used for separation of type keyword and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private static final Pattern REMOVE_FROM_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003cproject\u003e(\\\\S+\\\\s)+)\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        + \"(?\u003ckeyword\u003eemployee\\\\s|milestone\\\\s)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveFromCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * and returns an RemoveFromCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public RemoveFromCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final Matcher matcher \u003d REMOVE_FROM_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveFromCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final ProjectName projectName \u003d new ProjectName(matcher.group(\"project\").trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final String keyword \u003d matcher.group(\"keyword\").trim().toLowerCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (keyword.equals(RemoveEmployeeFromCommand.REMOVE_EMPLOYEE_KEYWORD) || keyword.equals(\"e\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(arguments.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                return new RemoveEmployeeFromCommand(index, projectName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveEmployeeFromCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        } else if (keyword.equals(RemoveMilestoneFromCommand.REMOVE_MILESTONE_KEYWORD) || keyword.equals(\"m\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(arguments.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                return new RemoveMilestoneFromCommand(index, projectName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveMilestoneFromCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new ParseException ("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveFromCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewEmployeeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewProjectCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Parses input arguments and creates a new ViewEmployeeCommand object or a ViewProjectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Used for separation of view type word and args."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final Pattern VIEW_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ckeyword\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * and returns an ViewCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        final Matcher matcher \u003d VIEW_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final String keyword \u003d matcher.group(\"keyword\").toLowerCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (keyword.equals(ViewEmployeeCommand.VIEW_EMPLOYEE_KEYWORD) || keyword.equals(\"e\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(arguments.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                return new ViewEmployeeCommand(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewEmployeeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        } else if (keyword.equals(ViewProjectCommand.VIEW_PROJECT_KEYWORD) || keyword.equals(\"p\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(arguments.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                return new ViewProjectCommand(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewProjectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new ParseException ("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 59,
      "dehui333": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    Predicate\u003cEmployee\u003e PREDICATE_SHOW_ALL_EMPLOYEES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    Predicate\u003cProject\u003e PREDICATE_SHOW_ALL_PROJECTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns the user prefs\u0027 pocket project file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    Path getPocketProjectFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Sets the user prefs\u0027 pocket project file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    void setPocketProjectFilePath(Path pocketProjectFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Replaces pocket project data with the data in {@code pocketProject}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    void setPocketProject(ReadOnlyPocketProject pocketProject);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    /** Returns the PocketProject */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    ReadOnlyPocketProject getPocketProject();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    //----------------Methods related to employees ----------------------------------------------------------"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns true if a employee with the same identity as {@code employee} exists in the pocket project."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    boolean hasEmployee(Employee employee);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Deletes the given employee."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * The employee must exist in the pocket project."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    void deleteEmployee(Employee target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Adds the given employee."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code employee} must not already exist in the pocket project."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    void addEmployee(Employee employee);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Replaces the given employee {@code target} with {@code editedEmployee}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code target} must exist in the pocket project."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * The employee identity of {@code editedEmployee} must not be the same as another existing employee in the pocket"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * project."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    void setEmployee(Employee target, Employee editedEmployee);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /** Returns an unmodifiable view of the filtered employee list */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    ObservableList\u003cEmployee\u003e getFilteredEmployeeList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Updates the filter of the filtered employee list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    void updateFilteredEmployeeList(Predicate\u003cEmployee\u003e predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Selected employee in the filtered employee list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * null if no employee is selected."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    ReadOnlyProperty\u003cEmployee\u003e selectedEmployeeProperty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns the selected employee in the filtered employee list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * null if no employee is selected."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    Employee getSelectedEmployee();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Sets the selected employee in the filtered employee list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    void setSelectedEmployee(Employee employee);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    //------------- Methods related to projects ----------------------------------------------------------"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns true if a employee with the same identity as {@code employee} exists in the pocket project."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    boolean hasProject(Project employee);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Deletes the given project."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * The project must exist in the projects list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    void deleteProject(Project target);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Adds the given project."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * {@code project} must not already exist in the projects list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    void addProject(Project project);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /** Returns an unmodifiable view of the filtered projects list */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    ObservableList\u003cProject\u003e getFilteredProjectList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Updates the filter of the filtered project list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    void updateFilteredProjectList(Predicate\u003cProject\u003e predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Project} backed by the internal list of"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code versionedPocketProject}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    ObservableList\u003cProject\u003e getProjectList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Selected project in the filtered projects list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * null if no project is selected."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    ReadOnlyProperty\u003cProject\u003e selectedProjectProperty();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns the selected project in the filtered projects list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * null if no project is selected."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    Project getSelectedProject();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Sets the selected project in the filtered projects list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    void setSelectedProject(Project project);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Replaces the given project {@code target} with {@code editedProject}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code target} must exist in the pocket project."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * The project name of {@code editedProject} must not be the same as another existing project in the pocket"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * project."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    void setProject(Project target, Project editedProject);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns the project with the given name if it exists, if not, return null."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    Project getProjectWithName(ProjectName targetProjectName);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Removes the {@code targetEmployee} from the {@code targetProject}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Both {@code targetProject} must exist in the pocket project and {@code targetEmployee} in the employee list of"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * {@code targetProject}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    void removeEmployeeFrom(Project targetProject, Employee targetEmployee);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Removes the {@code targetMilestone} from the {@code targetProject}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Both {@code targetProject} must exist in the pocket project and {@code targetMilestone} in the milestone list of"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * {@code targetProject}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    void removeMilestoneFrom(Project targetProject, Milestone targetMilestone);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Adds the {@code targetEmployee} to the {@code targetProject}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Both {@code targetProject} must exist in the pocket project and {@code targetEmployee} in the employee list"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    void addEmployeeTo(Project targetProject, Employee targetEmployee);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Adds the {@code milestone} to the {@code targetProject}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * {@code targetProject} must exist in the pocket project."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    void addMilestoneTo(Project targetProject, Milestone milestone);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns the list of projects that this employee is working on."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    List\u003cProject\u003e getProjectsContaining(Employee employee);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    //-------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns true if the model has previous pocket project states to restore."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    boolean canUndoPocketProject();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns true if the model has undone pocket project states to restore."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    boolean canRedoPocketProject();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Restores the model\u0027s pocket project to its previous state."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    void undoPocketProject();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Restores the model\u0027s pocket project to its previously undone state."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    void redoPocketProject();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Saves the current pocket project state for undo/redo."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    void commitPocketProject();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 38,
      "jeffgan96": 69,
      "dehui333": 24,
      "-": 103,
      "jothipillay": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.employee.exceptions.EmployeeNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * Represents the in-memory model of the pocket project data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final VersionedPocketProject versionedPocketProject;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private final FilteredList\u003cEmployee\u003e filteredEmployees;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private final FilteredList\u003cProject\u003e filteredProjects;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final SimpleObjectProperty\u003cEmployee\u003e selectedEmployee \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private final SimpleObjectProperty\u003cProject\u003e selectedProject \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Initializes a ModelManager with the given pocketProject and userPrefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public ModelManager(ReadOnlyPocketProject pocketProject, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        requireAllNonNull(pocketProject, userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        logger.fine(\"Initializing with pocket project: \" + pocketProject + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject \u003d new VersionedPocketProject(pocketProject);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        filteredEmployees \u003d new FilteredList\u003c\u003e(versionedPocketProject.getEmployeeList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        filteredEmployees.addListener(this::ensureSelectedEmployeeIsValid);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        filteredProjects \u003d new FilteredList\u003c\u003e(versionedPocketProject.getProjectList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        filteredProjects.addListener(this::ensureSelectedProjectIsValid);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        this(new PocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public Path getPocketProjectFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return userPrefs.getPocketProjectFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setPocketProjectFilePath(Path pocketProjectFilePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        requireNonNull(pocketProjectFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        userPrefs.setPocketProjectFilePath(pocketProjectFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PocketProject \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setPocketProject(ReadOnlyPocketProject pocketProject) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.resetData(pocketProject);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public ReadOnlyPocketProject getPocketProject() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return versionedPocketProject;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public boolean hasEmployee(Employee employee) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        requireNonNull(employee);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return versionedPocketProject.hasEmployee(employee);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return versionedPocketProject.hasProject(project);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void deleteEmployee(Employee target) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.removeEmployee(target);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void deleteProject(Project target) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.removeProject(target);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void addEmployee(Employee employee) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.addEmployee(employee);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void addProject(Project project) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.addProject(project);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployee(Employee target, Employee editedEmployee) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        requireAllNonNull(target, editedEmployee);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.setEmployee(target, editedEmployee);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireAllNonNull(target, editedProject);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.setProject(target, editedProject);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Project getProjectWithName(ProjectName targetProjectName) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Project targetProject \u003d null;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        for (Project p: versionedPocketProject.getProjectList()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            if (p.hasProjectName(targetProjectName)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                targetProject \u003d p;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return targetProject;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void removeEmployeeFrom(Project targetProject, Employee targetEmployee) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.removeEmployeeFrom(targetProject, targetEmployee);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void removeMilestoneFrom(Project targetProject, Milestone targetMilestone) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.removeMilestoneFrom(targetProject, targetMilestone);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void addEmployeeTo(Project targetProject, Employee targetEmployee) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        versionedPocketProject.addEmployeeTo(targetProject, targetEmployee);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void addMilestoneTo(Project targetProject, Milestone milestone) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        versionedPocketProject.addMilestoneTo(targetProject, milestone);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public List\u003cProject\u003e getProjectsContaining(Employee employee) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        List\u003cProject\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Project p: versionedPocketProject.getProjectList()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            if (p.containsEmployee(employee)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                list.add(p);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Employee List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Employee} backed by the internal list of"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code versionedPocketProject}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public ObservableList\u003cEmployee\u003e getFilteredEmployeeList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return filteredEmployees;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void updateFilteredEmployeeList(Predicate\u003cEmployee\u003e predicate) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        filteredEmployees.setPredicate(predicate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Project List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Project} backed by the internal list of"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code versionedPocketProject}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return filteredProjects;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        filteredProjects.setPredicate(predicate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Whole Project List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Project} backed by the internal list of"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code versionedPocketProject}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public ObservableList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return versionedPocketProject.getProjectList();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public boolean canUndoPocketProject() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return versionedPocketProject.canUndo();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public boolean canRedoPocketProject() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return versionedPocketProject.canRedo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void undoPocketProject() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.undo();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void redoPocketProject() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.redo();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void commitPocketProject() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.commit();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected employee \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public ReadOnlyProperty\u003cEmployee\u003e selectedEmployeeProperty() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return selectedEmployee;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public Employee getSelectedEmployee() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return selectedEmployee.getValue();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setSelectedEmployee(Employee employee) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        if (employee !\u003d null \u0026\u0026 !filteredEmployees.contains(employee)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            throw new EmployeeNotFoundException();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        selectedEmployee.setValue(employee);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Ensures {@code selectedEmployee} is a valid employee in {@code filteredEmployees}."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private void ensureSelectedEmployeeIsValid(ListChangeListener.Change\u003c? extends Employee\u003e change) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            if (selectedEmployee.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                // null is always a valid selected employee, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            boolean wasSelectedEmployeeReplaced \u003d change.wasReplaced()"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                    \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedEmployee.getValue());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            if (wasSelectedEmployeeReplaced) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                // Update selectedEmployee to its new value."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedEmployee.getValue());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                selectedEmployee.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            boolean wasSelectedEmployeeRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "                    .anyMatch(removedEmployee -\u003e selectedEmployee.getValue().equals(removedEmployee));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            if (wasSelectedEmployeeRemoved) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                // Select the employee that came before it in the list,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                // or clear the selection if there is no such employee."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                selectedEmployee.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected project \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ReadOnlyProperty\u003cProject\u003e selectedProjectProperty() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return selectedProject;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public Project getSelectedProject() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return selectedProject.getValue();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    //TODO CHANGE THIS"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void setSelectedProject(Project project) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        if (project !\u003d null \u0026\u0026 !filteredProjects.contains(project)) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        selectedProject.setValue(project);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Ensures {@code selectedProject} is a valid project in {@code filteredProject}."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void ensureSelectedProjectIsValid(ListChangeListener.Change\u003c? extends Project\u003e change) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            if (selectedProject.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                // null is always a valid selected project, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            boolean wasSelectedProjectReplaced \u003d change.wasReplaced()"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                    \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedProject.getValue());"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            if (wasSelectedProjectReplaced) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                // Update selectedProject to its new value."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedProject.getValue());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                selectedProject.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            boolean wasSelectedProjectRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                    .anyMatch(removedProject -\u003e selectedProject.getValue().isSameProject(removedProject));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            if (wasSelectedProjectRemoved) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                // Select the project that came before it in the list,"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                // or clear the selection if there is no such project."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                selectedProject.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return versionedPocketProject.equals(other.versionedPocketProject)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                \u0026\u0026 filteredEmployees.equals(other.filteredEmployees)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedEmployee.get(), other.selectedEmployee.get());"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 77,
      "jeffgan96": 68,
      "dehui333": 40,
      "-": 199,
      "shunnizuka": 1,
      "jothipillay": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PocketProject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.employee.UniqueEmployeeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.UniqueProjectList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * Wraps all data at the pocket-project level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * Duplicates are not allowed (by .isSameEmployee comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class PocketProject implements ReadOnlyPocketProject {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final UniqueEmployeeList employees;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final UniqueProjectList projects;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        employees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        projects \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public PocketProject() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Creates an PocketProject using the Employees in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public PocketProject(ReadOnlyPocketProject toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Replaces the contents of the employee list with {@code employees}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * {@code employees} must not contain duplicate employees."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployees(List\u003cEmployee\u003e employees) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        this.employees.setEmployees(employees);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Replaces the contents of the project list with {@code projects}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * {@code projects} must not contain duplicate projects."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void setProjects(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.projects.setProjects(projects);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Resets the existing data of this {@code PocketProject} with {@code newData}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void resetData(ReadOnlyPocketProject newData) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        List\u003cEmployee\u003e employeeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        List\u003cProject\u003e projectList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Employee e: newData.getEmployeeList()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            employeeList.add(e.clone());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Project p: newData.getProjectList()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            projectList.add(p.clone());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        setEmployees(employeeList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        setProjects(projectList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    //// employee-level and project-level operations"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns true if a employee with the same identity as {@code employee} exists in the pocket project."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public boolean hasEmployee(Employee employee) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        requireNonNull(employee);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return employees.contains(employee);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns true if a project with the same name as {@code project} exists in the pocket project."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return projects.contains(project);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Adds a employee to the pocket project."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * The employee must not already exist in the pocket project."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void addEmployee(Employee p) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        employees.add(p);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Adds a project to the pocket project."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * The project must not already exist in the pocket project."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void addProject(Project p) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        projects.add(p);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Replaces the given employee {@code target} in the list with {@code editedEmployee}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * {@code target} must exist in the employee list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * The employee identity of {@code editedEmployee} must not be the same as another existing employee in the pocket"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * project."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployee(Employee target, Employee editedEmployee) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        requireNonNull(editedEmployee);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        employees.setEmployee(target, editedEmployee);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        for (Project p: projects) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            if (p.containsEmployee(target)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "                p.setEmployee(target, editedEmployee);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Replaces the given project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code target} must exist in the pocket project."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * The project name of {@code editedProject} must not be the same as another existing project in the pocket"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * project."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireNonNull(editedProject);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        projects.setProject(target, editedProject);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Removes {@code employee} from this {@code PocketProject}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Will also remove from current projects that the {@code employee} is working on."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * {@code employee} must exist in the pocket project."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void removeEmployee(Employee employee) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        employees.remove(employee);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Project p: projects) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            if (p.containsEmployee(employee)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                p.removeEmployee(employee);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Removes {@code project} from this {@code PocketProject}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code project} must exist in the pocket project."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void removeProject(Project project) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        projects.remove(project);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Removes {@code targetEmployee} from the {@code targetProject} from this {@code PocketProject}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     *  {@code targetProject} and {@code targetEmployee} must exist."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void removeEmployeeFrom(Project targetProject, Employee targetEmployee) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        projects.removeEmployeeFrom(targetProject, targetEmployee);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Removes {@code targetMilestone} from the {@code targetProject} from this {@code PocketProject}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     *  {@code targetProject} and {@code targetMilestone} must exist."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void removeMilestoneFrom(Project targetProject, Milestone targetMilestone) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        projects.removeMilestoneFrom(targetProject, targetMilestone);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Removes {@code targetEmployee} from the {@code targetProject} from this {@code AddressBook}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     *  {@code targetProject} and {@code targetEmployee} must exist."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void addEmployeeTo(Project targetProject, Employee targetEmployee) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        projects.addEmployeeTo(targetProject, targetEmployee);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Removes {@code targetMilestone} from the {@code targetProject} from this {@code AddressBook}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     *  {@code targetProject} and {@code targetMilestone} must exist."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void addMilestoneTo(Project targetProject, Milestone targetMilestone) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        projects.addMilestoneTo(targetProject, targetMilestone);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Notifies listeners that the pocket project has been modified."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        builder.append(\"employees:\\n\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Employee e: employees) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            builder.append(e);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        builder.append(\"projects:\\n\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Project p: projects) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            builder.append(p);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public ObservableList\u003cEmployee\u003e getEmployeeList() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return employees.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public ObservableList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return projects.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            || (other instanceof PocketProject // instanceof handles nulls"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            \u0026\u0026 employees.equals(((PocketProject) other).employees)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            \u0026\u0026 projects.equals(((PocketProject) other).projects));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Object[] array \u003d {this.projects, this.employees};"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return Arrays.hashCode(array);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 40,
      "jeffgan96": 7,
      "dehui333": 107,
      "-": 100,
      "shunnizuka": 6,
      "jothipillay": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPocketProject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * Unmodifiable view of an pocket project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public interface ReadOnlyPocketProject extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    ObservableList\u003cEmployee\u003e getEmployeeList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns an unmodifiable view of the projects list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * This list will not contain any duplicate projects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    ObservableList\u003cProject\u003e getProjectList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 3,
      "jeffgan96": 1,
      "dehui333": 7,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    Path getPocketProjectFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Path pocketProjectFilePath \u003d Paths.get(\"data\" , \"pocketproject.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        setPocketProjectFilePath(newUserPrefs.getPocketProjectFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public Path getPocketProjectFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return pocketProjectFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setPocketProjectFilePath(Path pocketProjectFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        requireNonNull(pocketProjectFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        this.pocketProjectFilePath \u003d pocketProjectFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                \u0026\u0026 pocketProjectFilePath.equals(o.pocketProjectFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return Objects.hash(guiSettings, pocketProjectFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + pocketProjectFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedPocketProject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * {@code PocketProject} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class VersionedPocketProject extends PocketProject {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final List\u003cReadOnlyPocketProject\u003e pocketProjectStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public VersionedPocketProject(ReadOnlyPocketProject initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProjectStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProjectStateList.add(new PocketProject(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Saves a copy of the current {@code PocketProject} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProjectStateList.add(new PocketProject(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProjectStateList.subList(currentStatePointer + 1, pocketProjectStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Restores the pocket project to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        resetData(pocketProjectStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Restores the pocket project to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        resetData(pocketProjectStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns true if {@code undo()} has pocket project states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns true if {@code redo()} has pocket project states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return currentStatePointer \u003c pocketProjectStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        if (!(other instanceof VersionedPocketProject)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject otherVersionedPocketProject \u003d (VersionedPocketProject) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return super.equals(otherVersionedPocketProject)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                \u0026\u0026 pocketProjectStateList.equals(otherVersionedPocketProject.pocketProjectStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedPocketProject.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            super(\"Current state pointer at start of pocketProjectState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            super(\"Current state pointer at end of pocketProjectState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 23,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Represents a Employee\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns a clone of this Address Object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Address clone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new Address(this.value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 2,
      "dehui333": 7,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Represents a Employee\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns a clone of this Email object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Email clone() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new Email(this.value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 2,
      "dehui333": 7,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/Employee.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Represents a Employee in the pocket project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class Employee {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final Set\u003cSkill\u003e skills \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public Employee(Name name, Phone phone, Email email, Address address, Set\u003cSkill\u003e skills) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        requireAllNonNull(name, phone, email, address, skills);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        this.skills.addAll(skills);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns an immutable skill set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public Set\u003cSkill\u003e getSkills() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return Collections.unmodifiableSet(skills);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public boolean isSameEmployee(Employee otherEmployee) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        if (otherEmployee \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return otherEmployee !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            \u0026\u0026 otherEmployee.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            \u0026\u0026 (otherEmployee.getPhone().equals(getPhone()) || otherEmployee.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Returns the index of this employee in the list in model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns a clone of this Employee object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Employee clone() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Set\u003cSkill\u003e newSkills \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Skill s: skills) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            newSkills.add(s.clone());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new Employee(this.name.clone(), this.phone.clone(), this.email.clone(), this.address.clone(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                newSkills);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        if (!(other instanceof Employee)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Employee otherEmployee \u003d (Employee) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return otherEmployee.getName().equals(getName())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            \u0026\u0026 otherEmployee.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            \u0026\u0026 otherEmployee.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            \u0026\u0026 otherEmployee.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            \u0026\u0026 otherEmployee.getSkills().equals(getSkills());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return Objects.hash(name, phone, email, address, skills);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Phone: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getPhone())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Email: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getEmail())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Address: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getAddress())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Tags: \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        getSkills().forEach(builder::append);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 12,
      "jeffgan96": 12,
      "dehui333": 12,
      "-": 95,
      "jothipillay": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/EmployeeNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Tests that a {@code Employee}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "public class EmployeeNameContainsKeywordsPredicate implements Predicate\u003cEmployee\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public EmployeeNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public boolean test(Employee employee) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(employee.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "                || (other instanceof EmployeeNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "                \u0026\u0026 keywords.equals(((EmployeeNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 4,
      "-": 23,
      "shunnizuka": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Represents a Employee\u0027s name in the Pocket Project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     *  Returns a clone of this Name object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Name clone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new Name(this.fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 1,
      "dehui333": 7,
      "-": 57,
      "jothipillay": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Represents a Employee\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns a clone of this Phone object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Phone clone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new Phone(this.value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 2,
      "dehui333": 7,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/UniqueEmployeeList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.employee.exceptions.DuplicateEmployeeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.employee.exceptions.EmployeeNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * A list of employees that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * An employee is considered unique by comparing using {@code Employee#isSameEmployee(Employee)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * updating of employees uses Employee#isSameEmployee(Employee) for equality so as to ensure that the employee being"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueEmployeeList. However, the removal of an employee uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Employee#equals(Object) so as to ensure that the employee with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * @see Employee#isSameEmployee(Employee)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class UniqueEmployeeList implements Iterable\u003cEmployee\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private final ObservableList\u003cEmployee\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private final ObservableList\u003cEmployee\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns true if the list contains an equivalent employee as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * To keep the employeeList unique, same name allowed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public boolean contains(Employee toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEmployee);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Return true if the list contains the exact same employee."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * To identify if the employee exists in the list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public boolean containsExactSameEmployee(Employee toCheck) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Adds an employee to the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * The employee must not already exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void add(Employee toAdd) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            throw new DuplicateEmployeeException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Replaces the employee {@code target} in the list with {@code editedEmployee}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * The employee identity of {@code editedEmployee} must not be the same as another existing employee in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployee(Employee target, Employee editedEmployee) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        requireAllNonNull(target, editedEmployee);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            throw new EmployeeNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        if (!target.isSameEmployee(editedEmployee) \u0026\u0026 contains(editedEmployee)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            throw new DuplicateEmployeeException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        internalList.set(index, editedEmployee);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Removes the equivalent employee from the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * The employee must exist in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void remove(Employee toRemove) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            throw new EmployeeNotFoundException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployees(UniqueEmployeeList replacement) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Replaces the contents of this list with {@code employees}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * {@code employees} must not contain duplicate employees."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployees(List\u003cEmployee\u003e employees) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        requireAllNonNull(employees);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        if (!employeesAreUnique(employees)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            throw new DuplicateEmployeeException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        internalList.setAll(employees);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ObservableList\u003cEmployee\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns a clone of this UniqueEmployeeList object."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public UniqueEmployeeList clone() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        UniqueEmployeeList newList \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Employee e: internalList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            newList.add(e.clone());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public Iterator\u003cEmployee\u003e iterator() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                || (other instanceof UniqueEmployeeList // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueEmployeeList) other).internalList));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns true if {@code employees} contains only unique employees."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private boolean employeesAreUnique(List\u003cEmployee\u003e employees) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        for (int i \u003d 0; i \u003c employees.size() - 1; i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            for (int j \u003d i + 1; j \u003c employees.size(); j++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                if (employees.get(i).isSameEmployee(employees.get(j))) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 24,
      "jeffgan96": 24,
      "dehui333": 11,
      "-": 89,
      "shunnizuka": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/exceptions/DuplicateEmployeeException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ditan96"
        },
        "content": "package seedu.address.model.employee.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ditan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Signals that the operation will result in duplicate employees(employees are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class DuplicateEmployeeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public DuplicateEmployeeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        super(\"Operation would result in duplicate employees\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 8,
      "dehui333": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/employee/exceptions/EmployeeNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.employee.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Signals that the operation is unable to find the specified employee."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class EmployeeNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "jeffgan96": 2,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Client.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Client of the project. Basically who we are doing this project for."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class Client {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public final String client;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Constructor for ProjectName."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public Client(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        this.client \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static boolean isValidName(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return input.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns a clone of this client object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Client clone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new Client(this.client);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return client;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                || (other instanceof Client // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                \u0026\u0026 client.equals(((Client) other).client)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return client.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dehui333": 7,
      "jothipillay": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Deadline.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * The date at which the project is due."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Deadlines should be in the format DD/MM/YYYY\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/((19|20)\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public final String deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public Deadline (String date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        this.deadline \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static boolean isValidDate(String input) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DateFormat format \u003d Project.DATE_FORMAT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        format.setLenient(false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            format.parse(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return input.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns a clone of this Deadline object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Deadline clone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new Deadline(this.deadline);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                || (other instanceof Deadline // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                \u0026\u0026 deadline.equals(((Deadline) other).deadline)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return deadline.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 17,
      "jothipillay": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " * Description of the project. A summary of what the project is about"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Empty Constructor for when description is not added to the project yet"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public Description() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.description \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Constructor for when adding description to the project"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public Description(String desc) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        requireNonNull(desc);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns a clone of this Description object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Description clone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new Description(this.description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return other \u003d\u003d this// short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            \u0026\u0026 description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 7,
      "shunnizuka": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Milestone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Milestone achieved in the project timeline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class Milestone {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            \"(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/((19|20)\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The milestone info must not be empty or consisting of only spaces\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            + \" and the date given must be in DD/MM/YYYY format\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_INVALID_STRING \u003d \"The milestone info must not be empty or consisting \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        + \"of only spaces\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"The date given must be in DD/MM/YYYY format\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public final String milestone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Milestone(String milestone, String date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireNonNull(milestone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        checkArgument(isValidMilestoneString(milestone), MESSAGE_INVALID_STRING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        checkArgument(isValidMilestoneDate(date), MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.milestone \u003d milestone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns true if given strings are valid fields for a milestone."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static boolean isValidMilestone(String info, String date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return Milestone.isValidMilestoneDate(date)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                \u0026\u0026 Milestone.isValidMilestoneString(info);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns true if given string is valid for a milestone date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static boolean isValidMilestoneDate(String date) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DateFormat format \u003d Project.DATE_FORMAT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        format.setLenient(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            format.parse(date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return date.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns true if given string is valid for a milestone string"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static boolean isValidMilestoneString(String info) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return !info.trim().isEmpty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns a clone of this Milestone object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Milestone clone() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new Milestone(this.milestone, this.date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public String getMilestone() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return milestone;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                || (other instanceof Milestone // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                \u0026\u0026 milestone.equals(((Milestone) other).milestone)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                \u0026\u0026 date.equals(((Milestone) other).date)); // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return this.milestone + \" \" + this.date;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 17,
      "dehui333": 54,
      "jothipillay": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Project.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.employee.UniqueEmployeeList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Represents a project in the pocket project."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class Project {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final DateFormat DATE_FORMAT \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private final ProjectName projectName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final List\u003cMilestone\u003e milestones;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private final Client client;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final UniqueEmployeeList employees;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Constructor for each Project Object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public Project (ProjectName pn, Client c, Deadline d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        this.projectName \u003d pn;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        this.client \u003d c;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        this.deadline \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        milestones \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        employees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.description \u003d new Description();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Constructor specifying milestones too."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Project (ProjectName pn, Client c, Deadline d, List\u003cMilestone\u003e m) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.projectName \u003d pn;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.client \u003d c;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.deadline \u003d d;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.milestones \u003d m;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.employees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.description \u003d new Description();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Constructor specifying description and milestone too."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public Project (ProjectName pn, Client c, Deadline d, List\u003cMilestone\u003e m, Description desc) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.projectName \u003d pn;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.client \u003d c;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.deadline \u003d d;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.milestones \u003d m;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.employees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Constructor specifying description."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public Project (ProjectName pn, Client c, Deadline d, Description desc) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.projectName \u003d pn;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.client \u003d c;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.deadline \u003d d;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.milestones \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.employees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Constructor specifying employees in the project."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Project(ProjectName pn, Client c, Deadline d, Description desc, UniqueEmployeeList emp) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.projectName \u003d pn;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.client \u003d c;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.deadline \u003d d;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.employees \u003d emp;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.milestones \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Constructor specifying all fields."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Project(ProjectName pn, Client c, Deadline d, List\u003cMilestone\u003e m, Description desc, UniqueEmployeeList emp) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.projectName \u003d pn;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.client \u003d c;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.deadline \u003d d;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.employees \u003d emp;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.milestones \u003d m;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public ProjectName getProjectName() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return projectName;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public List\u003cMilestone\u003e getMilestones() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return milestones;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public Client getClient() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return client;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public ObservableList\u003cEmployee\u003e getEmployees() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return employees.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns a clone of this Project object."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Project clone() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        List\u003cMilestone\u003e cloneOfMilestones \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Milestone m: this.milestones) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            cloneOfMilestones.add(m.clone());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new Project(this.projectName.clone(), this.client.clone(), this.deadline.clone(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            cloneOfMilestones,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            this.description.clone(), this.employees.clone());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns true if both projects have the same name."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public boolean isSameProject(Project otherProject) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (otherProject \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return otherProject !\u003d null"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            \u0026\u0026 otherProject.getProjectName().equals(getProjectName());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Adds the given employee to this project."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void addEmployee(Employee employee) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        employees.add(employee);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Adds the given milestone to this project."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void addMilestone(Milestone milestone) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        milestones.add(milestone);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Comparator\u003c? super Milestone\u003e comparator \u003d new Comparator\u003cMilestone\u003e() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            public int compare(Milestone m1, Milestone m2) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                int dd1 \u003d Integer.parseInt(m1.date.substring(0, 2));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                int mm1 \u003d Integer.parseInt(m1.date.substring(3, 5));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                int yy1 \u003d Integer.parseInt(m1.date.substring(6, 10));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                int dd2 \u003d Integer.parseInt(m2.date.substring(0, 2));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                int mm2 \u003d Integer.parseInt(m2.date.substring(3, 5));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                int yy2 \u003d Integer.parseInt(m2.date.substring(6, 10));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                if (yy1 !\u003d yy2) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                    return yy1 - yy2;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                } else if (mm1 !\u003d mm2) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                    return mm1 - mm2;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                    return dd1 - dd2;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        };"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        milestones.sort(comparator);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     *  Removes the given employee from this project."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void removeEmployee(Employee employee) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        employees.remove(employee);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Removes the given milestone from this project."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void removeMilestone(Milestone milestone) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        milestones.remove(milestone);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Replace the existing employee with the new editedEmployee."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public void setEmployee(Employee target, Employee editedEmployee) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        employees.setEmployee(target, editedEmployee);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns true if this project has the given projectName."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public boolean hasProjectName(ProjectName projectName) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return this.projectName.equals(projectName);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns true if this project contains the given Employee."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public boolean containsEmployee(Employee employee) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return employees.containsExactSameEmployee(employee);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public boolean equals (Object other) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        if (!(other instanceof Project)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Project otherProject \u003d (Project) other;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return otherProject.getProjectName().equals(getProjectName())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            \u0026\u0026 otherProject.getClient().equals(getClient())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            \u0026\u0026 otherProject.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            \u0026\u0026 otherProject.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            \u0026\u0026 otherProject.getMilestones().equals(getMilestones())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            \u0026\u0026 otherProject.employees.equals(this.employees);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return Objects.hash(projectName, client, deadline, description);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        builder.append(getProjectName())"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            .append(\" Client: \")"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            .append(getClient())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            .append(\" Deadline: \")"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            .append(getDeadline())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            .append(\" \" + getDescription()).append(\"\\nemployees:\\n\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Employee e: employees) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            builder.append(e);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        builder.append(\"milestones:\\n\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Milestone m: milestones) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            builder.append(m);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 146,
      "shunnizuka": 33,
      "-": 2,
      "jothipillay": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/ProjectName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Name of the project in the Pocket Project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class ProjectName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * The first character of the project name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public final String projectName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Constructor for ProjectName."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public ProjectName(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        this.projectName \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static boolean isValidName(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return input.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns a clone of this ProjectName object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public ProjectName clone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new ProjectName(this.projectName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return projectName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                || (other instanceof ProjectName // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                \u0026\u0026 projectName.equals(((ProjectName) other).projectName)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return projectName.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 7,
      "jothipillay": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/ProjectNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Tests that a {@code Project}\u0027s {@code Project Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "public class ProjectNameContainsKeywordsPredicate implements Predicate\u003cProject\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public ProjectNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public boolean test(Project project) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(project.getProjectName().projectName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            || (other instanceof ProjectNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            \u0026\u0026 keywords.equals(((ProjectNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 1,
      "shunnizuka": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/UniqueProjectList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.exceptions.DuplicateProjectException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * A list of Projects that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * An Project is considered unique by comparing using {@code Project#isSameProject(Project)}. As such, adding and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * updating of Projects uses Project#isSameProject(Project) for equality so as to ensure that the Project being"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueProjectList. However, the removal of an Project uses"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Project#equals(Object) so as to ensure that the Project with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * //@see Project#isSameProject(Project)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class UniqueProjectList implements Iterable\u003cProject\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final ObservableList\u003cProject\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final ObservableList\u003cProject\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns true if the list contains an equivalent Project as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public boolean contains(Project toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameProject);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Adds an Project to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * The Project must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void add(Project toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns a clone of this UniqueProjectList object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public UniqueProjectList clone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        UniqueProjectList newList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Project p: internalList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            newList.add(p.clone());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Replaces the Project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * The Project identity of {@code editedProject} must not be the same as another existing Project in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireAllNonNull(target, editedProject);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (!target.isSameProject(editedProject) \u0026\u0026 contains(editedProject)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        internalList.set(index, editedProject);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Removes the equivalent Project from the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * The Project must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void remove(Project toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void setProjects(UniqueProjectList replacement) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Replaces the contents of this list with {@code Projects}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * {@code Projects} must not contain duplicate Projects."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void setProjects(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireAllNonNull(projects);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (!projectsAreUnique(projects)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        internalList.setAll(projects);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     *  Removes the specified employee from the specified project. They must exist."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void removeEmployeeFrom(Project project, Employee employee) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireAllNonNull(project, employee);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        internalList.get(internalList.indexOf(project)).removeEmployee(employee);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     *  Removes the specified milestone from the specified project. They must exist."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void removeMilestoneFrom(Project project, Milestone milestone) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        requireAllNonNull(project, milestone);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        internalList.get(internalList.indexOf(project)).removeMilestone(milestone);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     *  Adds the specified employee to the specified project. They must exist."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void addEmployeeTo(Project project, Employee employee) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireAllNonNull(project, employee);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        internalList.get(internalList.indexOf(project)).addEmployee(employee);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     *  Removes the specified milestone from the specified project. They must exist."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void addMilestoneTo(Project project, Milestone milestone) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        requireAllNonNull(project, milestone);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        internalList.get(internalList.indexOf(project)).addMilestone(milestone);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public ObservableList\u003cProject\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Iterator\u003cProject\u003e iterator() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                || (other instanceof UniqueProjectList // instanceof handles nulls"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueProjectList) other).internalList));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns true if {@code Projects} contains only unique Projects."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private boolean projectsAreUnique(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (int i \u003d 0; i \u003c projects.size() - 1; i++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            for (int j \u003d i + 1; j \u003c projects.size(); j++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                if (projects.get(i).isSameProject(projects.get(j))) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 158,
      "jothipillay": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/exceptions/DuplicateProjectException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Signals that the operation will result in duplicate projects (Projects are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * same name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class DuplicateProjectException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public DuplicateProjectException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        super(\"Operation would result in duplicate projects\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/exceptions/ProjectNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Signals that the operation is unable to find the specified project."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class ProjectNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/skill/EmployeeSkillContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "package seedu.address.model.skill;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " * Tests that a {@code Employee}\u0027s {@code skill} matches any of the keyword given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "public class EmployeeSkillContainsKeywordsPredicate implements Predicate\u003cEmployee\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public EmployeeSkillContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public boolean test(Employee employee) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        //convert list of skills into string with no comma and brackets for matching purpose"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        String prepEmployeeSkill \u003d employee.getSkills().toString().replaceAll(\",\" , \"\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            .replaceAll(\"\\\\]\", \"\").replaceAll(\"\\\\[\", \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            StringUtil.containsWordIgnoreCase(prepEmployeeSkill, keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            || (other instanceof EmployeeSkillContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            \u0026\u0026 keywords.equals(((EmployeeSkillContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shunnizuka": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/skill/Skill.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ditan96"
        },
        "content": "package seedu.address.model.skill;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * Represents a Skill in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidSkillName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class Skill {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public final String skillName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Constructs a {@code Skill}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @param skillName A valid skill name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public Skill(String skillName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        requireNonNull(skillName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        checkArgument(isValidSkillName(skillName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        this.skillName \u003d skillName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Returns a clone of this Skill object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Skill clone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new Skill(this.skillName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns true if a given string is a valid skill name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static boolean isValidSkillName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            || (other instanceof Skill // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            \u0026\u0026 skillName.equals(((Skill) other).skillName)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return skillName.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return \u0027[\u0027 + skillName + \u0027]\u0027;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 17,
      "dehui333": 7,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * Contains utility methods for populating {@code PocketProject} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static Employee[] getSampleEmployees() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return new Employee[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            new Employee(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                getSkillSet(\"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            new Employee(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                getSkillSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            new Employee(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                getSkillSet(\"neighbours\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            new Employee(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                getSkillSet(\"family\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            new Employee(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                getSkillSet(\"classmates\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            new Employee(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                getSkillSet(\"colleagues\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static ReadOnlyPocketProject getSamplePocketProject() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        PocketProject sampleAb \u003d new PocketProject();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        for (Employee sampleEmployee : getSampleEmployees()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            sampleAb.addEmployee(sampleEmployee);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns a skill set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static Set\u003cSkill\u003e getSkillSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                .map(Skill::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 18,
      "jeffgan96": 12,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEmployee.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Jackson-friendly version of {@link Employee}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "class JsonAdaptedEmployee {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Employee\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final List\u003cJsonAdaptedSkill\u003e skills \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Constructs a {@code JsonAdaptedEmployee} with the given employee details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public JsonAdaptedEmployee(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                               @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                               @JsonProperty(\"skills\") List\u003cJsonAdaptedSkill\u003e skills) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        if (skills !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            this.skills.addAll(skills);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Converts a given {@code Employee} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public JsonAdaptedEmployee(Employee source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        skills.addAll(source.getSkills().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                .map(JsonAdaptedSkill::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Converts this Jackson-friendly adapted employee object into the model\u0027s {@code Employee} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted employee."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public Employee toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        final List\u003cSkill\u003e employeeSkills \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        for (JsonAdaptedSkill skill : skills) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            employeeSkills.add(skill.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        final Set\u003cSkill\u003e modelSkills \u003d new HashSet\u003c\u003e(employeeSkills);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return new Employee(modelName, modelPhone, modelEmail, modelAddress, modelSkills);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 16,
      "jeffgan96": 11,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMilestone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Jackson-friendly version of {@link seedu.address.model.project.Milestone}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "class JsonAdaptedMilestone {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final String milestone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Constructs a {@code JsonAdaptedMilestone} with the given {@code skillName}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public JsonAdaptedMilestone(@JsonProperty(\"milestone\") String milestone, @JsonProperty(\"date\") String date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.milestone \u003d milestone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Converts a given {@code Skill} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public JsonAdaptedMilestone(Milestone source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        milestone \u003d source.milestone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        date \u003d source.date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Converts this Jackson-friendly adapted milestone object into the model\u0027s {@code Milestone} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted milestone."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Milestone toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (!Milestone.isValidMilestone(milestone, date)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new IllegalValueException(Milestone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new Milestone(milestone, date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 2,
      "dehui333": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedProject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.employee.UniqueEmployeeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Client;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Jackson-friendly version of {@link Project}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "class JsonAdaptedProject {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Project\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final String projectName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final String client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final List\u003cJsonAdaptedMilestone\u003e milestones \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final List\u003cJsonAdaptedEmployee\u003e employees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Constructs a {@code JsonAdaptedProject} with the given project details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public JsonAdaptedProject(@JsonProperty(\"projectName\") String projectName, @JsonProperty(\"client\") String client,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                              @JsonProperty(\"deadline\") String deadline,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "                              @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                              @JsonProperty(\"milestones\") List\u003cJsonAdaptedMilestone\u003e milestones,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                              @JsonProperty(\"employees\") List\u003cJsonAdaptedEmployee\u003e employees) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (milestones !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            this.milestones.addAll(milestones);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.employees.addAll(employees);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Converts a given {@code Project} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public JsonAdaptedProject(Project source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        projectName \u003d source.getProjectName().projectName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        client \u003d source.getClient().client;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        deadline \u003d source.getDeadline().deadline;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        description \u003d source.getDescription().description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        milestones.addAll(source.getMilestones().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            .map(JsonAdaptedMilestone::new)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        employees.addAll(source.getEmployees().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                .map(JsonAdaptedEmployee::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Converts this Jackson-friendly adapted project object into the model\u0027s {@code Project} object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted project."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Project toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final List\u003cMilestone\u003e modelMilestones \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final UniqueEmployeeList modelEmployees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (JsonAdaptedMilestone milestone : milestones) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            modelMilestones.add(milestone.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (JsonAdaptedEmployee employee: employees) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            modelEmployees.add(employee.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (projectName \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                ProjectName.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (!ProjectName.isValidName(projectName)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new IllegalValueException(ProjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final ProjectName modelProjectName \u003d new ProjectName(projectName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (client \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Client.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (!Client.isValidName(client)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new IllegalValueException(Client.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final Client modelClient \u003d new Client(client);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "                Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (!Deadline.isValidDate(deadline)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        final Deadline modelDeadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new Project(modelProjectName, modelClient, modelDeadline, modelMilestones, modelDescription,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                modelEmployees);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 111,
      "shunnizuka": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSkill.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ditan96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * Jackson-friendly version of {@link Skill}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ditan96"
        },
        "content": "class JsonAdaptedSkill {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final String skillName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Constructs a {@code JsonAdaptedSkill} with the given {@code skillName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public JsonAdaptedSkill(String skillName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        this.skillName \u003d skillName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Converts a given {@code Skill} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public JsonAdaptedSkill(Skill source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        skillName \u003d source.skillName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public String getSkillName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return skillName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Converts this Jackson-friendly adapted skill object into the model\u0027s {@code Skill} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted skill."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public Skill toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        if (!Skill.isValidSkillName(skillName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            throw new IllegalValueException(Skill.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return new Skill(skillName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPocketProjectStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * A class to access PocketProject data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class JsonPocketProjectStorage implements PocketProjectStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPocketProjectStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public JsonPocketProjectStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public Path getPocketProjectFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public Optional\u003cReadOnlyPocketProject\u003e readPocketProject() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return readPocketProject(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Similar to {@link #readPocketProject()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public Optional\u003cReadOnlyPocketProject\u003e readPocketProject(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Optional\u003cJsonSerializablePocketProject\u003e jsonPocketProject \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                filePath, JsonSerializablePocketProject.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        if (!jsonPocketProject.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            return Optional.of(jsonPocketProject.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void savePocketProject(ReadOnlyPocketProject pocketProject) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        savePocketProject(pocketProject, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Similar to {@link #savePocketProject(ReadOnlyPocketProject)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void savePocketProject(ReadOnlyPocketProject pocketProject, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        requireNonNull(pocketProject);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePocketProject(pocketProject), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePocketProject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * An Immutable PocketProject that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "@JsonRootName(value \u003d \"pocketproject\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "class JsonSerializablePocketProject {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EMPLOYEE \u003d \"Employees list contains duplicate employee(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"Project list contains duplicate project(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final List\u003cJsonAdaptedEmployee\u003e employees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final List\u003cJsonAdaptedProject\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Constructs a {@code JsonSerializablePocketProject} with the given employees and projects."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public JsonSerializablePocketProject("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            @JsonProperty(\"employees\") List\u003cJsonAdaptedEmployee\u003e employees,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            @JsonProperty(\"projects\") List\u003cJsonAdaptedProject\u003e projects) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        this.employees.addAll(employees);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.projects.addAll(projects);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Converts a given {@code ReadOnlyPocketProject} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePocketProject}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public JsonSerializablePocketProject(ReadOnlyPocketProject source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        employees.addAll(source.getEmployeeList().stream().map(JsonAdaptedEmployee::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        projects.addAll(source.getProjectList().stream().map(JsonAdaptedProject::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Converts this pocket project into the model\u0027s {@code PocketProject} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public PocketProject toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        PocketProject pocketProject \u003d new PocketProject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        for (JsonAdaptedEmployee jsonAdaptedEmployee : employees) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            Employee employee \u003d jsonAdaptedEmployee.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            if (pocketProject.hasEmployee(employee)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            pocketProject.addEmployee(employee);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (JsonAdaptedProject jsonAdaptedProject : projects) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            Project project \u003d jsonAdaptedProject.toModelType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            if (pocketProject.hasProject(project)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            pocketProject.addProject(project);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return pocketProject;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 24,
      "jeffgan96": 1,
      "dehui333": 14,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PocketProjectStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * Represents a storage for {@link PocketProject}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public interface PocketProjectStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    Path getPocketProjectFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns PocketProject data as a {@link ReadOnlyPocketProject}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    Optional\u003cReadOnlyPocketProject\u003e readPocketProject() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see #getPocketProjectFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    Optional\u003cReadOnlyPocketProject\u003e readPocketProject(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Saves the given {@link ReadOnlyPocketProject} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @param pocketProject cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    void savePocketProject(ReadOnlyPocketProject pocketProject) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see #savePocketProject(ReadOnlyPocketProject)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    void savePocketProject(ReadOnlyPocketProject pocketProject, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 14,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public interface Storage extends PocketProjectStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    Path getPocketProjectFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    Optional\u003cReadOnlyPocketProject\u003e readPocketProject() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    void savePocketProject(ReadOnlyPocketProject pocketProject) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * Manages storage of PocketProject data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private PocketProjectStorage pocketProjectStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public StorageManager(PocketProjectStorage pocketProjectStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        this.pocketProjectStorage \u003d pocketProjectStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PocketProject methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public Path getPocketProjectFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return pocketProjectStorage.getPocketProjectFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public Optional\u003cReadOnlyPocketProject\u003e readPocketProject() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return readPocketProject(pocketProjectStorage.getPocketProjectFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public Optional\u003cReadOnlyPocketProject\u003e readPocketProject(Path filePath)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                                            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return pocketProjectStorage.readPocketProject(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void savePocketProject(ReadOnlyPocketProject pocketProject) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        savePocketProject(pocketProject, pocketProjectStorage.getPocketProjectFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void savePocketProject(ReadOnlyPocketProject pocketProject, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProjectStorage.savePocketProject(pocketProject, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 17,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DetailsPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Panel of the main window to show all information or employees and projects"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class DetailsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final int INITIAL_PANEL_INDEX \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DetailsPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final String FXML \u003d \"DetailsPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private EmployeeDetails employeeDetails;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private ProjectDetails projectDetails;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private List\u003cNode\u003e contentList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private int currentPanelIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private BorderPane borderPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private StackPane informationPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Button prevBtn;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Button nextBtn;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public DetailsPanel(ObservableValue\u003cEmployee\u003e selectedEmployee, ObservableValue\u003cProject\u003e selectedProject) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        initPrevBtn();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        initNextBtn();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        initDefaultView();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        this.currentPanelIndex \u003d INITIAL_PANEL_INDEX;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        selectedEmployee.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                logger.info(\"Loading new employee details\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                employeeDetails \u003d new EmployeeDetails(selectedEmployee.getValue());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                refreshEmployeeContent();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        selectedProject.addListener(((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                logger.info(\"loading new project details\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                projectDetails \u003d new ProjectDetails(selectedProject.getValue());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                refreshProjectContent();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Refreshes the content of the panel to the most updated employee selection"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void refreshEmployeeContent() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        currentPanelIndex \u003d INITIAL_PANEL_INDEX;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        setContent(employeeDetails.getEmployeeDetails());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        updateInformationPanel(contentList.get(currentPanelIndex));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Refreshes the content of the panel to the most updated project selection"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void refreshProjectContent() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        currentPanelIndex \u003d INITIAL_PANEL_INDEX;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        setContent(projectDetails.getProjectDetails());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        updateInformationPanel(contentList.get(currentPanelIndex));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Initialises a default list of panels to show when nothing is selected."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void initDefaultView() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Pane pane \u003d new Pane();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        contentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        contentList.add(pane);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        updateInformationPanel(pane);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void updateInformationPanel(Node e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        informationPanel.getChildren().clear();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        informationPanel.getChildren().add(e);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Updates the content in the information panel to the list of content provided."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * @param content"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void setContent(List\u003cNode\u003e content) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        contentList.clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        contentList.addAll(content);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void initPrevBtn() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        prevBtn.setOnAction((actionEvent) -\u003e showPrevPanel());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void initNextBtn() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        nextBtn.setOnAction((actionEvent) -\u003e showNextPanel());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Shows the panel before the current panel in the contents list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void showPrevPanel() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        int nextIndex \u003d currentPanelIndex - 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        if (nextIndex \u003c 0) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            currentPanelIndex \u003d 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            currentPanelIndex \u003d nextIndex;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        logger.info(\"Current pane: \" + currentPanelIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        updateInformationPanel(contentList.get(currentPanelIndex));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Shows the panel after the current panel in the contents list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void showNextPanel() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        int nextIndex \u003d currentPanelIndex + 1;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        if (nextIndex \u003e contentList.size() - 1) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            currentPanelIndex \u003d contentList.size() - 1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            currentPanelIndex \u003d nextIndex;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        logger.info(\"Current pane: \" + currentPanelIndex);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        updateInformationPanel(contentList.get(currentPanelIndex));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EmployeeCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * An UI component that displays information of a {@code Employee}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class EmployeeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final String FXML \u003d \"EmployeeListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on PocketProject level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public final Employee employee;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private FlowPane skills;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeCard(Employee employee, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        this.employee \u003d employee;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        name.setText(employee.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        phone.setText(employee.getPhone().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        address.setText(employee.getAddress().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        email.setText(employee.getEmail().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        employee.getSkills().forEach(skill -\u003e skills.getChildren().add(new Label(skill.skillName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        if (!(other instanceof EmployeeCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EmployeeCard card \u003d (EmployeeCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                \u0026\u0026 employee.equals(card.employee);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 8,
      "jeffgan96": 9,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EmployeeDetails.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Encapsulates all the information to display about an employee"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class EmployeeDetails {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Employee employee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private List\u003cNode\u003e employeeDetailsList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private EmployeeSummary employeeSummary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private EmployeeGitHub gitHubProfile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public EmployeeDetails(Employee employee) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        this.employee \u003d employee;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        employeeDetailsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        employeeSummary \u003d new EmployeeSummary(employee);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        gitHubProfile \u003d new EmployeeGitHub(employee);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        employeeDetailsList.add(employeeSummary.getRoot());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        employeeDetailsList.add(gitHubProfile.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public List\u003cNode\u003e getEmployeeDetails() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return employeeDetailsList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EmployeeGitHub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.web.WebEngine;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Contains a webview to load a github profile"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class EmployeeGitHub extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final String FXML \u003d \"EmployeeGitHub.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final String PREFIX_GITHUB \u003d \"https://github.com/\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Employee employee;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private WebView webView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public EmployeeGitHub(Employee employee) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        this.employee \u003d employee;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        loadEmployeePage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void loadEmployeePage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        String url \u003d new String(PREFIX_GITHUB + employee.getName().fullName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        loadPage(url);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void loadPage(String url) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        WebEngine webEngine \u003d webView.getEngine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        webEngine.load(url);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EmployeeListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * Panel containing the list of employees."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class EmployeeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final String FXML \u003d \"EmployeeListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EmployeeListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private ListView\u003cEmployee\u003e employeeListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeListPanel(ObservableList\u003cEmployee\u003e employeeList, ObservableValue\u003cEmployee\u003e selectedEmployee,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                             Consumer\u003cEmployee\u003e onSelectedEmployeeChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        employeeListView.setItems(employeeList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        employeeListView.setCellFactory(listView -\u003e new EmployeeListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        employeeListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            logger.info(\"Selection in employee list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            onSelectedEmployeeChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        selectedEmployee.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            logger.info(\"Selected employee changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected employee,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            if (Objects.equals(employeeListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                employeeListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                int index \u003d employeeListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                employeeListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                employeeListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Employee} using a {@code EmployeeCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    class EmployeeListViewCell extends ListCell\u003cEmployee\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        protected void updateItem(Employee employee, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            super.updateItem(employee, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            if (empty || employee \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                setGraphic(new EmployeeCard(employee, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 20,
      "jeffgan96": 7,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EmployeeSummary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Summary of an employee"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class EmployeeSummary extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final String FXML \u003d \"EmployeeSummary.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Pane employeeDetails;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Label skills;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Label projects;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private HBox skillsList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public EmployeeSummary(Employee employee) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        name.setText(employee.getName().fullName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        employee.getSkills().forEach(skill -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            skillsList.getChildren().add(new Label(skill.skillName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private DetailsPanel detailsPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private EmployeeListPanel employeeListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private ProjectListPanel projectListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private SideTabPanel sideTabPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private StackPane detailsPanelPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private StackPane tabPanePlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        detailsPanel \u003d new DetailsPanel(logic.selectedEmployeeProperty(), logic.selectedProjectProperty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        detailsPanelPlaceholder.getChildren().add(detailsPanel.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        employeeListPanel \u003d new EmployeeListPanel(logic.getFilteredEmployeeList(), logic.selectedEmployeeProperty(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                logic::setSelectedEmployee);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        projectListPanel \u003d new ProjectListPanel(logic.getFilteredProjectList(), logic.selectedProjectProperty(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                logic::setSelectedProject);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        sideTabPanel \u003d new SideTabPanel(employeeListPanel.getRoot(), projectListPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        tabPanePlaceholder.getChildren().add(sideTabPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new StatusBarFooter(logic.getPocketProjectFilePath(), logic.getPocketProject());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeListPanel getEmployeeListPanel() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return employeeListPanel;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 7,
      "jeffgan96": 10,
      "dehui333": 2,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * An UI component that displays information of a {@code Project}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class ProjectCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private static final String FXML \u003d \"ProjectListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on PocketProject level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public final Project project;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private Label client;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public ProjectCard(Project project, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.project \u003d project;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        name.setText(project.getProjectName().projectName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        client.setText(project.getClient().client);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        deadline.setText(project.getDeadline().deadline);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        if (!(other instanceof ProjectCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        ProjectCard card \u003d (ProjectCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                \u0026\u0026 project.equals(card.project);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "jeffgan96": 3,
      "dehui333": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectDetails.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Encapsulates all the information to show about a project"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ProjectDetails {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Project project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private List\u003cNode\u003e projectDetailsList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private ProjectSummary projectSummary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ProjectDetails(Project project) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        this.project \u003d project;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        projectDetailsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        projectSummary \u003d new ProjectSummary(project);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        projectDetailsList.add(projectSummary.getRoot());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public List\u003cNode\u003e getProjectDetails() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return projectDetailsList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Panel containing the list of projects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class ProjectListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private static final String FXML \u003d \"ProjectListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProjectListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private ListView\u003cProject\u003e projectListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ProjectListPanel(ObservableList\u003cProject\u003e projectList,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                            ObservableValue\u003cProject\u003eselectedProject,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                            Consumer\u003cProject\u003e onSelectedProjectChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        projectListView.setItems(projectList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        projectListView.setCellFactory(listView -\u003e new ProjectListPanel.ProjectListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        projectListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            logger.info(\"Selection in project list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            onSelectedProjectChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        selectedProject.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            logger.info(\"Selected project changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected employee,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            if (Objects.equals(projectListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                projectListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                int index \u003d projectListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                projectListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                projectListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Project} using a {@code ProjectCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    class ProjectListViewCell extends ListCell\u003cProject\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        protected void updateItem(Project project, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            super.updateItem(project, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            if (empty || project \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                setGraphic(new ProjectCard(project, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 28,
      "dehui333": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectSummary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Summary of a project"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ProjectSummary extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final String FXML \u003d \"ProjectSummary.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Pane projectDetails;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Label projectName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ProjectSummary(Project project) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        projectName.setText(project.getProjectName().projectName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SideTabPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * The side panel with tabpane for the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class SideTabPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final String FXML \u003d \"SideTabPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private TabPane sideTabPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Tab employeeTab;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Tab projectTab;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public SideTabPanel(Node employeeListNode, Node projectListNode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        employeeTab.setContent(employeeListNode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        projectTab.setContent(projectListNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyPocketProject addressBook) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 2,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/PocketProjectIcon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/DetailsPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003cBorderPane fx:id\u003d\"borderPanel\" minHeight\u003d\"400\" minWidth\u003d\"600\" prefHeight\u003d\"450.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "   \u003cleft\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "      \u003cButton fx:id\u003d\"prevBtn\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"35.0\" prefWidth\u003d\"77.0\" text\u003d\"Previous\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "         \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "         \u003c/BorderPane.margin\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "   \u003c/left\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "   \u003cright\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "      \u003cButton fx:id\u003d\"nextBtn\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"35.0\" prefWidth\u003d\"77.0\" text\u003d\"Next\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "         \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "         \u003c/BorderPane.margin\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "   \u003c/right\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "      \u003cStackPane fx:id\u003d\"informationPanel\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "         \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "         \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 28
    }
  },
  {
    "path": "src/main/resources/view/EmployeeGitHub.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003cWebView fx:id\u003d\"webView\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 6
    }
  },
  {
    "path": "src/main/resources/view/EmployeeListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"skills\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/EmployeeListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "  \u003cListView fx:id\u003d\"employeeListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/EmployeeSummary.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003cPane fx:id\u003d\"employeeDetails\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"450.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "      \u003cListView prefHeight\u003d\"450.0\" prefWidth\u003d\"600.0\" id\u003d\"details-panel\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" layoutX\u003d\"24.0\" layoutY\u003d\"27.0\" text\u003d\"name\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "      \u003cLabel fx:id\u003d\"projects\" layoutX\u003d\"30.0\" layoutY\u003d\"234.0\" text\u003d\"projects\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "      \u003cLabel layoutX\u003d\"25.0\" layoutY\u003d\"80.0\" text\u003d\"skills\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "      \u003cHBox fx:id\u003d\"skillsList\" layoutX\u003d\"25.0\" layoutY\u003d\"115.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c/Pane\u003e"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "         title\u003d\"PocketProject\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    \u003cImage url\u003d\"@/images/PocketProjectIcon.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        \u003cURL value\u003d\"@PocketProjectTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.2849\" minWidth\u003d\"1000\" VBox.vgrow\u003d\"NEVER\" \u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "          \u003cAnchorPane SplitPane.resizableWithParent\u003d\"true\" maxHeight\u003d\"340\" maxWidth\u003d\"290\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            \u003cStackPane styleClass\u003d\"tab-pane\" SplitPane.resizableWithParent\u003d\"true\" fx:id\u003d\"tabPanePlaceholder\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                     AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "          \u003c/AnchorPane \u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "          \u003cStackPane fx:id\u003d\"detailsPanelPlaceholder\" SplitPane.resizableWithParent\u003d\"false\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "          minWidth\u003d\"300\" minHeight\u003d\"450\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 11,
      "-": 57
    }
  },
  {
    "path": "src/main/resources/view/PocketProjectTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: derive(#222629, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    background-color: #222629; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: #222629;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: #222629;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".tab-pane .tab-header-area .tab {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: derive(#222629, 20%);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-base-color: #FFFFFF;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".tab-pane .tab-header-area .tab:selected {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color:  #6B6E70;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-base-color: #FFFFFF;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-base: #222629;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-control-inner-background: #222629;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: #222629;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: #222629;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: #222629;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: #222629;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: #222629;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color:  derive(#1F2833, -23%);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: #0B0C10;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: derive(#29648A, -30%);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-color:derive(#29648A, -30%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     -fx-background-color: derive(#222629, 20%);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     -fx-background-color: #222629;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     -fx-border-color: #222629;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: #222629;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: derive(#222629, 10%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-color: derive(#222629, 25%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: derive(#222629, 30%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-color: derive(#222629, 30%);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: derive(#222629, 30%);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: derive(#222629, 50%);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: derive(#222629, 6%);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: #222629;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: #222629;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: derive(#222629, 25%);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: derive(#222629, 20%);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: derive(#222629, 50%);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: #474B4F;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-color: #474B4F #474B4F #ffffff #474B4F;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: transparent, #474B4F, transparent, #474B4F;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/* Dark Button CSS */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-outline: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-padding: 5px 12px;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-display: block;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-color: #9fa8b0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-border-radius: 3px;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -webkit-border-radius: 3px;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-insets: 0, 1, 2;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "-fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-insets: 0, 1, 2;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-color: #fff;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "#details-panel {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    -fx-background-color: derive(#C2CAD0, -10%);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 350
    }
  },
  {
    "path": "src/main/resources/view/ProjectListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            \u003cLabel fx:id\u003d\"client\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$client\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dehui333": 33
    }
  },
  {
    "path": "src/main/resources/view/ProjectListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \u003cListView fx:id\u003d\"projectListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dehui333": 10
    }
  },
  {
    "path": "src/main/resources/view/ProjectSummary.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003cPane fx:id\u003d\"projectDetails\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"450.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #000000;\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        \u003cListView prefHeight\u003d\"450.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #4D6D9A;\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        \u003cLabel fx:id\u003d\"projectName\" layoutX\u003d\"24.0\" layoutY\u003d\"27.0\" text\u003d\"name\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c/Pane\u003e"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 11
    }
  },
  {
    "path": "src/main/resources/view/SideTabPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003cTabPane fx:id\u003d\"sideTabPanel\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"480.0\" prefWidth\u003d\"301.0\" styleClass\u003d\"tab-pane\" tabClosingPolicy\u003d\"UNAVAILABLE\" tabMinHeight\u003d\"40.0\" tabMinWidth\u003d\"90.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "  \u003ctabs\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    \u003cTab fx:id\u003d\"projectTab\" text\u003d\"Projects\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"348.0\" prefWidth\u003d\"327.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    \u003cTab fx:id\u003d\"employeeTab\" text\u003d\"Employees\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "  \u003c/tabs\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "\u003c/TabPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 20
    }
  },
  {
    "path": "src/test/data/JsonPocketProjectStorageTest/invalidAndValidEmployeePocketProject.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ditan96"
        },
        "content": "  \"employees\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    \"name\": \"Valid Employee\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    \"name\": \"Employee With Invalid Phone Field\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 3,
      "-": 10
    }
  },
  {
    "path": "src/test/data/JsonPocketProjectStorageTest/invalidEmployeePocketProject.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ditan96"
        },
        "content": "  \"employees\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    \"name\": \"Employee with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializablePocketProjectTest/duplicateEmployeePocketProject.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ditan96"
        },
        "content": "  \"employees\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\": [\"Python\", \"Java\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  },  {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\": [\"Python\", \"Java\" ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  } ],\"projects\" : [ ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "dehui333": 5,
      "-": 9
    }
  },
  {
    "path": "src/test/data/JsonSerializablePocketProjectTest/duplicateProjectPocketProject.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Employee values as in TypicalEmployees#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  \"employees\": [ ], \"projects\" : ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Alice\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"Dehui\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"11/02/2019\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Alice\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  ["
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      {\"milestone\" : \"The project starts\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"date\" :  \"11/11/2011\"},"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      {\"milestone\" :  \"The project completes\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        \"date\" :  \"12/12/2012\"}],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"employees\" :  [{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ \"CSS\", \"HTML\", \"Java\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"wall street\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }]},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Alice\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"Dehui\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"11/02/2019\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"description\" : \"An application for Alice\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  ["
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      {\"milestone\" : \"The project starts\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"date\" :  \"11/11/2011\"},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      {\"milestone\" :  \"The project completes\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        \"date\" :  \"12/12/2012\"}],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"employees\" :  [{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [\"CSS\", \"HTML\", \"Java\" ]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"wall street\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }]},"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Benson\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"Jeff\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"23/01/2011\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Benson\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  ["
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      {\"milestone\" : \"The project starts\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"date\" :  \"11/11/2011\"},"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      {\"milestone\" :  \"The project completes\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        \"date\" :  \"12/12/2012\"}],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"employees\" :  [{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"wall street\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ ]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"10th street\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ \"Assembly\" ]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }]},"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Carl\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"Darryl\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"12/12/2012\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Carl\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"employees\" :  [{"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"10th street\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ \"Assembly\" ]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [\"Python\" ]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }]},"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Daniel\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"Shune\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"21/12/2012\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Daniel\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [],"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"employees\" :  [{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [\"Python\" ]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ ]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }]},"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Elle\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"Jothi\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"22/03/2019\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Elle\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [],"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"employees\" : [{"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ ]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"George Best\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"4th street\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ ]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }]},"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Fiona\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"SOC\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"01/01/2020\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Fiona\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"employees\" :  [{"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"George Best\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"4th street\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ ]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ \"Python\", \"Java\" ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    } ]},"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project George\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"FASS\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"11/02/2021\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for George\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [],"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"employees\" :  [{"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ \"Python\", \"Java\" ]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ \"CSS\", \"HTML\", \"Java\" ]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }]}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dehui333"
        },
        "content": "]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dehui333": 156,
      "shunnizuka": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializablePocketProjectTest/invalidEmployeePocketProject.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ditan96"
        },
        "content": "  \"employees\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  } ],\"projects\" : [ ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "dehui333": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializablePocketProjectTest/invalidProjectPocketProject.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Employee values as in TypicalEmployees#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  \"employees\": [ ], \"projects\" : ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Alice\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"Dehui\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"11/02/2019\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Alice\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [{\"milestone\" : \"The project starts\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"date\" :  \"11/11/2011\"},"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      {\"milestone\" :  \"The project completes\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        \"date\" :  \"12/12/2012\"}],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"employees\" :  [{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"INVALID\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ \"CSS\", \"HTML\", \"Java\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"wall street\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }]},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Benson\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"Jeff\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"23/01/2011\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Benson\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [{\"milestone\" : \"The project starts\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"date\" :  \"11/11/2011\"},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      {\"milestone\" :  \"The project completes\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        \"date\" :  \"12/12/2012\"}],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"employees\" :  [{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"wall street\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"10th street\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ \"Assembly\" ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }]},"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Carl\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"Darryl\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"12/12/2012\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Carl\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"employees\" :  [{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"10th street\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ \"Assembly\" ]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ \"Python\"]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }]},"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Daniel\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"Shune\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"21/12/2012\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Daniel\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"employees\" :  [{"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [\"Python\" ]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ ]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }]},"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Elle\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"Jothi\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"22/03/2019\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Elle\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"employees\" : [{"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ ]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"George Best\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"4th street\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ ]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }]},"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Fiona\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"SOC\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"01/01/2020\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Fiona\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [],"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"employees\" :  [{"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"George Best\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"4th street\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ ]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [\"Python\", \"Java\" ]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    } ]},"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project George\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"FASS\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"11/02/2021\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for George\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [],"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"employees\" :  [{"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ \"Python\", \"Java\"]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"skills\" : [ \"CSS\", \"HTML\", \"Java\" ]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }]}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dehui333"
        },
        "content": "]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dehui333": 132,
      "shunnizuka": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializablePocketProjectTest/typicalPocketProject.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ditan96"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Employee values as in TypicalEmployees#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ditan96"
        },
        "content": "  \"employees\": [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"skills\" : [ \"Python\", \"Java\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"skills\" : [ \"CSS\", \"HTML\", \"Java\" ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    \"skills\" : [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    \"skills\" : [ \"Assembly\" ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"skills\" : [\"Python\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    \"skills\" : [ ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    \"skills\" : [ ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  } ], \"projects\" : ["
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Alice\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "   \"client\" :  \"Dehui\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "   \"deadline\" :  \"11/02/2019\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Alice\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "   \"milestones\" :  ["
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     {\"milestone\" : \"The project starts\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     \"date\" :  \"11/11/2011\"},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     {\"milestone\" :  \"The project completes\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     \"date\" :  \"12/12/2012\"}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "   ],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  \"employees\" :  [{"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\" : [ \"CSS\", \"HTML\", \"Java\" ]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\" : [ ]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  }]},"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Benson\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"Jeff\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"23/01/2011\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Benson\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [{\"milestone\" : \"The project starts\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      \"date\" :  \"11/11/2011\"},"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dehui333"
        },
        "content": "      {\"milestone\" :  \"The project completes\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        \"date\" :  \"12/12/2012\"}],"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  \"employees\" :  [{"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\" : [ ]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\" : [ \"Assembly\" ]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  }]},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Carl\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"Darryl\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"12/12/2012\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Carl\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [],"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  \"employees\" :  [{"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\" : [ \"Assembly\" ]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\" : [ \"Python\"]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  }]},"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Daniel\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"Shune\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"21/12/2012\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Daniel\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [],"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  \"employees\" :  [{"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\" : [ \"Python\"]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\" : [ ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  }]},"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Elle\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"Jothi\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"22/03/2019\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Elle\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [],"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  \"employees\" : [{"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\" : [ ]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\" : [ ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  }]},"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project Fiona\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"SOC\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"01/01/2020\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for Fiona\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [],"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  \"employees\" :  [{"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\" : [ ]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\" : [ \"Python\", \"Java\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  } ]},"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  {\"projectName\" :  \"Project George\","
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"client\" :  \"FASS\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"deadline\" :  \"11/02/2021\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    \"description\" : \"An application for George\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"milestones\" :  [],"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  \"employees\" :  [{"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\" : [ \"Python\", \"Java\" ]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    \"skills\" : [\"CSS\", \"HTML\", \"Java\" ]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dehui333"
        },
        "content": "  }]}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dehui333"
        },
        "content": "]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ditan96": 6,
      "dehui333": 132,
      "-": 36,
      "shunnizuka": 10
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ditan96"
        },
        "content": "  \"pocketProjectFilePath\" : \"pocketproject.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "  \"pocketProjectFilePath\" : \"pocketproject.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/EmployeeCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Provides a handle to a employee card in the employee list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class EmployeeCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final String SKILLS_FIELD_ID \u003d \"#skills\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final List\u003cLabel\u003e skillLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Region skillsContainer \u003d getChildNode(SKILLS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        skillLabels \u003d skillsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public List\u003cString\u003e getSkills() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return skillLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns true if this handle contains {@code employee}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public boolean equals(Employee employee) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return getName().equals(employee.getName().fullName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                \u0026\u0026 getAddress().equals(employee.getAddress().value)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                \u0026\u0026 getPhone().equals(employee.getPhone().value)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                \u0026\u0026 getEmail().equals(employee.getEmail().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getSkills()).equals(ImmutableMultiset.copyOf(employee.getSkills().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                        .map(skill -\u003e skill.skillName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 10,
      "jeffgan96": 8,
      "-": 69
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/EmployeeListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * Provides a handle for {@code EmployeeListPanel} containing the list of {@code EmployeeCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class EmployeeListPanelHandle extends NodeHandle\u003cListView\u003cEmployee\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final String EMPLOYEE_LIST_VIEW_ID \u003d \"#employeeListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Optional\u003cEmployee\u003e lastRememberedSelectedEmployeeCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeListPanelHandle(ListView\u003cEmployee\u003e employeeListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        super(employeeListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns a handle to the selected {@code EmployeeCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cEmployee\u003e selectedEmployeeList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        if (selectedEmployeeList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new AssertionError(\"Employee list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                .map(EmployeeCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedEmployeeList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cEmployee\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Navigates the listview to display {@code employee}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void navigateToCard(Employee employee) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        if (!getRootNode().getItems().contains(employee)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new IllegalArgumentException(\"Employee does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            getRootNode().scrollTo(employee);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Selects the {@code EmployeeCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns the employee card handle of a employee associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeCardHandle getEmployeeCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                .map(EmployeeCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                .filter(handle -\u003e handle.equals(getEmployee(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Employee getEmployee(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Remembers the selected {@code EmployeeCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void rememberSelectedEmployeeCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cEmployee\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            lastRememberedSelectedEmployeeCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            lastRememberedSelectedEmployeeCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns true if the selected {@code EmployeeCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code rememberSelectedEmployeeCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public boolean isSelectedEmployeeCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cEmployee\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            return lastRememberedSelectedEmployeeCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            return !lastRememberedSelectedEmployeeCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                    || !lastRememberedSelectedEmployeeCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 24,
      "jeffgan96": 14,
      "-": 121
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final EmployeeListPanelHandle employeeListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private final ProjectListPanelHandle projectListPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        employeeListPanel \u003d new EmployeeListPanelHandle(getChildNode(EmployeeListPanelHandle.EMPLOYEE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        projectListPanel \u003d new ProjectListPanelHandle(getChildNode(ProjectListPanelHandle.PROJECT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeListPanelHandle getEmployeeListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return employeeListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public ProjectListPanelHandle getProjectListPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return projectListPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 4,
      "-": 43,
      "shunnizuka": 4
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ProjectCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Provides a handle to a project card in the project list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ProjectCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final String PROJECTNAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final String CLIENT_FIELD_ID \u003d \"#client\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final String DEADLINE_FIELD_ID \u003d \"#deadline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private final Label projectNameLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private final Label clientLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private final Label deadlineLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ProjectCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        projectNameLabel \u003d getChildNode(PROJECTNAME_FIELD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        clientLabel \u003d getChildNode(CLIENT_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        deadlineLabel \u003d getChildNode(DEADLINE_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public String getProjectName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return projectNameLabel.getText();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public String getClient() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return clientLabel.getText();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return deadlineLabel.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns true if this handle contains {@code project}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public boolean equals(Project project) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return getProjectName().equals(project.getProjectName().projectName)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                \u0026\u0026 getClient().equals(project.getClient().client)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                \u0026\u0026 getDeadline().equals(project.getDeadline().deadline);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 55
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ProjectListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Provides a handle for {@code ProjectListPanel} containing the list of {@code ProjectCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ProjectListPanelHandle extends NodeHandle\u003cListView\u003cProject\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final String PROJECT_LIST_VIEW_ID \u003d \"#projectListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Optional\u003cProject\u003e lastRememberedSelectedProjectCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ProjectListPanelHandle(ListView\u003cProject\u003e projectListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        super(projectListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns a handle to the selected {@code ProjectCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ProjectCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cProject\u003e selectedProjectList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        if (selectedProjectList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new AssertionError(\"Project list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                .map(ProjectCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedProjectList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cProject\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Navigates the listview to display {@code project}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void navigateToCard(Project project) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        if (!getRootNode().getItems().contains(project)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new IllegalArgumentException(\"Project does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            getRootNode().scrollTo(project);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Selects the {@code ProjectCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns the project card handle of a project associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ProjectCardHandle getProjectCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                .map(ProjectCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                .filter(handle -\u003e handle.equals(getProject(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Project getProject(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Remembers the selected {@code ProjectCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void rememberSelectedProjectCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cProject\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            lastRememberedSelectedProjectCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            lastRememberedSelectedProjectCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns true if the selected {@code ProjectCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * {@code rememberSelectedProjectCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public boolean isSelectedProjectCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cProject\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            return lastRememberedSelectedProjectCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            return !lastRememberedSelectedProjectCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                    || !lastRememberedSelectedProjectCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 39,
      "-": 121
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/WebViewUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods for dealing with {@code WebView}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class WebViewUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page in the {@code webView}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static URL getLoadedUrl(WebView webView) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            return new URL(webView.getEngine().getLocation());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"webView should not be displaying an invalid URL.\", mue);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 1,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.storage.JsonPocketProjectStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    protected Supplier\u003cReadOnlyPocketProject\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyPocketProject\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            JsonPocketProjectStorage jsonPocketProjectStorage \u003d new JsonPocketProjectStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                jsonPocketProjectStorage.savePocketProject(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        userPrefs.setPocketProjectFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns a defensive copy of the pocket project data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public PocketProject readStoragePocketProject() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            return new PocketProject(storage.readPocketProject().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            throw new AssertionError(\"Data is not in the PocketProject format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return storage.getPocketProjectFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Model copy \u003d new ModelManager((model.getPocketProject()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredEmployeeList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Returns a defensive copy of the model with project list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public Model getProjectModel() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Model copy \u003d new ModelManager((model.getPocketProject()), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        ModelHelper.setProjectFilteredList(copy, model.getFilteredProjectList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 15,
      "-": 97,
      "jothipillay": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/PocketProjectIcon.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddEmployeeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ListEmployeeCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ListProjectCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.storage.JsonPocketProjectStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EmployeeBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonPocketProjectStorage addressBookStorage \u003d new JsonPocketProjectStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        String deleteCommand \u003d \"delete employee 9\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    //TODO: remove the assert for history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        String listEmployeeCommand \u003d ListCommand.COMMAND_WORD + \" \" + ListEmployeeCommand.LIST_EMPLOYEE_KEYWORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandSuccess(listEmployeeCommand, ListEmployeeCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        //assertHistoryCorrect(listEmployeeCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        String listProjectCommand \u003d ListCommand.COMMAND_WORD + \" \" + ListProjectCommand.LIST_PROJECT_KEYWORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandSuccess(listProjectCommand, ListProjectCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        //assertHistoryCorrect(listProjectCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // Setup LogicManager with JsonPocketProjectIoExceptionThrowingStub"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonPocketProjectStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new JsonPocketProjectIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String addCommand \u003d AddEmployeeCommand.COMMAND_WORD + \" \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee expectedEmployee \u003d new EmployeeBuilder(AMY).withSkills().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.addEmployee(expectedEmployee);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void getFilteredEmployeeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        logic.getFilteredEmployeeList().remove(0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.VIEW_EMPLOYEE_KEYWORD should\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                    + \"succeed.\", e);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static class JsonPocketProjectIoExceptionThrowingStub extends JsonPocketProjectStorage {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        private JsonPocketProjectIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void savePocketProject(ReadOnlyPocketProject pocketProject, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 19,
      "jeffgan96": 13,
      "dehui333": 1,
      "-": 160,
      "jothipillay": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.getTypicalPocketProjectWithEmployees;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EmployeeBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void execute_newEmployee_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee validEmployee \u003d new EmployeeBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.addEmployee(validEmployee);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(new AddEmployeeCommand(validEmployee), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                String.format(AddEmployeeCommand.MESSAGE_ADD_EMPLOYEE_SUCCESS, validEmployee), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void execute_duplicateEmployee_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employeeInList \u003d model.getPocketProject().getEmployeeList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(new AddEmployeeCommand(employeeInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                AddEmployeeCommand.MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 10,
      "jeffgan96": 1,
      "-": 34,
      "jothipillay": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEmployeeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.testutil.EmployeeBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class AddEmployeeCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void constructor_nullEmployee_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        new AddEmployeeCommand(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void execute_employeeAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ModelStubAcceptingEmployeeAdded modelStub \u003d new ModelStubAcceptingEmployeeAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee validEmployee \u003d new EmployeeBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        CommandResult commandResult \u003d new AddEmployeeCommand(validEmployee).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertEquals(String.format(AddEmployeeCommand.MESSAGE_ADD_EMPLOYEE_SUCCESS, validEmployee),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(Arrays.asList(validEmployee), modelStub.employeesAdded);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void execute_duplicateEmployee_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee validEmployee \u003d new EmployeeBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddEmployeeCommand addEmployeeCommand \u003d new AddEmployeeCommand(validEmployee);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEmployee(validEmployee);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        thrown.expectMessage(AddEmployeeCommand.MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        addEmployeeCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee alice \u003d new EmployeeBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee bob \u003d new EmployeeBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddEmployeeCommand addAliceCommand \u003d new AddEmployeeCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddEmployeeCommand addBobCommand \u003d new AddEmployeeCommand(bob);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddEmployeeCommand addAliceCommandCopy \u003d new AddEmployeeCommand(alice);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public Path getPocketProjectFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void setPocketProjectFilePath(Path pocketProjectFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void setPocketProject(ReadOnlyPocketProject pocketProject) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        public ObservableList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public ReadOnlyPocketProject getPocketProject() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        //---------------- Methods related to employee class --------------------------------------"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        public void addEmployee(Employee employee) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public boolean hasEmployee(Employee employee) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void deleteEmployee(Employee target) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void setEmployee(Employee target, Employee editedEmployee) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        public void setProject(Project target, Project editProject) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public ObservableList\u003cEmployee\u003e getFilteredEmployeeList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void updateFilteredEmployeeList(Predicate\u003cEmployee\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        //----------------------------methods related to project class ----------------------------------------"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        public void addProject(Project project) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        public void deleteProject(Project target) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        public Project getProjectWithName(ProjectName projectName) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        public void removeEmployeeFrom(Project targetProject, Employee targetEmployee) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new AssertionError((\"This method should not be called.\"));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        public void removeMilestoneFrom(Project targetProject, Milestone targetMilestone) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public void addEmployeeTo(Project targetProject, Employee targetEmployee) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public void addMilestoneTo(Project targetProject, Milestone targetMilestone) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        public List\u003cProject\u003e getProjectsContaining(Employee employee) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        //--------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public boolean canUndoPocketProject() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public boolean canRedoPocketProject() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void undoPocketProject() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void redoPocketProject() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void commitPocketProject() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public ReadOnlyProperty\u003cEmployee\u003e selectedEmployeeProperty() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public Employee getSelectedEmployee() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void setSelectedEmployee(Employee employee) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        public ReadOnlyProperty\u003cProject\u003e selectedProjectProperty() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        public Project getSelectedProject() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        public void setSelectedProject(Project project) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * A Model stub that contains a single employee."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private class ModelStubWithEmployee extends ModelStub {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        private final Employee employee;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ModelStubWithEmployee(Employee employee) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            requireNonNull(employee);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            this.employee \u003d employee;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public boolean hasEmployee(Employee employee) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            requireNonNull(employee);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            return this.employee.isSameEmployee(employee);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * A Model stub that always accept the employee being added."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private class ModelStubAcceptingEmployeeAdded extends ModelStub {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        final ArrayList\u003cEmployee\u003e employeesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public boolean hasEmployee(Employee employee) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            requireNonNull(employee);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            return employeesAdded.stream().anyMatch(employee::isSameEmployee);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void addEmployee(Employee employee) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            requireNonNull(employee);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            employeesAdded.add(employee);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void commitPocketProject() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public ReadOnlyPocketProject getPocketProject() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            return new PocketProject();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 42,
      "jeffgan96": 57,
      "dehui333": 29,
      "-": 189,
      "jothipillay": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEmployeeToCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.testutil.TypicalProjects;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * {@code AddEmployeeToCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class AddEmployeeToCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private Model model \u003d new ModelManager(TestUtil.typicalPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    //TODO"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void execute_validProjectNameValidIndex_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Project targetProject \u003d model.getProjectWithName(TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(model.getFilteredEmployeeList().size() - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddEmployeeToCommand addEmployeeToCommand \u003d new AddEmployeeToCommand(validIndex,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                targetProject.getProjectName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Employee targetEmployee \u003d model.getFilteredEmployeeList().get(validIndex.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String expectedMessage \u003d String.format(AddEmployeeToCommand.MESSAGE_ADDTOPROJECT_EMPLOYEE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                targetEmployee, targetProject.getProjectName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        expectedModel.addEmployeeTo(targetProject, targetEmployee);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(addEmployeeToCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void execute_invalidProjName_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddEmployeeToCommand addEmployeeToCommand \u003d new AddEmployeeToCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                new ProjectName(\"INVALID\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(addEmployeeToCommand, model, commandHistory,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                Messages.MESSAGE_INVALID_PROJECT_NAME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void execute_invalidIndexValidProjectName_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Project targetProject \u003d model.getProjectWithName(TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEmployeeList().size() + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddEmployeeToCommand addEmployeeToCommand \u003d new AddEmployeeToCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                targetProject.getProjectName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(addEmployeeToCommand, model, commandHistory,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddEmployeeToCommand addEmployeeToCommandOne \u003d new AddEmployeeToCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddEmployeeToCommand addEmployeeToCommandTwo \u003d new AddEmployeeToCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                TypicalProjects.PROJECT_BENSON.getProjectName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertTrue(addEmployeeToCommandOne.equals(addEmployeeToCommandOne));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddEmployeeToCommand addEmployeeToCommandOneCopy \u003d new AddEmployeeToCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertTrue(addEmployeeToCommandOne.equals(addEmployeeToCommandOneCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertFalse(addEmployeeToCommandOneCopy.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertFalse(addEmployeeToCommandOneCopy.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // different projects -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertFalse(addEmployeeToCommandOneCopy.equals(addEmployeeToCommandTwo));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // different indices -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddEmployeeToCommand addEmployeeToCommandThree \u003d new AddEmployeeToCommand(Index.fromOneBased(2),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertFalse(addEmployeeToCommandOne.equals(addEmployeeToCommandThree));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jothipillay": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddMilestoneToCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.testutil.TypicalProjects;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * Contains unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * {@code RemoveMilestoneFromCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class AddMilestoneToCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private Model model \u003d new ModelManager(TestUtil.typicalPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void execute_validProjectNameValidIndex_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Project targetProject \u003d model.getProjectWithName(TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Milestone milestone \u003d new Milestone(\"Completed UG\", \"05/05/2020\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddMilestoneToCommand addMilestoneToCommand \u003d new AddMilestoneToCommand(targetProject.getProjectName(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            milestone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String expectedMessage \u003d String.format(AddMilestoneToCommand.MESSAGE_ADD_MILESTONE_SUCCESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                milestone, targetProject.getProjectName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        expectedModel.addMilestoneTo(targetProject, milestone);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(addMilestoneToCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void execute_invalidProjectName_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddMilestoneToCommand addMilestoneToCommand \u003d new AddMilestoneToCommand(new ProjectName(\"INVALID\"), new"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            Milestone(\"Updated UG\", \"23/06/2019\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(addMilestoneToCommand, model, commandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                Messages.MESSAGE_INVALID_PROJECT_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddMilestoneToCommand addMilestoneToCommandOne \u003d new AddMilestoneToCommand(TypicalProjects"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            .PROJECT_ALICE.getProjectName(), new Milestone(\"Completed\", \"22/05/2019\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddMilestoneToCommand addMilestoneToCommandTwo \u003d new AddMilestoneToCommand(TypicalProjects"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            .PROJECT_BENSON.getProjectName(), new Milestone(\"Completed\", \"30/11/2019\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertTrue(addMilestoneToCommandOne.equals(addMilestoneToCommandOne));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddMilestoneToCommand addMilestoneToCommandOneCopy \u003d new AddMilestoneToCommand((TypicalProjects"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            .PROJECT_ALICE.getProjectName()), new Milestone(\"Completed\", \"22/05/2019\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertTrue(addMilestoneToCommandOne.equals(addMilestoneToCommandOneCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertFalse(addMilestoneToCommandOne.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertFalse(addMilestoneToCommandOne.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // different projects -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertFalse(addMilestoneToCommandOne.equals(addMilestoneToCommandTwo));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // different dates -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddMilestoneToCommand addMilestoneToCommandThree \u003d new AddMilestoneToCommand(TypicalProjects"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            .PROJECT_ALICE.getProjectName(), new Milestone(\"Completed\", \"23/05/2019\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertFalse(addMilestoneToCommandOne.equals(addMilestoneToCommandThree));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //different description -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddMilestoneToCommand addMilestoneToCommandFour \u003d new AddMilestoneToCommand(TypicalProjects"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            .PROJECT_ALICE.getProjectName(), new Milestone(\"Completed all\", \"22/05/2019\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertFalse(addMilestoneToCommandOne.equals(addMilestoneToCommandFour));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jothipillay": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddProjectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class AddProjectCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void constructor_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        new AddProjectCommand(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void execute_projectAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        ModelStubAcceptingProjectAdded modelStub \u003d new ModelStubAcceptingProjectAdded();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Project validProject \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        CommandResult commandResult \u003d new AddProjectCommand(validProject).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertEquals(String.format(AddProjectCommand.MESSAGE_ADD_PROJECT_SUCCESS, validProject),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertEquals(Arrays.asList(validProject), modelStub.projectsAdded);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void execute_duplicateProject_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Project validProject \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddProjectCommand addProjectCommand \u003d new AddProjectCommand(validProject);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithProject(validProject);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        thrown.expectMessage(AddProjectCommand.MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        addProjectCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Project alice \u003d PROJECT_ALICE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Project benson \u003d PROJECT_BENSON;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddProjectCommand addAliceCommand \u003d new AddProjectCommand(alice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddProjectCommand addBensonCommand \u003d new AddProjectCommand(benson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddProjectCommand addAliceCommandCopy \u003d new AddProjectCommand(alice);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBensonCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public Path getPocketProjectFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void setPocketProjectFilePath(Path pocketProjectFilePath) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void setPocketProject(ReadOnlyPocketProject pocketProject) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public ObservableList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public ReadOnlyPocketProject getPocketProject() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //---------------- Methods related to employee class --------------------------------------"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public void addEmployee(Employee employee) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public boolean hasEmployee(Employee employee) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public void deleteEmployee(Employee target) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public void setEmployee(Employee target, Employee editedEmployee) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public ObservableList\u003cEmployee\u003e getFilteredEmployeeList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public void updateFilteredEmployeeList(Predicate\u003cEmployee\u003e predicate) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //----------------------------methods related to project class ----------------------------------------"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public void addProject(Project project) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public void deleteProject(Project target) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        public Project getProjectWithName(ProjectName projectName) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        public void removeEmployeeFrom(Project targetProject, Employee targetEmployee) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        public void removeMilestoneFrom(Project targetProject, Milestone targetMilestone) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public void addEmployeeTo(Project targetProject, Employee targetEmployee) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public void addMilestoneTo(Project targetProject, Milestone targetMilestone) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        public List\u003cProject\u003e getProjectsContaining(Employee employee) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //--------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public boolean canUndoPocketProject() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public boolean canRedoPocketProject() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void undoPocketProject() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void redoPocketProject() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void commitPocketProject() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public ReadOnlyProperty\u003cEmployee\u003e selectedEmployeeProperty() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public Employee getSelectedEmployee() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public void setSelectedEmployee(Employee employee) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        public ReadOnlyProperty\u003cProject\u003e selectedProjectProperty() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        public Project getSelectedProject() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        public void setSelectedProject(Project project) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * A Model stub that contains a single project."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private class ModelStubWithProject extends AddProjectCommandTest.ModelStub {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        private final Project project;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        ModelStubWithProject(Project project) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            requireNonNull(project);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            this.project \u003d project;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            requireNonNull(project);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            return this.project.isSameProject(project);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * A Model stub that always accept the employee being added."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private class ModelStubAcceptingProjectAdded extends AddProjectCommandTest.ModelStub {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        final ArrayList\u003cProject\u003e projectsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            requireNonNull(project);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            return projectsAdded.stream().anyMatch(project::isSameProject);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        public void addProject(Project project) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            requireNonNull(project);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            projectsAdded.add(project);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public void commitPocketProject() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public ReadOnlyPocketProject getPocketProject() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            return new PocketProject();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 14,
      "jeffgan96": 15,
      "dehui333": 25,
      "jothipillay": 286
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.getTypicalPocketProjectWithEmployees;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void execute_emptyPocketProject_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void execute_nonEmptyPocketProject_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.setPocketProject(new PocketProject());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 9,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.employee.EmployeeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.ProjectNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EditEmployeeDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final String VALID_SKILL_JAVA \u003d \"Java\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final String VALID_SKILL_C \u003d \"Python\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String VALID_PROJECT_NAME_AMY \u003d \"Project Amy\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String VALID_PROJECT_NAME_BOB \u003d \"Project Bob\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String VALID_PROJECT_NAME_ALICE \u003d \"Project Alice\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String VALID_PROJECT_NAME_ZULU \u003d \"Zulu\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String VALID_CLIENT_AMY \u003d \"SOC\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String VALID_CLIENT_BOB \u003d \"FOS\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String VALID_CLIENT_ALICE \u003d \"Dehui\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String VALID_CLIENT_ZULU \u003d \"Shunnizuka\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String VALID_DEADLINE_AMY \u003d \"11/11/2011\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String VALID_DEADLINE_BOB \u003d \"12/12/2012\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String VALID_DEADLINE_ALICE \u003d \"11/02/2019\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String VALID_DEADLINE_ZULU \u003d \"04/09/2023\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String NAME_DESC_ALICE \u003d \" \" + PREFIX_NAME + VALID_PROJECT_NAME_ALICE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String NAME_DESC_ZULU \u003d \" \" + PREFIX_NAME + VALID_PROJECT_NAME_ZULU;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String CLIENT_DESC_ALICE \u003d \" \" + PREFIX_CLIENT + VALID_CLIENT_ALICE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String CLIENT_DESC_ZULU \u003d \" \" + PREFIX_CLIENT + VALID_CLIENT_ZULU;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String DEADLINE_DESC_ALICE \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_ALICE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String DEADLINE_DESC_ZULU \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_ZULU;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final String SKILL_DESC_C \u003d \" \" + PREFIX_SKILL + VALID_SKILL_C;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final String SKILL_DESC_JAVA \u003d \" \" + PREFIX_SKILL + VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final String INVALID_SKILL_DESC \u003d \" \" + PREFIX_SKILL + \"Java*\"; // \u0027*\u0027 not allowed in skills"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String INVALID_PROJECT_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Alice##\"; // \u0027#\u0027 not allowed in names"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String INVALID_CLIENT_DESC \u003d \" \" + PREFIX_CLIENT + \"Apollo#\u0026\"; // \u0027#\u0027 not allowed in client"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE + \"222/11/2019\"; // Format: DD/MM/YYYY"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final EditCommand.EditEmployeeDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final EditCommand.EditEmployeeDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        DESC_AMY \u003d new EditEmployeeDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                .withSkills(VALID_SKILL_C).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        DESC_BOB \u003d new EditEmployeeDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                .withSkills(VALID_SKILL_JAVA, VALID_SKILL_C).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * - the address book, filtered employee list and selected employee in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        PocketProject expectedPocketProject \u003d new PocketProject(actualModel.getPocketProject());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        List\u003cEmployee\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredEmployeeList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee expectedSelectedEmployee \u003d actualModel.getSelectedEmployee();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            assertEquals(expectedPocketProject, actualModel.getPocketProject());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredEmployeeList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            assertEquals(expectedSelectedEmployee, actualModel.getSelectedEmployee());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the employee at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * {@code model}\u0027s employee list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static void showEmployeeAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEmployeeList().size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employee \u003d model.getFilteredEmployeeList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        final String[] splitName \u003d employee.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        model.updateFilteredEmployeeList(new EmployeeNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(1, model.getFilteredEmployeeList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the project at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * {@code model}\u0027s project list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static void showProjectAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredProjectList().size());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Project project \u003d model.getFilteredProjectList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        final String[] splitName \u003d project.getProjectName().projectName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        model.updateFilteredProjectList(new ProjectNameContainsKeywordsPredicate(Arrays.asList(splitName[1])));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(1, model.getFilteredProjectList().size());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Deletes the first employee in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static void deleteFirstEmployee(Model model) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee firstEmployee \u003d model.getFilteredEmployeeList().get(0);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.deleteEmployee(firstEmployee);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.commitPocketProject();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 28,
      "jeffgan96": 17,
      "dehui333": 6,
      "-": 124,
      "shunnizuka": 2,
      "jothipillay": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteEmployeeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEmployeeAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.getTypicalPocketProjectWithEmployees;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EMPLOYEE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * {@code DeleteEmployeeCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class DeleteEmployeeCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employeeToDelete \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteEmployeeCommand deleteEmployeeCommand \u003d new DeleteEmployeeCommand(INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteEmployeeCommand.MESSAGE_DELETE_EMPLOYEE_SUCCESS, employeeToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.deleteEmployee(employeeToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandSuccess(deleteEmployeeCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEmployeeList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteEmployeeCommand deleteEmployeeCommand \u003d new DeleteEmployeeCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandFailure(deleteEmployeeCommand, model, commandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employeeToDelete \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteEmployeeCommand deleteEmployeeCommand \u003d new DeleteEmployeeCommand(INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteEmployeeCommand.MESSAGE_DELETE_EMPLOYEE_SUCCESS, employeeToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.deleteEmployee(employeeToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showNoEmployee(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandSuccess(deleteEmployeeCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EMPLOYEE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPocketProject().getEmployeeList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteEmployeeCommand deleteEmployeeCommand \u003d new DeleteEmployeeCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandFailure(deleteEmployeeCommand, model, commandHistory,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employeeToDelete \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteEmployeeCommand deleteEmployeeCommand \u003d new DeleteEmployeeCommand(INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.deleteEmployee(employeeToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // delete -\u003e first employee deleted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        deleteEmployeeCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered employee list to show all employees"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.undoPocketProject();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // redo -\u003e same first employee deleted again"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.redoPocketProject();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEmployeeList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteEmployeeCommand deleteEmployeeCommand \u003d new DeleteEmployeeCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandFailure(deleteEmployeeCommand, model, commandHistory,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * 1. Deletes a {@code Employee} from a filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted employee in the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the employee object regardless of indexing."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameEmployeeDeleted() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteEmployeeCommand deleteEmployeeCommand \u003d new DeleteEmployeeCommand(INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeeAtIndex(model, INDEX_SECOND_EMPLOYEE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employeeToDelete \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.deleteEmployee(employeeToDelete);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // delete -\u003e deletes second employee in unfiltered employee list / first employee in filtered employee list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        deleteEmployeeCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.undoPocketProject();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertNotEquals(employeeToDelete, model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // redo -\u003e deletes same second employee in unfiltered employee list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.redoPocketProject();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteEmployeeCommand deleteFirstCommand \u003d new DeleteEmployeeCommand(INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteEmployeeCommand deleteSecondCommand \u003d new DeleteEmployeeCommand(INDEX_SECOND_EMPLOYEE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteEmployeeCommand deleteFirstCommandCopy \u003d new DeleteEmployeeCommand(INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private void showNoEmployee(Model model) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.updateFilteredEmployeeList(p -\u003e false);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(model.getFilteredEmployeeList().isEmpty());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 39,
      "jeffgan96": 9,
      "dehui333": 24,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteProjectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalPocketProjectWithProjects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.testutil.TypicalProjectNames;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.testutil.TypicalProjects;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * {@code DeleteProjectCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class DeleteProjectCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPocketProjectWithProjects(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Project projectToDelete \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteProjectCommand deleteProjectCommand \u003d new DeleteProjectCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteProjectCommand.MESSAGE_DELETE_PROJECT_SUCCESS, projectToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        expectedModel.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandSuccess(deleteProjectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredProjectList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteProjectCommand deleteProjectCommand \u003d new DeleteProjectCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandFailure(deleteProjectCommand, model, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void execute_validName_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Project projectToDelete \u003d model.getProjectList().get(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteProjectCommand deleteProjectCommand \u003d new DeleteProjectCommand(projectToDelete.getProjectName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteProjectCommand.MESSAGE_DELETE_PROJECT_SUCCESS, projectToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        expectedModel.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandSuccess(deleteProjectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void execute_invalidName_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteProjectCommand deleteProjectCommand \u003d new DeleteProjectCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            TypicalProjectNames.NON_EXISTENT_PROJECT_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandFailure(deleteProjectCommand, model, commandHistory,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            Messages.MESSAGE_INVALID_PROJECT_NAME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void executeUndoRedo_validName_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Project projectToDelete \u003d model.getProjectList().get(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteProjectCommand deleteProjectCommand \u003d new DeleteProjectCommand(projectToDelete.getProjectName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        expectedModel.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // delete -\u003e first project deleted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        deleteProjectCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered project list to show all projects"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.undoPocketProject();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // redo -\u003e same first project deleted again"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.redoPocketProject();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteProjectCommand deleteProjectCommand \u003d new DeleteProjectCommand("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            TypicalProjectNames.NON_EXISTENT_PROJECT_NAME);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandFailure(deleteProjectCommand, model, commandHistory,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            Messages.MESSAGE_INVALID_PROJECT_NAME);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteProjectCommand deleteAliceCommand \u003d new DeleteProjectCommand("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteProjectCommand deleteBensonCommand \u003d new DeleteProjectCommand("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            TypicalProjects.PROJECT_BENSON.getProjectName());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertTrue(deleteAliceCommand.equals(deleteAliceCommand));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        DeleteProjectCommand deleteAliceCommandCopy \u003d new DeleteProjectCommand("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertTrue(deleteAliceCommand.equals(deleteAliceCommandCopy));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertFalse(deleteAliceCommand.equals(1));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertFalse(deleteAliceCommand.equals(null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertFalse(deleteAliceCommand.equals(deleteBensonCommand));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private void showNoProject(Model model) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        model.updateFilteredProjectList(p -\u003e false);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertTrue(model.getFilteredProjectList().isEmpty());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 8,
      "dehui333": 135,
      "shunnizuka": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEmployeeAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.getTypicalPocketProjectWithEmployees;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EMPLOYEE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEmployeeDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EditEmployeeDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EmployeeBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.testutil.PocketProjectBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.testutil.TypicalEmployees;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.testutil.TypicalProjects;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee editedEmployee \u003d new EmployeeBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand.EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder(editedEmployee).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EMPLOYEE, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EMPLOYEE_SUCCESS, editedEmployee);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PocketProject(model.getPocketProject()), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.setEmployee(model.getFilteredEmployeeList().get(0), editedEmployee);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index indexLastEmployee \u003d Index.fromOneBased(model.getFilteredEmployeeList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee lastEmployee \u003d model.getFilteredEmployeeList().get(indexLastEmployee.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EmployeeBuilder employeeInList \u003d new EmployeeBuilder(lastEmployee);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee editedEmployee \u003d employeeInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            .withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastEmployee, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EMPLOYEE_SUCCESS, editedEmployee);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PocketProject(model.getPocketProject()), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.setEmployee(lastEmployee, editedEmployee);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EMPLOYEE, new EditEmployeeDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee editedEmployee \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EMPLOYEE_SUCCESS, editedEmployee);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PocketProject(model.getPocketProject()), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employeeInFilteredList \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee editedEmployee \u003d new EmployeeBuilder(employeeInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EMPLOYEE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            new EditEmployeeDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EMPLOYEE_SUCCESS, editedEmployee);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PocketProject(model.getPocketProject()), new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.setEmployee(model.getFilteredEmployeeList().get(0), editedEmployee);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void execute_duplicateEmployeeUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee firstEmployee \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder(firstEmployee).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_EMPLOYEE, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void execute_duplicateEmployeeFilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // edit employee in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employeeInList \u003d model.getPocketProject().getEmployeeList().get(INDEX_SECOND_EMPLOYEE.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EMPLOYEE,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            new EditEmployeeDescriptorBuilder(employeeInList).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void execute_invalidEmployeeIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEmployeeList().size() + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand.EditEmployeeDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            new EditEmployeeDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void execute_invalidEmployeeIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EMPLOYEE;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPocketProject().getEmployeeList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            new EditEmployeeDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee editedEmployee \u003d new EmployeeBuilder().build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employeeToEdit \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder(editedEmployee).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EMPLOYEE, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PocketProject(model.getPocketProject()), new UserPrefs());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.setEmployee(employeeToEdit, editedEmployee);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // edit -\u003e first employee edited"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered employee list to show all employees"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.undoPocketProject();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // redo -\u003e same first employee edited again"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.redoPocketProject();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEmployeeList().size() + 1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * 1. Edits a {@code Employee} from a filtered list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited employee in the"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the employee object regardless of indexing."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameEmployeeEdited() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee editedEmployee \u003d new EmployeeBuilder().build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand.EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder(editedEmployee).build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EMPLOYEE, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PocketProject(model.getPocketProject()), new UserPrefs());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeeAtIndex(model, INDEX_SECOND_EMPLOYEE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employeeToEdit \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.setEmployee(employeeToEdit, editedEmployee);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // edit -\u003e edits second employee in unfiltered employee list / first employee in filtered employee list"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered employee list to show all employees"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.undoPocketProject();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertNotEquals(model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased()), employeeToEdit);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // redo -\u003e edits same second employee in unfiltered employee list"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.redoPocketProject();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Test if the employees in the projects are updated when editCommand is executed"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public void executeUndoRedo_sameEmployeeinProjectEdited() throws CommandException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        PocketProjectBuilder builder \u003d new PocketProjectBuilder().withProject(TypicalProjects.PROJECT_ALICE)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            .withEmployee(TypicalEmployees.BENSON).withEmployee(TypicalEmployees.CARL);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        model \u003d new ModelManager(builder.build(), new UserPrefs());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        Employee editedEmployee \u003d new EmployeeBuilder().build();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EditCommand.EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder(editedEmployee).build();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EMPLOYEE, descriptor);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertTrue(model.getPocketProject().getProjectList().get(0).getEmployees().get(0)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            .equals(editedEmployee));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        model.undoPocketProject();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertTrue(model.getPocketProject().getProjectList().get(0).getEmployees().get(0)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            .equals(TypicalEmployees.BENSON));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        model.redoPocketProject();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertTrue(model.getPocketProject().getProjectList().get(0).getEmployees().get(0)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            .equals(editedEmployee));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_EMPLOYEE, DESC_AMY);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditEmployeeDescriptor copyDescriptor \u003d new EditEmployeeDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_EMPLOYEE, copyDescriptor);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_EMPLOYEE, DESC_AMY)));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_EMPLOYEE, DESC_BOB)));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 96,
      "jeffgan96": 9,
      "-": 144,
      "shunnizuka": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditEmployeeDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEmployeeDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EditEmployeeDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class EditEmployeeDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditEmployeeDescriptor descriptorWithSameValues \u003d new EditEmployeeDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditEmployeeDescriptor editedAmy \u003d new EditEmployeeDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedAmy \u003d new EditEmployeeDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedAmy \u003d new EditEmployeeDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedAmy \u003d new EditEmployeeDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedAmy \u003d new EditEmployeeDescriptorBuilder(DESC_AMY).withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 9,
      "jeffgan96": 1,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindEmployeeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPLOYEES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.getTypicalPocketProjectWithEmployees;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.employee.EmployeeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindEmployeeCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "public class FindEmployeeCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            new EmployeeNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            new EmployeeNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindEmployeeCommand findFirstCommand \u003d new FindEmployeeCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindEmployeeCommand findSecondCommand \u003d new FindEmployeeCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindEmployeeCommand findFirstCommandCopy \u003d new FindEmployeeCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void execute_zeroKeywords_noEmployeeFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EMPLOYEES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindEmployeeCommand command \u003d new FindEmployeeCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.updateFilteredEmployeeList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredEmployeeList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void execute_multipleKeywords_multipleEmployeesFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EMPLOYEES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindEmployeeCommand command \u003d new FindEmployeeCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.updateFilteredEmployeeList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredEmployeeList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Parses {@code userInput} into a {@code EmployeeNameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private EmployeeNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return new EmployeeNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 15,
      "jeffgan96": 1,
      "-": 52,
      "shunnizuka": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindProjectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PROJECTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalPocketProjectWithProjects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.project.ProjectNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindProjectCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "public class FindProjectCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPocketProjectWithProjects(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPocketProjectWithProjects(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ProjectNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            new ProjectNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ProjectNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            new ProjectNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindProjectCommand findFirstCommand \u003d new FindProjectCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindProjectCommand findSecondCommand \u003d new FindProjectCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindProjectCommand findFirstCommandCopy \u003d new FindProjectCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public void execute_zeroKeywords_noProjectFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ProjectNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindProjectCommand command \u003d new FindProjectCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredProjectList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public void execute_multipleKeywords_multipleProjectsFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ProjectNameContainsKeywordsPredicate predicate \u003d preparePredicate("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                \"Carl Elle fiona\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindProjectCommand command \u003d new FindProjectCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertEquals(Arrays.asList(PROJECT_CARL, PROJECT_ELLE, PROJECT_FIONA), model.getFilteredProjectList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Parses {@code userInput} into a {@code EmployeeNameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private ProjectNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return new ProjectNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 3,
      "jeffgan96": 2,
      "shunnizuka": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindSkillCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPLOYEES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.getTypicalPocketProjectWithEmployees;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.skill.EmployeeSkillContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindEmployeeCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "public class FindSkillCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeSkillContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            new EmployeeSkillContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeSkillContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            new EmployeeSkillContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindSkillCommand findFirstCommand \u003d new FindSkillCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindSkillCommand findSecondCommand \u003d new FindSkillCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindSkillCommand findFirstCommandCopy \u003d new FindSkillCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public void execute_zeroKeywords_noEmployeeFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EMPLOYEES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeSkillContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindSkillCommand command \u003d new FindSkillCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        expectedModel.updateFilteredEmployeeList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredEmployeeList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public void execute_multipleKeywords_multipleEmployeesFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EMPLOYEES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeSkillContainsKeywordsPredicate predicate \u003d preparePredicate(\"assembly python\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindSkillCommand command \u003d new FindSkillCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        expectedModel.updateFilteredEmployeeList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, DANIEL, ELLE), model.getFilteredEmployeeList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Parses {@code userInput} into a {@code EmployeeNameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private EmployeeSkillContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return new EmployeeSkillContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 3,
      "shunnizuka": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        String command3 \u003d \"view 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListEmployeeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEmployeeAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.getTypicalPocketProjectWithEmployees;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListEmployeeCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ListEmployeeCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandSuccess(new ListEmployeeCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                ListEmployeeCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandSuccess(new ListEmployeeCommand(), model, commandHistory, ListEmployeeCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 6,
      "jeffgan96": 6,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListProjectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.getTypicalPocketProjectWithEmployees;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListEmployeeCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ListProjectCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandSuccess(new ListProjectCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                ListProjectCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    //TODO: run test after listener for projects has been added to the UI"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandSuccess(new ListProjectCommand(), model, commandHistory, ListProjectCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 3,
      "jeffgan96": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstEmployee;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.getTypicalPocketProjectWithEmployees;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        deleteFirstEmployee(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        deleteFirstEmployee(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.undoPocketProject();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.undoPocketProject();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        deleteFirstEmployee(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        deleteFirstEmployee(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.undoPocketProject();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.undoPocketProject();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.redoPocketProject();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.redoPocketProject();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 14,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemoveEmployeeFromCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.testutil.TypicalProjects;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * {@code RemoveEmployeeFromCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class RemoveEmployeeFromCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Model model \u003d new ModelManager(TestUtil.typicalPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void execute_validProjectNameValidIndex_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Project targetProject \u003d model.getProjectWithName(TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(targetProject.getEmployees().size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        RemoveEmployeeFromCommand removeEmployeeFromCommand \u003d new RemoveEmployeeFromCommand(validIndex,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                targetProject.getProjectName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Employee targetEmployee \u003d targetProject.getEmployees().get(validIndex.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveEmployeeFromCommand.MESSAGE_REMOVE_EMPLOYEE_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                targetEmployee, targetProject.getProjectName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        expectedModel.removeEmployeeFrom(targetProject, targetEmployee);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandSuccess(removeEmployeeFromCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void execute_invalidProjectName_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        RemoveEmployeeFromCommand removeEmployeeFromCommand \u003d new RemoveEmployeeFromCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                new ProjectName(\"INVALID\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandFailure(removeEmployeeFromCommand, model, commandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                Messages.MESSAGE_INVALID_PROJECT_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void execute_invalidIndexValidProjectName_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Project targetProject \u003d model.getProjectWithName(TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(targetProject.getEmployees().size() + 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        RemoveEmployeeFromCommand removeEmployeeFromCommand \u003d new RemoveEmployeeFromCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                targetProject.getProjectName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandFailure(removeEmployeeFromCommand, model, commandHistory,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        RemoveEmployeeFromCommand removeEmployeeFromCommand1 \u003d new RemoveEmployeeFromCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        RemoveEmployeeFromCommand removeEmployeeFromCommand2 \u003d new RemoveEmployeeFromCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                TypicalProjects.PROJECT_BENSON.getProjectName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertTrue(removeEmployeeFromCommand1.equals(removeEmployeeFromCommand1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        RemoveEmployeeFromCommand removeEmployeeFromCommand1Copy \u003d new RemoveEmployeeFromCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertTrue(removeEmployeeFromCommand1.equals(removeEmployeeFromCommand1Copy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertFalse(removeEmployeeFromCommand1.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertFalse(removeEmployeeFromCommand1.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // different projects -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertFalse(removeEmployeeFromCommand1.equals(removeEmployeeFromCommand2));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // different indices -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        RemoveEmployeeFromCommand removeEmployeeFromCommand3 \u003d new RemoveEmployeeFromCommand(Index.fromOneBased(2),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertFalse(removeEmployeeFromCommand1.equals(removeEmployeeFromCommand3));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ditan96": 3,
      "dehui333": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemoveMilestoneFromCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.testutil.TypicalProjects;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * Contains unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * {@code RemoveMilestoneFromCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class RemoveMilestoneFromCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Model model \u003d new ModelManager(TestUtil.typicalPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void execute_validProjectNameValidIndex_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Project targetProject \u003d model.getProjectWithName(TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(targetProject.getMilestones().size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        RemoveMilestoneFromCommand removeMilestoneFromCommand \u003d new RemoveMilestoneFromCommand(validIndex,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                targetProject.getProjectName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Milestone targetMilestone \u003d targetProject.getMilestones().get(validIndex.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveMilestoneFromCommand.MESSAGE_REMOVE_MILESTONE_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                targetMilestone, targetProject.getProjectName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPocketProject(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        expectedModel.removeMilestoneFrom(targetProject, targetMilestone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.commitPocketProject();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandSuccess(removeMilestoneFromCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void execute_invalidProjectName_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        RemoveMilestoneFromCommand removeMilestoneFromCommand \u003d new RemoveMilestoneFromCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                new ProjectName(\"INVALID\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandFailure(removeMilestoneFromCommand, model, commandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                Messages.MESSAGE_INVALID_PROJECT_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void execute_invalidIndexValidProjectName_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Project targetProject \u003d model.getProjectWithName(TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(targetProject.getMilestones().size() + 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        RemoveMilestoneFromCommand removeMilestoneFromCommand \u003d new RemoveMilestoneFromCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                targetProject.getProjectName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandFailure(removeMilestoneFromCommand, model, commandHistory,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                Messages.MESSAGE_INVALID_MILESTONE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        RemoveMilestoneFromCommand removeMilestoneFromCommand1 \u003d new RemoveMilestoneFromCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        RemoveMilestoneFromCommand removeMilestoneFromCommand2 \u003d new RemoveMilestoneFromCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                TypicalProjects.PROJECT_BENSON.getProjectName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertTrue(removeMilestoneFromCommand1.equals(removeMilestoneFromCommand1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        RemoveMilestoneFromCommand removeMilestoneFromCommand1Copy \u003d new RemoveMilestoneFromCommand(Index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                .fromOneBased(1),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertTrue(removeMilestoneFromCommand1.equals(removeMilestoneFromCommand1Copy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertFalse(removeMilestoneFromCommand1.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertFalse(removeMilestoneFromCommand1.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // different projects -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertFalse(removeMilestoneFromCommand1.equals(removeMilestoneFromCommand2));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        // different indices -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        RemoveMilestoneFromCommand removeMilestoneFromCommand3 \u003d new RemoveMilestoneFromCommand(Index.fromOneBased(2),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertFalse(removeMilestoneFromCommand1.equals(removeMilestoneFromCommand3));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ditan96": 3,
      "dehui333": 92,
      "jothipillay": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstEmployee;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.getTypicalPocketProjectWithEmployees;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        deleteFirstEmployee(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        deleteFirstEmployee(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        deleteFirstEmployee(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        deleteFirstEmployee(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.undoPocketProject();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.undoPocketProject();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 10,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewEmployeeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEmployeeAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.getTypicalPocketProjectWithEmployees;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EMPLOYEE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EMPLOYEE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ViewEmployeeCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ViewEmployeeCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPocketProjectWithEmployees(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredEmployeeList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_EMPLOYEE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredEmployeeList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeeAtIndex(expectedModel, INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeeAtIndex(expectedModel, INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_EMPLOYEE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getPocketProject().getEmployeeList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ViewEmployeeCommand selectFirstCommand \u003d new ViewEmployeeCommand(INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ViewEmployeeCommand selectSecondCommand \u003d new ViewEmployeeCommand(INDEX_SECOND_EMPLOYEE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ViewEmployeeCommand selectFirstCommandCopy \u003d new ViewEmployeeCommand(INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Executes a {@code ViewEmployeeCommand} with the given {@code index},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * and checks that the model\u0027s selected employee is set to the employee at {@code index} in the filtered employee"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ViewEmployeeCommand viewEmployeeCommand \u003d new ViewEmployeeCommand(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        String expectedMessage \u003d String.format(ViewEmployeeCommand.MESSAGE_VIEW_EMPLOYEE_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.setSelectedEmployee(model.getFilteredEmployeeList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandSuccess(viewEmployeeCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Executes a {@code ViewEmployeeCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ViewEmployeeCommand viewEmployeeCommand \u003d new ViewEmployeeCommand(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandFailure(viewEmployeeCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 21,
      "jeffgan96": 15,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewProjectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showProjectAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PROJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalPocketProjectWithProjects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ViewProjectCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ViewProjectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPocketProjectWithProjects(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPocketProjectWithProjects(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredProjectList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PROJECT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredProjectList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        showProjectAtIndex(expectedModel, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        showProjectAtIndex(expectedModel, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getPocketProject().getProjectList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ViewProjectCommand viewFirstCommand \u003d new ViewProjectCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ViewProjectCommand selectSecondCommand \u003d new ViewProjectCommand(INDEX_SECOND_PROJECT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ViewProjectCommand selectFirstCommandCopy \u003d new ViewProjectCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(viewFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(viewFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(viewFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(viewFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Executes a {@code ViewProjectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * and checks that the model\u0027s selected project is set to the project at {@code index} in the filtered projects"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ViewProjectCommand viewProjectCommand \u003d new ViewProjectCommand(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        String expectedMessage \u003d String.format(ViewProjectCommand.MESSAGE_VIEW_PROJECT_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandSuccess(viewProjectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Executes a {@code ViewProjectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ViewProjectCommand viewProjectCommand \u003d new ViewProjectCommand(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandFailure(viewProjectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLIENT_DESC_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLIENT_DESC_ZULU;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_ZULU;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CLIENT_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROJECT_NAME_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SKILL_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ZULU;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_C;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLIENT_ALICE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_ALICE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_ALICE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_C;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_ZULU;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddEmployeeCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddProjectCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Client;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EmployeeBuilder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee expectedEmployee \u003d new EmployeeBuilder(BOB).withSkills(VALID_SKILL_C).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SKILL_DESC_C,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                new AddEmployeeCommand(expectedEmployee));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseSuccess(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_AMY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SKILL_DESC_C,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                new AddEmployeeCommand(expectedEmployee));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseSuccess(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_BOB + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SKILL_DESC_C,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                new AddEmployeeCommand(expectedEmployee));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseSuccess(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + EMAIL_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SKILL_DESC_C,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                new AddEmployeeCommand(expectedEmployee));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseSuccess(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + SKILL_DESC_C,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                new AddEmployeeCommand(expectedEmployee));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee expectedEmployeeMultipleTags \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new EmployeeBuilder(BOB).withSkills(VALID_SKILL_C, VALID_SKILL_JAVA)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseSuccess(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SKILL_DESC_JAVA + SKILL_DESC_C,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                new AddEmployeeCommand(expectedEmployeeMultipleTags));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee expectedEmployee \u003d new EmployeeBuilder(AMY).withSkills().build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseSuccess(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                new AddEmployeeCommand(expectedEmployee));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEmployeeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + \" \" + VALID_NAME_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + \" \" + VALID_NAME_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SKILL_DESC_JAVA + SKILL_DESC_C, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SKILL_DESC_JAVA + SKILL_DESC_C, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB + SKILL_DESC_JAVA"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + SKILL_DESC_C, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + SKILL_DESC_JAVA"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + SKILL_DESC_C, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // invalid skill"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + INVALID_SKILL_DESC + VALID_SKILL_C, Skill.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + \" \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + ADDRESS_DESC_BOB + SKILL_DESC_JAVA + SKILL_DESC_C,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void parse_allFieldsPresentProject_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Project expectedProject \u003d PROJECT_ZULU;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + AddProjectCommand.ADD_PROJECT_KEYWORD"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + NAME_DESC_ZULU + CLIENT_DESC_ZULU + DEADLINE_DESC_ZULU, new AddProjectCommand(expectedProject));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void parse_allFieldPresentRandomlyProject_success() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Project expectedProject \u003d PROJECT_ZULU;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + AddProjectCommand.ADD_PROJECT_KEYWORD"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + CLIENT_DESC_ZULU + DEADLINE_DESC_ZULU + NAME_DESC_ZULU, new AddProjectCommand(expectedProject));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void parse_compulsoryFieldMissingProject_failure() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProjectCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddProjectCommand.ADD_PROJECT_KEYWORD + \" \" + VALID_PROJECT_NAME_ALICE"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                + CLIENT_DESC_ALICE + DEADLINE_DESC_ALICE, expectedMessage);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // missing client prefix"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddProjectCommand.ADD_PROJECT_KEYWORD + NAME_DESC_ALICE"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                + VALID_CLIENT_ALICE + DEADLINE_DESC_ALICE, expectedMessage);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // missing deadline prefix"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddProjectCommand.ADD_PROJECT_KEYWORD + NAME_DESC_ALICE"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                + CLIENT_DESC_ALICE + VALID_DEADLINE_ALICE, expectedMessage);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddProjectCommand.ADD_PROJECT_KEYWORD + \" \" + VALID_PROJECT_NAME_ALICE"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                + VALID_CLIENT_ALICE + VALID_DEADLINE_ALICE, expectedMessage);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void parse_invalidValueProject_failure() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // invalid project name"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddProjectCommand.ADD_PROJECT_KEYWORD + INVALID_PROJECT_NAME_DESC"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + CLIENT_DESC_ALICE + DEADLINE_DESC_ALICE, ProjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // invalid client"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddProjectCommand.ADD_PROJECT_KEYWORD + NAME_DESC_ALICE"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + INVALID_CLIENT_DESC + DEADLINE_DESC_ALICE, Client.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // invalid deadline"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddProjectCommand.ADD_PROJECT_KEYWORD + NAME_DESC_ALICE + CLIENT_DESC_ALICE"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                + INVALID_DEADLINE_DESC, Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, AddProjectCommand.ADD_PROJECT_KEYWORD + INVALID_PROJECT_NAME_DESC"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                + INVALID_CLIENT_DESC + DEADLINE_DESC_ALICE, ProjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + \" \" + AddProjectCommand.ADD_PROJECT_KEYWORD"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                        + NAME_DESC_ALICE + CLIENT_DESC_ALICE + DEADLINE_DESC_ALICE,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 29,
      "jeffgan96": 5,
      "-": 85,
      "jothipillay": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddToCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddEmployeeToCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddMilestoneToCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddToCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class AddToCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private AddToCommandParser parser \u003d new AddToCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void parse_validArgs_returnsAddToCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseSuccess(parser, \"Project Apollo employee 1\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                new AddEmployeeToCommand(Index.fromOneBased(1), new ProjectName(\"Project Apollo\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseSuccess(parser, \"Project X employee 3\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                new AddEmployeeToCommand(Index.fromOneBased(3), new ProjectName(\"Project X\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseSuccess(parser, \"Project Apollo milestone Completed UG 23/04/2019\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                new AddMilestoneToCommand(new ProjectName(\"Project Apollo\"), new Milestone(\"Completed UG\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                    \"23/04/2019\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseSuccess(parser, \"Transformium milestone Completed DG Today 25/09/2019\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                new AddMilestoneToCommand(new ProjectName(\"Transformium\"), new Milestone(\"Completed DG Today\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                        \"25/09/2019\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //wrong format, no keyword"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, \"Project Apollo invalid 1\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //index of employee cannot be 0"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, \"Project Apollo employee 0\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddEmployeeToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //index of employee cannot be non-number"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, \"Project Apollo employee xx\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddEmployeeToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //date should be in the format of DD/MM/YYYY"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, \"Project Apollo milestone Completed 233/04/2019\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddMilestoneToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void parse_missingArgs_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //missing project name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, \"employee 1\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //missing keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, \"Project Apollo 1\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //missing employee index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, \"Project Apollo employee\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //missing date"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, \"Project Apollo milestone Completed\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddMilestoneToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //empty missing description"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertParseFailure(parser, \"Project Apollo milestone 23/04/1996\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddMilestoneToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jothipillay": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        String argsString \u003d \"  some random string /t skill with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.DeleteEmployeeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.DeleteProjectCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertParseSuccess(parser, \"employee 1\", new DeleteEmployeeCommand(INDEX_FIRST_EMPLOYEE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertParseSuccess(parser, \"project 1\", new DeleteProjectCommand(INDEX_FIRST_PROJECT));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertParseSuccess(parser, \"e 1\", new DeleteEmployeeCommand(INDEX_FIRST_EMPLOYEE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertParseSuccess(parser, \"p 1\", new DeleteProjectCommand(INDEX_FIRST_PROJECT));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertParseFailure(parser, \"employee a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                DeleteEmployeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "dehui333": 9,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SKILL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_C;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_C;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EMPLOYEE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EMPLOYEE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EditEmployeeDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final String SKILL_EMPTY \u003d \" \" + PREFIX_SKILL;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SKILL_DESC, Skill.MESSAGE_CONSTRAINTS); // invalid skill"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // while parsing {@code PREFIX_SKILL} alone will reset the skills of the {@code Employee} being edited,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // parsing it together with a valid skill results in error"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertParseFailure(parser, \"1\" + SKILL_DESC_C + SKILL_DESC_JAVA + SKILL_EMPTY,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                                Skill.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertParseFailure(parser, \"1\" + SKILL_DESC_C + SKILL_EMPTY + SKILL_DESC_JAVA,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                                Skill.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertParseFailure(parser, \"1\" + SKILL_EMPTY + SKILL_DESC_C + SKILL_DESC_JAVA,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                                Skill.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EMPLOYEE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + SKILL_DESC_JAVA"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + SKILL_DESC_C;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand.EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                .withSkills(VALID_SKILL_JAVA, VALID_SKILL_C).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand.EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EMPLOYEE;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand.EditEmployeeDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new EditEmployeeDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        descriptor \u003d new EditEmployeeDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        descriptor \u003d new EditEmployeeDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        descriptor \u003d new EditEmployeeDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // skills"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SKILL_DESC_C;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        descriptor \u003d new EditEmployeeDescriptorBuilder().withSkills(VALID_SKILL_C).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                + SKILL_DESC_C + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + SKILL_DESC_C"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand.EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                .withSkills(VALID_SKILL_C, VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand.EditEmployeeDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new EditEmployeeDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        descriptor \u003d new EditEmployeeDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void parse_resetSkills_success() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EMPLOYEE;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + SKILL_EMPTY;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand.EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder().withSkills().build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 53,
      "jeffgan96": 4,
      "-": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.FindEmployeeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.FindProjectCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.FindSkillCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.employee.EmployeeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.project.ProjectNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.skill.EmployeeSkillContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertParseFailure(parser, FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD + \"  \","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertParseFailure(parser, FindProjectCommand.FIND_PROJECT_KEYWORD + \"  \","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertParseFailure(parser, FindSkillCommand.FIND_SKILL_KEYWORD + \"  \","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            new FindEmployeeCommand(new EmployeeNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertParseSuccess(parser, FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \" Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertParseSuccess(parser, \"employee \\t Alice \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertParseSuccess(parser, \"e Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        expectedFindCommand \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            new FindProjectCommand(new ProjectNameContainsKeywordsPredicate(Arrays.asList(\"Apollo\", \"Gemini\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertParseSuccess(parser, FindProjectCommand.FIND_PROJECT_KEYWORD + \" Apollo Gemini\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            expectedFindCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertParseSuccess(parser, \"project \\t Apollo  Gemini \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertParseSuccess(parser, \"p Apollo Gemini\", expectedFindCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        expectedFindCommand \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            new FindSkillCommand(new EmployeeSkillContainsKeywordsPredicate(Arrays.asList(\"java\", \"html\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertParseSuccess(parser, FindSkillCommand.FIND_SKILL_KEYWORD + \" java html\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            expectedFindCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertParseSuccess(parser, \"skill \\t java \\t html  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertParseSuccess(parser, \"s java html\", expectedFindCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "shunnizuka": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ListEmployeeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ListProjectCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertParseFailure(parser, \"invalid\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void parse_validArgs_returnsListEmployeeCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ListEmployeeCommand expectedListCommand \u003d new ListEmployeeCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertParseSuccess(parser, \"employee\", expectedListCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertParseSuccess(parser, \"    employee   \", expectedListCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void parse_validArgs_returnsListProjectCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ListProjectCommand expectedListCommand \u003d new ListProjectCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertParseSuccess(parser, \"project\", expectedListCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertParseSuccess(parser, \"    project   \", expectedListCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final String INVALID_SKILL \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final String VALID_SKILL_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final String VALID_SKILL_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(INDEX_FIRST_EMPLOYEE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(INDEX_FIRST_EMPLOYEE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void parseSkill_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ParserUtil.parseSkill(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void parseSkill_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ParserUtil.parseSkill(INVALID_SKILL);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void parseSkill_validValueWithoutWhitespace_returnsSkill() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Skill expectedSkill \u003d new Skill(VALID_SKILL_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(expectedSkill, ParserUtil.parseSkill(VALID_SKILL_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void parseSkill_validValueWithWhitespace_returnsTrimmedSkill() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        String skillWithWhitespace \u003d WHITESPACE + VALID_SKILL_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Skill expectedSkill \u003d new Skill(VALID_SKILL_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(expectedSkill, ParserUtil.parseSkill(skillWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void parseSkills_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ParserUtil.parseSkills(null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void parseSkills_collectionWithInvalidSkills_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ParserUtil.parseSkills(Arrays.asList(VALID_SKILL_1, INVALID_SKILL));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void parseSkills_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(ParserUtil.parseSkills(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void parseSkills_collectionWithValidSkills_returnsSkillSet() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Set\u003cSkill\u003e actualSkillSet \u003d ParserUtil.parseSkills(Arrays.asList(VALID_SKILL_1, VALID_SKILL_2));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Set\u003cSkill\u003e expectedSkillSet \u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new HashSet\u003cSkill\u003e(Arrays.asList(new Skill(VALID_SKILL_1), new Skill(VALID_SKILL_2)));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(expectedSkillSet, actualSkillSet);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 29,
      "jeffgan96": 4,
      "-": 176
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PocketProjectParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddEmployeeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.DeleteEmployeeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.FindEmployeeCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.FindProjectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ListEmployeeCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ListProjectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewEmployeeCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewProjectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.employee.EmployeeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.project.ProjectNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EditEmployeeDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EmployeeBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EmployeeUtil;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class PocketProjectParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final PocketProjectParser parser \u003d new PocketProjectParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employee \u003d new EmployeeBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        AddEmployeeCommand command \u003d (AddEmployeeCommand) parser.parseCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            (EmployeeUtil.getAddEmployeeCommand(employee));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertEquals(new AddEmployeeCommand(employee), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "                + INDEX_FIRST_EMPLOYEE.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertEquals(new DeleteEmployeeCommand(INDEX_FIRST_EMPLOYEE), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employee \u003d new EmployeeBuilder().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EditCommand.EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder(employee).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + INDEX_FIRST_EMPLOYEE.getOneBased() + \" \" + EmployeeUtil.getEditEmployeeDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_EMPLOYEE, descriptor), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindEmployeeCommand employeeCommand \u003d (FindEmployeeCommand) parser.parseCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD + \" \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "                + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertEquals(new FindEmployeeCommand(new EmployeeNameContainsKeywordsPredicate(keywords)), employeeCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        FindProjectCommand projectCommand \u003d (FindProjectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD + \" \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "                + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertEquals(new FindProjectCommand(new ProjectNameContainsKeywordsPredicate(keywords)), projectCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + ListEmployeeCommand.LIST_EMPLOYEE_KEYWORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + ListEmployeeCommand.LIST_EMPLOYEE_KEYWORD) instanceof ListEmployeeCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + ListProjectCommand.LIST_PROJECT_KEYWORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + ListProjectCommand.LIST_PROJECT_KEYWORD) instanceof ListProjectCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void parseCommand_view() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ViewEmployeeCommand employeeCommand \u003d (ViewEmployeeCommand) parser.parseCommand("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            ViewCommand.COMMAND_WORD + \" \" + ViewEmployeeCommand.VIEW_EMPLOYEE_KEYWORD + \" \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                    + INDEX_FIRST_EMPLOYEE.getOneBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(new ViewEmployeeCommand(INDEX_FIRST_EMPLOYEE), employeeCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ViewProjectCommand projectCommand \u003d (ViewProjectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                ViewCommand.COMMAND_WORD + \" \" + ViewProjectCommand.VIEW_PROJECT_KEYWORD + \" \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                        + INDEX_FIRST_PROJECT.getOneBased());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(new ViewProjectCommand(INDEX_FIRST_PROJECT), projectCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 11,
      "jeffgan96": 25,
      "dehui333": 2,
      "-": 113,
      "shunnizuka": 15,
      "jothipillay": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemoveFromCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.RemoveEmployeeFromCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.RemoveFromCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.RemoveMilestoneFromCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * outside of the RemoveFromCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class RemoveFromCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private RemoveFromCommandParser parser \u003d new RemoveFromCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void parse_validArgs_returnsRemoveFromCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertParseSuccess(parser, \"Project Apollo employee 1\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                new RemoveEmployeeFromCommand(Index.fromOneBased(1), new ProjectName(\"Project Apollo\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertParseSuccess(parser, \"Project X milestone 2\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                new RemoveMilestoneFromCommand(Index.fromOneBased(2), new ProjectName(\"Project X\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertParseFailure(parser, \"Project Apollo invalid 1\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, RemoveFromCommand.MESSAGE_USAGE)); //wrong format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertParseFailure(parser, \"Project Apollo employee 0\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, RemoveEmployeeFromCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertParseFailure(parser, \"Project Apollo milestone 0\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, RemoveMilestoneFromCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewEmployeeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewProjectCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertParseSuccess(parser, \" employee 1\", new ViewEmployeeCommand(INDEX_FIRST_EMPLOYEE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertParseSuccess(parser, \" project 1\", new ViewProjectCommand(INDEX_FIRST_PROJECT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertParseFailure(parser, \"employee\", String.format("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, ViewEmployeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertParseFailure(parser, \"project\", String.format("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, ViewProjectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EMPLOYEES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.employee.EmployeeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.employee.exceptions.EmployeeNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.PocketProjectBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.testutil.TypicalEmployees;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.testutil.TypicalProjects;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(new PocketProject(), new PocketProject(modelManager.getPocketProject()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(null, modelManager.getSelectedEmployee());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        userPrefs.setPocketProjectFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        userPrefs.setPocketProjectFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setPocketProjectFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.setPocketProjectFilePath(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setPocketProjectFilePath_validPath_setsPocketProjectFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.setPocketProjectFilePath(path);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(path, modelManager.getPocketProjectFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void hasEmployee_nullEmployee_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.hasEmployee(null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void hasEmployee_employeeNotInPocketProject_returnsFalse() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(modelManager.hasEmployee(ALICE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void hasEmployee_employeeInPocketProject_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.addEmployee(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(modelManager.hasEmployee(ALICE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void deleteEmployee_employeeIsSelectedAndFirstEmployeeInFilteredEmployeeList_selectionCleared() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.addEmployee(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.setSelectedEmployee(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.deleteEmployee(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(null, modelManager.getSelectedEmployee());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void deleteEmployee_employeeIsSelectedAndSecondEmployeeInFilteredEmployeeList_firstEmployeeSelected() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.addEmployee(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.addEmployee(BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredEmployeeList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.setSelectedEmployee(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.deleteEmployee(BOB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedEmployee());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void getProjectsContaining_noProjectContains_returnsEmptyList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        List\u003cProject\u003e list \u003d modelManager.getProjectsContaining(TypicalEmployees.IDA);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertEquals(list, Arrays.asList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void getProjectsContaining_projectContains_returnProjects() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Project projectToAdd1 \u003d TypicalProjects.PROJECT_IDA;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        projectToAdd1.addEmployee(TypicalEmployees.IDA);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Project projectToAdd2 \u003d TypicalProjects.PROJECT_HOON;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        projectToAdd2.addEmployee(TypicalEmployees.IDA);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        modelManager.addProject(projectToAdd1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        modelManager.addProject(projectToAdd2);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        List\u003cProject\u003e list \u003d modelManager.getProjectsContaining(TypicalEmployees.IDA);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertTrue(list.containsAll(Arrays.asList(projectToAdd1, projectToAdd2)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    //TODO: find out why this test is failing"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployee_employeeIsSelected_selectedEmployeeUpdated() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.addEmployee(ALICE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.setSelectedEmployee(ALICE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee updatedAlice \u003d new EmployeeBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.setEmployee(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedEmployee());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void getFilteredEmployeeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.getFilteredEmployeeList().remove(0);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setSelectedEmployee_employeeNotInFilteredEmployeeList_throwsEmployeeNotFoundException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        thrown.expect(EmployeeNotFoundException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.setSelectedEmployee(ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setSelectedEmployee_employeeInFilteredEmployeeList_setsSelectedEmployee() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.addEmployee(ALICE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredEmployeeList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.setSelectedEmployee(ALICE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedEmployee());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        PocketProject pocketProject \u003d new PocketProjectBuilder().withEmployee(ALICE).withEmployee(BENSON).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        PocketProject differentPocketProject \u003d new PocketProject();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager \u003d new ModelManager(pocketProject, userPrefs);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(pocketProject, userPrefs);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // different pocketProject -\u003e returns false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentPocketProject, userPrefs)));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        modelManager.updateFilteredEmployeeList(new EmployeeNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(pocketProject, userPrefs)));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        modelManager.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        differentUserPrefs.setPocketProjectFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(pocketProject, differentUserPrefs)));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 60,
      "jeffgan96": 3,
      "dehui333": 19,
      "-": 124,
      "shunnizuka": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/PocketProjectTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLIENT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.getTypicalPocketProjectWithEmployees;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.employee.exceptions.DuplicateEmployeeException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EmployeeBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.testutil.TypicalProjects;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class PocketProjectTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final PocketProject pocketProject \u003d new PocketProject();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(Collections.emptyList(), pocketProject.getEmployeeList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(Collections.emptyList(), pocketProject.getProjectList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.resetData(null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void resetData_withValidReadOnlyPocketProject_replacesData() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        PocketProject newData \u003d TypicalProjects.addTypicalProjects(getTypicalPocketProjectWithEmployees());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.resetData(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(newData, pocketProject);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void resetData_withDuplicateEmployees_throwsDuplicateEmployeeException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // Two employees with the same identity fields"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee editedAlice \u003d new EmployeeBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withSkills(VALID_SKILL_JAVA)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cEmployee\u003e newEmployees \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        PocketProjectStub newData \u003d new PocketProjectStub(newEmployees);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        thrown.expect(DuplicateEmployeeException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.resetData(newData);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void hasEmployee_nullEmployee_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.hasEmployee(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void hasProject_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.hasProject(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void hasEmployee_employeeNotInPocketProject_returnsFalse() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(pocketProject.hasEmployee(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void hasProject_projectNotInPocketProject_returnsFalse() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(pocketProject.hasProject(PROJECT_ALICE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void hasEmployee_employeeInPocketProject_returnsTrue() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.addEmployee(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(pocketProject.hasEmployee(ALICE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void hasProject_projectInPocketProject_returnsTrue() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.addProject(PROJECT_ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(pocketProject.hasProject(PROJECT_ALICE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void hasEmployee_employeeWithSameIdentityFieldsInPocketProject_returnsTrue() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.addEmployee(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee editedAlice \u003d new EmployeeBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withSkills(VALID_SKILL_JAVA)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(pocketProject.hasEmployee(editedAlice));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void hasProject_projectWithSameNameInPocketProject_returnsTrue() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.addProject(PROJECT_ALICE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(PROJECT_ALICE).withClient(VALID_CLIENT_BOB)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                .withDeadline(VALID_DEADLINE_AMY)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(pocketProject.hasProject(editedAlice));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void getEmployeeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.getEmployeeList().remove(0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void getProjectList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.getProjectList().remove(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.addListener(listener);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.addEmployee(ALICE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.addProject(PROJECT_ALICE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertEquals(2, counter.get());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.addListener(listener);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.removeListener(listener);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.addEmployee(ALICE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.addProject(PROJECT_ALICE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * A stub ReadOnlyPocketProject whose employees/projects list can violate interface constraints."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static class PocketProjectStub implements ReadOnlyPocketProject {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        private final ObservableList\u003cEmployee\u003e employees \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        private final ObservableList\u003cProject\u003e projects \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        PocketProjectStub(Collection\u003cEmployee\u003e employees) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            this.projects.setAll(projects);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            this.employees.setAll(employees);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        public ObservableList\u003cEmployee\u003e getEmployeeList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            return employees;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        public ObservableList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            return projects;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 53,
      "jeffgan96": 6,
      "dehui333": 41,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setPocketProjectFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setPocketProjectFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedPocketProjectTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.PocketProjectBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class VersionedPocketProjectTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final ReadOnlyPocketProject pocketProjectWithAmy \u003d new PocketProjectBuilder().withEmployee(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final ReadOnlyPocketProject pocketProjectWithBob \u003d new PocketProjectBuilder().withEmployee(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final ReadOnlyPocketProject pocketProjectWithCarl \u003d new PocketProjectBuilder().withEmployee(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final ReadOnlyPocketProject emptyPocketProject \u003d new PocketProjectBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void commit_singlePocketProject_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList(emptyPocketProject);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertPocketProjectListStatus(versionedPocketProject,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                Collections.singletonList(emptyPocketProject),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void commit_multiplePocketProjectPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject, pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertPocketProjectListStatus(versionedPocketProject,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                Arrays.asList(emptyPocketProject, pocketProjectWithAmy, pocketProjectWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                pocketProjectWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void commit_multiplePocketProjectPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject, pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPocketProject, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertPocketProjectListStatus(versionedPocketProject,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                Collections.singletonList(emptyPocketProject),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void canUndo_multiplePocketProjectPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject, pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(versionedPocketProject.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void canUndo_multiplePocketProjectPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject, pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPocketProject, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(versionedPocketProject.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void canUndo_singlePocketProject_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList(emptyPocketProject);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(versionedPocketProject.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void canUndo_multiplePocketProjectPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject, pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPocketProject, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(versionedPocketProject.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void canRedo_multiplePocketProjectPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject, pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPocketProject, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(versionedPocketProject.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void canRedo_multiplePocketProjectPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject, pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPocketProject, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(versionedPocketProject.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void canRedo_singlePocketProject_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList(emptyPocketProject);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(versionedPocketProject.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void canRedo_multiplePocketProjectPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject, pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(versionedPocketProject.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void undo_multiplePocketProjectPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject, pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertPocketProjectListStatus(versionedPocketProject,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                Collections.singletonList(emptyPocketProject),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                pocketProjectWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                Collections.singletonList(pocketProjectWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void undo_multiplePocketProjectPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject, pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPocketProject, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertPocketProjectListStatus(versionedPocketProject,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                Arrays.asList(pocketProjectWithAmy, pocketProjectWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void undo_singlePocketProject_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList(emptyPocketProject);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertThrows(VersionedPocketProject.NoUndoableStateException.class, versionedPocketProject::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void undo_multiplePocketProjectPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject, pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPocketProject, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertThrows(VersionedPocketProject.NoUndoableStateException.class, versionedPocketProject::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void redo_multiplePocketProjectPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject, pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPocketProject, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertPocketProjectListStatus(versionedPocketProject,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                Arrays.asList(emptyPocketProject, pocketProjectWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                pocketProjectWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void redo_multiplePocketProjectPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject, pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPocketProject, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        versionedPocketProject.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertPocketProjectListStatus(versionedPocketProject,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                Collections.singletonList(emptyPocketProject),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                pocketProjectWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                Collections.singletonList(pocketProjectWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void redo_singlePocketProject_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList(emptyPocketProject);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertThrows(VersionedPocketProject.NoRedoableStateException.class, versionedPocketProject::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void redo_multiplePocketProjectPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d preparePocketProjectList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                emptyPocketProject, pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertThrows(VersionedPocketProject.NoRedoableStateException.class, versionedPocketProject::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                preparePocketProjectList(pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject copy \u003d preparePocketProjectList(pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(versionedPocketProject.equals(copy));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(versionedPocketProject.equals(versionedPocketProject));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(versionedPocketProject.equals(null));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(versionedPocketProject.equals(1));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject differentPocketProjectList \u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            preparePocketProjectList(pocketProjectWithBob, pocketProjectWithCarl);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(versionedPocketProject.equals(differentPocketProjectList));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject differentCurrentStatePointer \u003d preparePocketProjectList("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                pocketProjectWithAmy, pocketProjectWithBob);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPocketProject, 1);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(versionedPocketProject.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Asserts that {@code versionedPocketProject} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * states before {@code versionedPocketProject#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * and states after {@code versionedPocketProject#currentStatePointer} is equal to"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private void assertPocketProjectListStatus(VersionedPocketProject versionedPocketProject,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                                               List\u003cReadOnlyPocketProject\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                                               ReadOnlyPocketProject expectedCurrentState,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                                               List\u003cReadOnlyPocketProject\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(new PocketProject(versionedPocketProject), expectedCurrentState);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        while (versionedPocketProject.canUndo()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            versionedPocketProject.undo();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        for (ReadOnlyPocketProject expectedPocketProject : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            assertEquals(expectedPocketProject, new PocketProject(versionedPocketProject));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            versionedPocketProject.redo();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        for (ReadOnlyPocketProject expectedPocketProject : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            versionedPocketProject.redo();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            assertEquals(expectedPocketProject, new PocketProject(versionedPocketProject));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(versionedPocketProject.canRedo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedPocketProject.undo());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Creates and returns a {@code VersionedPocketProject} with the {@code pocketProjectStates} added into it, and the"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code VersionedPocketProject#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private VersionedPocketProject preparePocketProjectList(ReadOnlyPocketProject... pocketProjectStates) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(pocketProjectStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        VersionedPocketProject versionedPocketProject \u003d new VersionedPocketProject(pocketProjectStates[0]);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        for (int i \u003d 1; i \u003c pocketProjectStates.length; i++) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            versionedPocketProject.resetData(pocketProjectStates[i]);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            versionedPocketProject.commit();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return versionedPocketProject;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Shifts the {@code versionedPocketProject#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedPocketProject versionedPocketProject, int count) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            versionedPocketProject.undo();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 162,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/model/employee/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/employee/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 1,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/employee/EmployeeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EmployeeBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class EmployeeTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employee \u003d new EmployeeBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        employee.getSkills().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void isSameEmployee() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(ALICE.isSameEmployee(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(ALICE.isSameEmployee(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee editedAlice \u003d new EmployeeBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(ALICE.isSameEmployee(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedAlice \u003d new EmployeeBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(ALICE.isSameEmployee(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedAlice \u003d new EmployeeBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                .withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(ALICE.isSameEmployee(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedAlice \u003d new EmployeeBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                .withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(ALICE.isSameEmployee(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedAlice \u003d new EmployeeBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(ALICE.isSameEmployee(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee aliceCopy \u003d new EmployeeBuilder(ALICE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee editedAlice \u003d new EmployeeBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedAlice \u003d new EmployeeBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedAlice \u003d new EmployeeBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedAlice \u003d new EmployeeBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedAlice \u003d new EmployeeBuilder(ALICE).withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 27,
      "jeffgan96": 3,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/model/employee/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EmployeeBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeNameContainsKeywordsPredicate firstPredicate \u003d new EmployeeNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeNameContainsKeywordsPredicate secondPredicate \u003d new EmployeeNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeNameContainsKeywordsPredicate firstPredicateCopy \u003d new EmployeeNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeNameContainsKeywordsPredicate predicate \u003d new EmployeeNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        predicate \u003d new EmployeeNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        predicate \u003d new EmployeeNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        predicate \u003d new EmployeeNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeNameContainsKeywordsPredicate predicate \u003d new EmployeeNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(predicate.test(new EmployeeBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        predicate \u003d new EmployeeNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        predicate \u003d new EmployeeNameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(predicate.test(new EmployeeBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 8,
      "jeffgan96": 2,
      "-": 55,
      "shunnizuka": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/model/employee/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/employee/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/employee/UniqueEmployeeListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.employee.exceptions.DuplicateEmployeeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.employee.exceptions.EmployeeNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EmployeeBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class UniqueEmployeeListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final UniqueEmployeeList uniqueEmployeeList \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void contains_nullEmployee_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void contains_employeeNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(uniqueEmployeeList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void contains_employeeInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(uniqueEmployeeList.contains(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void contains_employeeWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee editedAlice \u003d new EmployeeBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withSkills(VALID_SKILL_JAVA)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(uniqueEmployeeList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void add_nullEmployee_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void add_duplicateEmployee_throwsDuplicateEmployeeException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        thrown.expect(DuplicateEmployeeException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployee_nullTargetEmployee_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.setEmployee(null, ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployee_nullEditedEmployee_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.setEmployee(ALICE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployee_targetEmployeeNotInList_throwsEmployeeNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        thrown.expect(EmployeeNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.setEmployee(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployee_editedEmployeeIsSameEmployee_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.setEmployee(ALICE, ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedUniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployee_editedEmployeeHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee editedAlice \u003d new EmployeeBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withSkills(VALID_SKILL_JAVA)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.setEmployee(ALICE, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedUniqueEmployeeList.add(editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployee_editedEmployeeHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.setEmployee(ALICE, BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedUniqueEmployeeList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployee_editedEmployeeHasNonUniqueIdentity_throwsDuplicateEmployeeException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.add(BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        thrown.expect(DuplicateEmployeeException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.setEmployee(ALICE, BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void remove_nullEmployee_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void remove_employeeDoesNotExist_throwsEmployeeNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        thrown.expect(EmployeeNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.remove(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void remove_existingEmployee_removesEmployee() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.remove(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployees_nullUniqueEmployeeList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.setEmployees((UniqueEmployeeList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployees_uniqueEmployeeList_replacesOwnListWithProvidedUniqueEmployeeList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedUniqueEmployeeList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.setEmployees(expectedUniqueEmployeeList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployees_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.setEmployees((List\u003cEmployee\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployees_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.add(ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cEmployee\u003e employeeList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.setEmployees(employeeList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedUniqueEmployeeList.add(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void setEmployees_listWithDuplicateEmployees_throwsDuplicateEmployeeException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cEmployee\u003e listWithDuplicateEmployees \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        thrown.expect(DuplicateEmployeeException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.setEmployees(listWithDuplicateEmployees);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uniqueEmployeeList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 85,
      "jeffgan96": 4,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/ClientTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ClientTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Client(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void constructor_invalidClient_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        String invalidClient \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Client(invalidClient));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void isValidClient() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // null client"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Client.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // invalid names"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Client.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Client.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // valid names"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(Client.isValidName(\"Jothipillay Dumdum\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(Client.isValidName(\"a\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(Client.isValidName(\"Jothipillay Jothipillary Jothipillaryas Jjothiiithihihi\")); // long names"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/DeadlineTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Deadline(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void constructor_invalidDeadline_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        String invalidDeadline \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(invalidDeadline));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void isValidDeadline() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // null deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Deadline.isValidDate(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"12\")); // missing both the month/date and the year value"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"12/12\")); // missing the year value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"12/2019\")); // missing the month/date value"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"12//12/2019\")); // wrong input pattern"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"12/12/12/2019\")); // too many fields"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"111/11/2019\")); // too many digits in the date field"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"11/111/2019\")); // too many digits in the month field"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"11/11/11111\")); // too many digits in the date field"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\" 11/11/2019\")); // leading space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"11/11/2019 \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"aa/11/2019\")); // alphabetical date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"11/aa/2019\")); // alphabetical month"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"11/11/aaaa\")); // alphabetical year"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"44/11/2019\")); // invalid date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"11/44/aaaa\")); // invalid month"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"11/11/1800\")); // invalid year too old"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // valid deadlines"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(Deadline.isValidDate(\"11/11/2019\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(Deadline.isValidDate(\"1/1/2000\")); // minimal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/MilestoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class MilestoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    //TODO: Add JUnit tests for constructor of milestones"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Milestone(null, null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void constructor_invalidMilestone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        String invalidMilestone \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Milestone(invalidMilestone, invalidDate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void isValidMilestone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Milestone.isValidMilestoneDate(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // null milestone"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Milestone.isValidMilestoneString(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // invalid dates"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\" \")); // missing date year and month value"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"12\")); // missing both year and month value"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"12/12\")); // missing the year value"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"12/2019\")); // missing the month/date value"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // invalid dates"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"12//12/2019\")); // wrong input pattern"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"12/12/12/2019\")); // too many fields"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"111/11/2019\")); // too many digits in the date field"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"11/111/2019\")); // too many digits in the month field"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"11/11/11111\")); // too many digits in the date field"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\" 11/11/2019\")); // leading space"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"11/11/2019 \")); // trailing space"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"aa/11/2019\")); // alphabetical date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"11/aa/2019\")); // alphabetical month"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"11/11/aaaa\")); // alphabetical year"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"44/11/2019\")); // invalid date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"11/44/aaaa\")); // invalid month"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"11/11/1800\")); // invalid year too old"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneDate(\"29/02/2019\")); // Not leap year"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // invalid milestone strings"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(Milestone.isValidMilestoneString(\" \")); //empty string"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // valid deadlines"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(Milestone.isValidMilestoneDate(\"11/11/2019\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(Milestone.isValidMilestoneDate(\"1/1/2000\")); // minimal"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        //valid milestone strings"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(Milestone.isValidMilestoneString(\"This is a valid string\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        //valid milestones"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(Milestone.isValidMilestone(\"valid string\", \"12/12/2019\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 67,
      "dehui333": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/ProjectNameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ProjectNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ProjectNameContainsKeywordsPredicate firstPredicate \u003d new ProjectNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ProjectNameContainsKeywordsPredicate secondPredicate \u003d new ProjectNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ProjectNameContainsKeywordsPredicate firstPredicateCopy \u003d new ProjectNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different value -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ProjectNameContainsKeywordsPredicate predicate \u003d new ProjectNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(predicate.test(new ProjectBuilder().withProjectName(\"Alice Project\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        predicate \u003d new ProjectNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(predicate.test(new ProjectBuilder().withProjectName(\"Alice Bob Project\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        predicate \u003d new ProjectNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(predicate.test(new ProjectBuilder().withProjectName(\"Alice Carol Project\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        predicate \u003d new ProjectNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(predicate.test(new ProjectBuilder().withProjectName(\"Alice Bob Project\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ProjectNameContainsKeywordsPredicate predicate \u003d new ProjectNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(predicate.test(new ProjectBuilder().withProjectName(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        predicate \u003d new ProjectNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(predicate.test(new ProjectBuilder().withProjectName(\"Alice Project\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/ProjectNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ProjectNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ProjectName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void constructor_invalidProjectName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        String invalidProjectName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ProjectName(invalidProjectName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void isValidProjectName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // null client"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ProjectName.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // invalid names"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(ProjectName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(ProjectName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // valid names"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(ProjectName.isValidName(\"First Project\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(ProjectName.isValidName(\"a\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(ProjectName.isValidName(\"P in Project stands for Project which is recursive\")); // long names"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/ProjectTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLIENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ProjectTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    //TODO: Make it throw unsupported operation exception"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Project project \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void addMilestone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        //milestone is properly added"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Project p \u003d PROJECT_CARL;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Milestone m1 \u003d new Milestone(\"1\", \"11/11/2011\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        p.addMilestone(m1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertTrue(p.getMilestones().equals(Arrays.asList(m1)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        //milestone is sorted after being added"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Milestone m2 \u003d new Milestone(\"2\", \"09/11/2011\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        p.addMilestone(m2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertTrue(p.getMilestones().equals(Arrays.asList(m2, m1)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertFalse(p.getMilestones().equals(Arrays.asList(m1, m2)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        //adding more"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        Milestone m3 \u003d new Milestone(\"3\", \"10/11/2011\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        p.addMilestone(m3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertTrue(p.getMilestones().equals(Arrays.asList(m2, m3, m1)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void isSameProject() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(PROJECT_ALICE.isSameProject(PROJECT_ALICE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(PROJECT_ALICE.isSameProject(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        //TODO: Fill up more test cases to compare project equality"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Project projectAliceCopy \u003d new ProjectBuilder(PROJECT_ALICE).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(PROJECT_ALICE.equals(projectAliceCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(PROJECT_ALICE.equals(PROJECT_ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(PROJECT_ALICE.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(PROJECT_ALICE.equals(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(PROJECT_ALICE.equals(PROJECT_CARL));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(PROJECT_ALICE).withProjectName(VALID_PROJECT_NAME_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(PROJECT_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(PROJECT_ALICE).withClient(VALID_CLIENT_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(PROJECT_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(PROJECT_ALICE).withDeadline(VALID_DEADLINE_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(PROJECT_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 72,
      "dehui333": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/UniqueProjectListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLIENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.exceptions.DuplicateProjectException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class UniqueProjectListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private final UniqueProjectList uniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void contains_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void contains_projectNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(uniqueProjectList.contains(PROJECT_ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void contains_projectInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.add(PROJECT_ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(uniqueProjectList.contains(PROJECT_ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void contains_projectWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.add(PROJECT_ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(PROJECT_ALICE).withClient(VALID_CLIENT_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                .withDeadline(VALID_DEADLINE_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(uniqueProjectList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void add_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void add_duplicateProject_throwsDuplicateEmployeeException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.add(PROJECT_ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        thrown.expect(DuplicateProjectException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.add(PROJECT_ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void setProject_nullTargetProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.setProject(null, PROJECT_ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void setProject_nullEditedProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.setProject(PROJECT_ALICE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void setProject_targetProjectNotInList_throwsProjectNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        thrown.expect(ProjectNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.setProject(PROJECT_ALICE, PROJECT_ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void setProject_editedProjectIsSameProject_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.add(PROJECT_ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.setProject(PROJECT_ALICE, PROJECT_ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        expectedUniqueProjectList.add(PROJECT_ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void setProject_editedProjectHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.add(PROJECT_ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(PROJECT_ALICE).withClient(VALID_CLIENT_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                .withDeadline(VALID_DEADLINE_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.setProject(PROJECT_ALICE, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        expectedUniqueProjectList.add(editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void setProject_editedProjectHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.add(PROJECT_ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.setProject(PROJECT_ALICE, PROJECT_BENSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        expectedUniqueProjectList.add(PROJECT_BENSON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void setProject_editedProjectHasNonUniqueIdentity_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.add(PROJECT_ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.add(PROJECT_BENSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        thrown.expect(DuplicateProjectException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.setProject(PROJECT_ALICE, PROJECT_BENSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void remove_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void remove_projectDoesNotExist_throwsProjectNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        thrown.expect(ProjectNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.remove(PROJECT_ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void remove_existingProject_removesProject() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.add(PROJECT_ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.remove(PROJECT_ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void setProjects_nullUniqueProjectList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.setProjects((UniqueProjectList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void setProject_uniqueProjectList_replacesOwnListWithProvidedUniqueProjectList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.add(PROJECT_ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        expectedUniqueProjectList.add(PROJECT_BENSON);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.setProjects(expectedUniqueProjectList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void setProjects_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.setProjects((List\u003cProject\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void setProjects_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.add(PROJECT_ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cProject\u003e projectList \u003d Collections.singletonList(PROJECT_BENSON);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.setProjects(projectList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        expectedUniqueProjectList.add(PROJECT_BENSON);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void setProjects_listWithDuplicateProjects_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        List\u003cProject\u003e listWithDuplicateProjects \u003d Arrays.asList(PROJECT_ALICE, PROJECT_ALICE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        thrown.expect(DuplicateProjectException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.setProjects(listWithDuplicateProjects);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uniqueProjectList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/model/skill/EmployeeSkillContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "package seedu.address.model.skill;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.testutil.EmployeeBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "public class EmployeeSkillContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeSkillContainsKeywordsPredicate firstPredicate \u003d new EmployeeSkillContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeSkillContainsKeywordsPredicate secondPredicate \u003d new EmployeeSkillContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeSkillContainsKeywordsPredicate firstPredicateCopy \u003d new EmployeeSkillContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // different employee -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public void test_skillContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeSkillContainsKeywordsPredicate predicate \u003d new EmployeeSkillContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            Collections.singletonList(\"Java\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            .withSkills(\"Java\", \"python\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        predicate \u003d new EmployeeSkillContainsKeywordsPredicate(Arrays.asList(\"Java\", \"Python\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            .withSkills(\"Java\", \"Python\", \"HTML\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        predicate \u003d new EmployeeSkillContainsKeywordsPredicate(Arrays.asList(\"Java\", \"HTML\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Carol\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            .withSkills(\"Java\", \"Python\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        predicate \u003d new EmployeeSkillContainsKeywordsPredicate(Arrays.asList(\"jAVa\", \"PYtHon\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            .withSkills(\"java\", \"python\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public void test_skillDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        EmployeeSkillContainsKeywordsPredicate predicate \u003d new EmployeeSkillContainsKeywordsPredicate("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(predicate.test(new EmployeeBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        predicate \u003d new EmployeeSkillContainsKeywordsPredicate(Arrays.asList(\"CSS\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\").withSkills(\"Java\", \"Python\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shunnizuka": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/skill/SkillTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ditan96"
        },
        "content": "package seedu.address.model.skill;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class SkillTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Skill(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void constructor_invalidSkillName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        String invalidSkillName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Skill(invalidSkillName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void isValidSkillName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // null skill name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Skill.isValidSkillName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 9,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedEmployeeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.storage.JsonAdaptedEmployee.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class JsonAdaptedEmployeeTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final String INVALID_SKILL \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final List\u003cJsonAdaptedSkill\u003e VALID_SKILLS \u003d BENSON.getSkills().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            .map(JsonAdaptedSkill::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void toModelType_validEmployeeDetails_returnsEmployee() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonAdaptedEmployee employee \u003d new JsonAdaptedEmployee(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(BENSON, employee.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonAdaptedEmployee employee \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new JsonAdaptedEmployee(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SKILLS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, employee::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonAdaptedEmployee employee \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new JsonAdaptedEmployee(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SKILLS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, employee::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonAdaptedEmployee employee \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new JsonAdaptedEmployee(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SKILLS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, employee::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonAdaptedEmployee employee \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new JsonAdaptedEmployee(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_SKILLS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, employee::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonAdaptedEmployee employee \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new JsonAdaptedEmployee(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_SKILLS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, employee::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonAdaptedEmployee employee \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new JsonAdaptedEmployee(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_SKILLS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, employee::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonAdaptedEmployee employee \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new JsonAdaptedEmployee(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_SKILLS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, employee::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonAdaptedEmployee employee \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new JsonAdaptedEmployee(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_SKILLS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, employee::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void toModelType_invalidSkills_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        List\u003cJsonAdaptedSkill\u003e invalidSkills \u003d new ArrayList\u003c\u003e(VALID_SKILLS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        invalidSkills.add(new JsonAdaptedSkill(INVALID_SKILL));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonAdaptedEmployee employee \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new JsonAdaptedEmployee(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidSkills);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, employee::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 38,
      "jeffgan96": 5,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonPocketProjectStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ditan96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.TypicalProjects;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class JsonPocketProjectStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                                                                \"data\", \"JsonPocketProjectStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void readPocketProject_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        readPocketProject(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPocketProject\u003e readPocketProject(String filePath) throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return new JsonPocketProjectStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                    .readPocketProject(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(readPocketProject(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        readPocketProject(\"notJsonFormatPocketProject.json\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void readPocketProject_invalidEmployeePocketProject_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        readPocketProject(\"invalidEmployeePocketProject.json\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void readPocketProject_invalidAndValidEmployeePocketProject_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        readPocketProject(\"invalidAndValidEmployeePocketProject.json\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void readAndSavePocketProject_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempPocketProject.json\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        PocketProject original \u003d TestUtil.typicalPocketProject();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonPocketProjectStorage jsonPocketProjectStorage \u003d new JsonPocketProjectStorage(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        jsonPocketProjectStorage.savePocketProject(original, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ReadOnlyPocketProject readBack \u003d jsonPocketProjectStorage.readPocketProject(filePath).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(original, new PocketProject(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        original.addEmployee(HOON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        original.addProject(TypicalProjects.PROJECT_HOON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        original.removeEmployee(ALICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        original.removeProject(TypicalProjects.PROJECT_ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        jsonPocketProjectStorage.savePocketProject(original, filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        readBack \u003d jsonPocketProjectStorage.readPocketProject(filePath).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(original, new PocketProject(readBack));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        original.addEmployee(IDA);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        original.addProject(TypicalProjects.PROJECT_IDA);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        jsonPocketProjectStorage.savePocketProject(original); // file path not specified"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        readBack \u003d jsonPocketProjectStorage.readPocketProject().get(); // file path not specified"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(original, new PocketProject(readBack));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void savePocketProject_nullPocketProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        savePocketProject(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Saves {@code pocketProject} at the specified {@code filePath}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private void savePocketProject(ReadOnlyPocketProject pocketProject, String filePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            new JsonPocketProjectStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                    .savePocketProject(pocketProject, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void savePocketProject_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        savePocketProject(new PocketProject(), null);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ditan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializablePocketProjectTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class JsonSerializablePocketProjectTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                                                                \"data\", \"JsonSerializablePocketProjectTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final Path TYPICAL_POCKET_PROJECT_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPocketProject.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final Path INVALID_EMPLOYEE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEmployeePocketProject.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final Path DUPLICATE_EMPLOYEE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEmployeePocketProject.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final Path INVALID_PROJECT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidProjectPocketProject.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final Path DUPLICATE_PROJECT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateProjectPocketProject.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void toModelType_typicalPocketProjectFile_success() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonSerializablePocketProject dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_POCKET_PROJECT_FILE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                JsonSerializablePocketProject.class).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        PocketProject pocketProjectFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        PocketProject typicalPocketProject \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                TestUtil.typicalPocketProject(); //assertEquals(pocketProjectFromFile, typicalPocketProject);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertEquals(1, 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void toModelType_invalidEmployeeFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonSerializablePocketProject dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EMPLOYEE_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                JsonSerializablePocketProject.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void toModelType_invalidProjectFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonSerializablePocketProject dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PROJECT_FILE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                JsonSerializablePocketProject.class).get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void toModelType_duplicateEmployees_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonSerializablePocketProject dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EMPLOYEE_FILE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                JsonSerializablePocketProject.class).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        thrown.expectMessage(JsonSerializablePocketProject.MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public void toModelType_duplicateProjects_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonSerializablePocketProject dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PROJECT_FILE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                JsonSerializablePocketProject.class).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        thrown.expectMessage(JsonSerializablePocketProject.MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 26,
      "dehui333": 15,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        userPrefs.setPocketProjectFilePath(Paths.get(\"pocketproject.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.getTypicalPocketProjectWithEmployees;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonPocketProjectStorage pocketProjectStorage \u003d new JsonPocketProjectStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        storageManager \u003d new StorageManager(pocketProjectStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void pocketProjectReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "         * {@link JsonPocketProjectStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPocketProjectStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        PocketProject original \u003d getTypicalPocketProjectWithEmployees();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        storageManager.savePocketProject(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        ReadOnlyPocketProject retrieved \u003d storageManager.readPocketProject().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(original, new PocketProject(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void getPocketProjectFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertNotNull(storageManager.getPocketProjectFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 14,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditEmployeeDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * A utility class to help with building EditEmployeeDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class EditEmployeeDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private EditCommand.EditEmployeeDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EditEmployeeDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        descriptor \u003d new EditCommand.EditEmployeeDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EditEmployeeDescriptorBuilder(EditCommand.EditEmployeeDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditEmployeeDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns an {@code EditEmployeeDescriptor} with fields containing {@code employee}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EditEmployeeDescriptorBuilder(Employee employee) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        descriptor \u003d new EditCommand.EditEmployeeDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        descriptor.setName(employee.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        descriptor.setPhone(employee.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        descriptor.setEmail(employee.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        descriptor.setAddress(employee.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        descriptor.setSkills(employee.getSkills());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Sets the {@code Name} of the {@code EditEmployeeDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EditEmployeeDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditEmployeeDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EditEmployeeDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Sets the {@code Email} of the {@code EditEmployeeDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EditEmployeeDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Sets the {@code Address} of the {@code EditEmployeeDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EditEmployeeDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Parses the {@code skills} into a {@code Set\u003cSkill\u003e} and set it to the {@code EditEmployeeDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EditEmployeeDescriptorBuilder withSkills(String... skills) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Set\u003cSkill\u003e skillSet \u003d Stream.of(skills).map(Skill::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        descriptor.setSkills(skillSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EditCommand.EditEmployeeDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 26,
      "jeffgan96": 9,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EmployeeBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * A utility class to help with building Employee objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class EmployeeBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Set\u003cSkill\u003e skills;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        skills \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Initializes the EmployeeBuilder with the data of {@code employeeToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeBuilder(Employee employeeToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        name \u003d employeeToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        phone \u003d employeeToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        email \u003d employeeToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        address \u003d employeeToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        skills \u003d new HashSet\u003c\u003e(employeeToCopy.getSkills());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Sets the {@code Name} of the {@code Employee} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Parses the {@code skills} into a {@code Set\u003cSkill\u003e} and set it to the {@code Employee} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeBuilder withSkills(String ... skills) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        this.skills \u003d SampleDataUtil.getSkillSet(skills);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Sets the {@code Address} of the {@code Employee} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Sets the {@code Phone} of the {@code Employee} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Sets the {@code Email} of the {@code Employee} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public Employee build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return new Employee(name, phone, email, address, skills);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 16,
      "jeffgan96": 15,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EmployeeUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddEmployeeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * A utility class for Employee."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class EmployeeUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns an add command string for adding the {@code employee}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static String getAddEmployeeCommand(Employee employee) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + getEmployeeDetails(employee);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns the part of command string for the given {@code employee}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static String getEmployeeDetails(Employee employee) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        sb.append(PREFIX_NAME + employee.getName().fullName + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        sb.append(PREFIX_PHONE + employee.getPhone().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        sb.append(PREFIX_EMAIL + employee.getEmail().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        sb.append(PREFIX_ADDRESS + employee.getAddress().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        employee.getSkills().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            s -\u003e sb.append(PREFIX_SKILL + s.skillName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns the part of command string for the given {@code EditEmployeeDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static String getEditEmployeeDescriptorDetails(EditCommand.EditEmployeeDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        if (descriptor.getSkills().isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            Set\u003cSkill\u003e skills \u003d descriptor.getSkills().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            if (skills.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                sb.append(PREFIX_SKILL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                skills.forEach(s -\u003e sb.append(PREFIX_SKILL).append(s.skillName).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 14,
      "jeffgan96": 8,
      "-": 38,
      "jothipillay": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PocketProjectBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * A utility class to help with building PocketProject objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": " *     {@code PocketProject ab \u003d new PocketProjectBuilder().withEmployee(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class PocketProjectBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private PocketProject pocketProject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public PocketProjectBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject \u003d new PocketProject();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public PocketProjectBuilder(PocketProject pocketProject) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        this.pocketProject \u003d pocketProject;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Adds a new {@code Employee} to the {@code PocketProject} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public PocketProjectBuilder withEmployee(Employee employee) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.addEmployee(employee);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Adds a new {@code Project} to the {@code PocketProject} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public PocketProjectBuilder withProject(Project project) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        pocketProject.addProject(project);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public PocketProject build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return pocketProject;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 19,
      "dehui333": 5,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ProjectBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.employee.UniqueEmployeeList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * A utility class to help with building Project objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class ProjectBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String DEFAULT_PROJECT_NAME \u003d \"Apollo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d \"03/03/2019\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final String DEFAULT_CLIENT \u003d \"NUS\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"build an application that manages projects\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private ProjectName projectName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private Client client;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private UniqueEmployeeList employees;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private List\u003cMilestone\u003e milestones;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public ProjectBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        projectName \u003d new ProjectName(DEFAULT_PROJECT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        deadline \u003d new Deadline(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        client \u003d new Client(DEFAULT_CLIENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        description \u003d new Description((DEFAULT_DESCRIPTION));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        employees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        milestones \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Initializes the ProjectBuilder with the data of {@code projectToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public ProjectBuilder(Project projectToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        projectName \u003d projectToCopy.getProjectName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        deadline \u003d projectToCopy.getDeadline();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        client \u003d projectToCopy.getClient();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        description \u003d projectToCopy.getDescription();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        employees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.milestones \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Employee e: projectToCopy.getEmployees()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            employees.add(e);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Milestone m: projectToCopy.getMilestones()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            milestones.add(m);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Sets the {@code ProjectName} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public ProjectBuilder withProjectName(String projectName) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.projectName \u003d new ProjectName(projectName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public ProjectBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.deadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Sets the {@code Client} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public ProjectBuilder withClient(String client) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.client \u003d new Client(client);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Sets the {@code Description} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public ProjectBuilder withDescrption(String desc) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        this.description \u003d new Description(desc);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Sets the milestones of the {@code Project} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public ProjectBuilder withMilestones(List\u003cMilestone\u003e milestones) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.milestones.addAll(milestones);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Sets the employees of the {@code Project} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public ProjectBuilder withEmployees(List\u003cEmployee\u003e employees) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        this.employees.setEmployees(employees);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public Project build() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new Project(projectName, client, deadline, milestones, description, employees);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 98,
      "shunnizuka": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ProjectUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddMilestoneToCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddProjectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddToCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " * A utility class for project."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class ProjectUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Returns an add command string for adding the {@code project}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static String getAddProjectCommand(Project project) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + AddProjectCommand.ADD_PROJECT_KEYWORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                + getProjectDetails(project);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Returns the part of command string for the given {@code project}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static String getProjectDetails(Project project) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        sb.append(PREFIX_NAME + project.getProjectName().projectName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        sb.append(PREFIX_CLIENT + project.getClient().client + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        sb.append(PREFIX_DEADLINE + project.getDeadline().deadline + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Returns an add milestone to command string for adding the {@code milestone} to {@code project}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static String getAddMilestoneToCommand(Project project, Milestone milestone) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return AddToCommand.COMMAND_WORD + \" \" + project.getProjectName().projectName + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + AddMilestoneToCommand.ADD_MILESTONE_KEYWORD + \" \" + getMilestoneDetails(milestone);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Returns the part of command string for the given {@code milestone}\u0027s details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static String getMilestoneDetails(Milestone milestone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        sb.append(milestone.getMilestone() + \" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        sb.append(milestone.getDate() + \" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jothipillay": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns the middle index of the employee in the {@code model}\u0027s employee list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEmployeeList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns the last index of the employee in the {@code model}\u0027s employee list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEmployeeList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns the employee in the {@code model}\u0027s employee list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static Employee getEmployee(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return model.getFilteredEmployeeList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     *  Returns an pocketproject with the typical employees and typical projects."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static PocketProject typicalPocketProject() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return TypicalProjects.addTypicalProjects(TypicalEmployees.getTypicalPocketProjectWithEmployees());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 8,
      "jeffgan96": 3,
      "dehui333": 4,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEmployees.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_C;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": " * A utility class containing a list of {@code Employee} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class TypicalEmployees {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final Employee ALICE \u003d new EmployeeBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            .withSkills(\"Python\", \"Java\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final Employee BENSON \u003d new EmployeeBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            .withSkills(\"CSS\", \"HTML\", \"Java\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final Employee CARL \u003d new EmployeeBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final Employee DANIEL \u003d new EmployeeBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withSkills(\"Assembly\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final Employee ELLE \u003d new EmployeeBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withSkills(\"Python\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final Employee FIONA \u003d new EmployeeBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final Employee GEORGE \u003d new EmployeeBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final Employee HOON \u003d new EmployeeBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final Employee IDA \u003d new EmployeeBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    // Manually added - Employee\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final Employee AMY \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withSkills(VALID_SKILL_C).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final Employee BOB \u003d new EmployeeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            .withSkills(VALID_SKILL_JAVA, VALID_SKILL_C).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private TypicalEmployees() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns an {@code PocketProject} with all the typical employees."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static PocketProject getTypicalPocketProjectWithEmployees() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        PocketProject ab \u003d new PocketProject();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        for (Employee employee : getTypicalEmployees()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            ab.addEmployee(employee);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns an {@code PocketProject} with all the typical employees added to the given {@code PocketProject}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static PocketProject addTypicalEmployees(PocketProject ab) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Employee employee : getTypicalEmployees()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            ab.addEmployee(employee);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static List\u003cEmployee\u003e getTypicalEmployees() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 29,
      "jeffgan96": 2,
      "dehui333": 8,
      "-": 44,
      "shunnizuka": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final Index INDEX_FIRST_EMPLOYEE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final Index INDEX_SECOND_EMPLOYEE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static final Index INDEX_THIRD_EMPLOYEE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final Index INDEX_FIRST_PROJECT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final Index INDEX_SECOND_PROJECT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static final Index INDEX_THIRD_PROJECT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 3,
      "jeffgan96": 4,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalMilestones.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * A utility class containing a list of {@code Milestones} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class TypicalMilestones {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final Milestone TYPICAL_MILESTONE_START \u003d new Milestone(\"The project starts\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            \"11/11/2011\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final Milestone TYPICAL_MILESTONE_END \u003d new Milestone(\"The project completes\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            \"12/12/2012\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final Milestone TYPICAL_MILESTONE_COMPLETED_UG \u003d new Milestone(\"The UG is completed\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            \"10/11/2012\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final Milestone TYPICAL_MILESTONE_GUI_V2 \u003d new Milestone(\"GUI is in version 2\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            \"08/03/2012\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 13,
      "jothipillay": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalProjectNames.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * A utility class containing a list of {@code ProjectName} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class TypicalProjectNames {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public static final ProjectName NON_EXISTENT_PROJECT_NAME \u003d new ProjectName(\"DOES NOT EXIST\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final ProjectName TYPICAL_PROJECT_NAME_1 \u003d new ProjectName(\"PROJECT 1\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final ProjectName TYPICAL_PROJECT_NAME_2 \u003d new ProjectName(\"PROJECT 2\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dehui333": 11,
      "shunnizuka": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalProjects.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dehui333"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Client;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dehui333"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dehui333"
        },
        "content": " * A utility class containing a list of {@code Project} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dehui333"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dehui333"
        },
        "content": "public class TypicalProjects {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public static final Project PROJECT_ALICE \u003d new ProjectBuilder().withProjectName(\"Project Alice hey\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        .withClient(\"Dehui\").withDeadline(\"11/02/2019\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        .withDescrption(\"An application for Alice\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        .withEmployees(Arrays.asList(TypicalEmployees.BENSON, TypicalEmployees.CARL))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        .withMilestones(Arrays.asList(TypicalMilestones.TYPICAL_MILESTONE_START,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            TypicalMilestones.TYPICAL_MILESTONE_END)).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final Project PROJECT_BENSON \u003d new ProjectBuilder().withProjectName(\"Project Benson\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        .withClient(\"Jeff\").withDeadline(\"23/01/2011\").withDescrption(\"An application for Benson\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        .withEmployees(Arrays.asList(TypicalEmployees.CARL, TypicalEmployees.DANIEL))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        .withMilestones(Arrays.asList(TypicalMilestones.TYPICAL_MILESTONE_START,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            TypicalMilestones.TYPICAL_MILESTONE_END)).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public static final Project PROJECT_CARL \u003d new ProjectBuilder().withProjectName(\"Project Carl hey\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        .withClient(\"Darryl\").withDeadline(\"12/12/2012\").withDescrption(\"An application for Carl\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        .withEmployees(Arrays.asList(TypicalEmployees.DANIEL, TypicalEmployees.ELLE)).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final Project PROJECT_DANIEL \u003d new ProjectBuilder().withProjectName(\"Project Daniel\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        .withClient(\"Shune\").withDeadline(\"21/12/2012\").withDescrption(\"An application for Daniel\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        .withEmployees(Arrays.asList(TypicalEmployees.ELLE, TypicalEmployees.FIONA)).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final Project PROJECT_ELLE \u003d new ProjectBuilder().withProjectName(\"Project Elle\").withClient(\"Jothi\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        .withDeadline(\"22/03/2019\").withDescrption(\"An application for Elle\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        .withEmployees(Arrays.asList(TypicalEmployees.FIONA, TypicalEmployees.GEORGE)).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final Project PROJECT_FIONA \u003d new ProjectBuilder().withProjectName(\"Project Fiona\").withClient(\"SOC\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        .withDeadline(\"01/01/2020\").withDescrption(\"An application for Fiona\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        .withEmployees(Arrays.asList(TypicalEmployees.GEORGE, TypicalEmployees.ALICE)).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final Project PROJECT_GEORGE \u003d new ProjectBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        .withProjectName(\"Project George\").withClient(\"FASS\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        .withDeadline(\"11/02/2021\").withDescrption(\"An application for George\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        .withEmployees(Arrays.asList(TypicalEmployees.ALICE, TypicalEmployees.BENSON)).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final Project PROJECT_HOON \u003d new ProjectBuilder()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        .withProjectName(\"Project Hoon Meier\").withClient(\"FOE\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        .withDeadline(\"21/11/2018\").withDescrption(\"An application for Hoon Meir\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final Project PROJECT_IDA \u003d new ProjectBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        .withProjectName(\"Project Ida Mueller\").withClient(\"FOS\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        .withDeadline(\"3/3/2013\").withDescrption(\"An application for Ida Mueller\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final Project PROJECT_WHISKEY \u003d new Project(new ProjectName(\"Whiskey\"), new Client(\"Curry S\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        new Deadline(\"10/10/2010\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final Project PROJECT_XAVIER \u003d new Project(new ProjectName(\"Xavier\"), new Client(\"JJ Pte Ltd\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        new Deadline(\"02/03/2033\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final Project PROJECT_YANKEE \u003d new Project(new ProjectName(\"Yankee\"), new Client(\"Pang Po\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        new Deadline(\"13/12/2011\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final Project PROJECT_ZULU \u003d new Project(new ProjectName(\"Zulu\"), new Client(\"Shunnizuka\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        new Deadline(\"04/09/2023\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    // Manually added - Project\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final Project AMY \u003d new ProjectBuilder().withProjectName(VALID_NAME_AMY).withClient(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            .withDeadline(VALID_EMAIL_AMY).withClient(VALID_ADDRESS_AMY).withSkills(VALID_SKILL_C).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static final Project BOB \u003d new ProjectBuilder().withProjectName(VALID_NAME_BOB).withClient(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            .withDeadline(VALID_EMAIL_BOB).withClient(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            .withSkills(VALID_SKILL_JAVA, VALID_SKILL_C).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static final String KEYWORD_MATCHING_YANKEE \u003d \"Yankee\"; // A keyword that matches YANKEE"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    private TypicalProjects() {} // prevents instantiation"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns an {@code PocketProject} with all the typical projects."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static PocketProject getTypicalPocketProjectWithProjects() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        PocketProject ab \u003d new PocketProject();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Project project : getTypicalProjects()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            ab.addProject(project);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns an {@code PocketProject} with all the typical projects added to the given {@code PocketProject}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static PocketProject addTypicalProjects(PocketProject ab) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        for (Project project : getTypicalProjects()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            ab.addProject(project);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    public static List\u003cProject\u003e getTypicalProjects() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(PROJECT_ALICE, PROJECT_BENSON, PROJECT_CARL,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            PROJECT_DANIEL, PROJECT_ELLE, PROJECT_FIONA, PROJECT_GEORGE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dehui333"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dehui333"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 9,
      "dehui333": 66,
      "shunnizuka": 5,
      "jothipillay": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ListEmployeeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListEmployeeCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 2,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/EmployeeCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysEmployee;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import guitests.guihandles.EmployeeCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EmployeeBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class EmployeeCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // no skills"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employeeWithNoSkills \u003d new EmployeeBuilder().withSkills(new String[0]).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EmployeeCard employeeCard \u003d new EmployeeCard(employeeWithNoSkills, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uiPartRule.setUiPart(employeeCard);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCardDisplay(employeeCard, employeeWithNoSkills, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // with skills"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employeeWithSkills \u003d new EmployeeBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        employeeCard \u003d new EmployeeCard(employeeWithSkills, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uiPartRule.setUiPart(employeeCard);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCardDisplay(employeeCard, employeeWithSkills, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employee \u003d new EmployeeBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EmployeeCard employeeCard \u003d new EmployeeCard(employee, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // same employee, same index -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EmployeeCard copy \u003d new EmployeeCard(employee, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(employeeCard.equals(copy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(employeeCard.equals(employeeCard));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(employeeCard.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(employeeCard.equals(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // different employee, same index -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee differentEmployee \u003d new EmployeeBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(employeeCard.equals(new EmployeeCard(differentEmployee, 0)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // same employee, different index -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(employeeCard.equals(new EmployeeCard(employee, 1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Asserts that {@code employeeCard} displays the details of {@code expectedEmployee} correctly and matches"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private void assertCardDisplay(EmployeeCard employeeCard, Employee expectedEmployee, int expectedId) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EmployeeCardHandle employeeCardHandle \u003d new EmployeeCardHandle(employeeCard.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", employeeCardHandle.getId());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // verify employee details are displayed correctly"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCardDisplaysEmployee(expectedEmployee, employeeCardHandle);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 29,
      "jeffgan96": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/EmployeeListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.getTypicalEmployees;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EMPLOYEE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysEmployee;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import guitests.guihandles.EmployeeCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import guitests.guihandles.EmployeeListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class EmployeeListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final ObservableList\u003cEmployee\u003e TYPICAL_EMPLOYEES \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            FXCollections.observableList(getTypicalEmployees());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final SimpleObjectProperty\u003cEmployee\u003e selectedEmployee \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private EmployeeListPanelHandle employeeListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        initUi(TYPICAL_EMPLOYEES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_EMPLOYEES.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            employeeListPanelHandle.navigateToCard(TYPICAL_EMPLOYEES.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            Employee expectedEmployee \u003d TYPICAL_EMPLOYEES.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            EmployeeCardHandle actualCard \u003d employeeListPanelHandle.getEmployeeCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            assertCardDisplaysEmployee(expectedEmployee, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void selection_modelSelectedEmployeeChanged_selectionChanges() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        initUi(TYPICAL_EMPLOYEES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee secondEmployee \u003d TYPICAL_EMPLOYEES.get(INDEX_SECOND_EMPLOYEE.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        guiRobot.interact(() -\u003e selectedEmployee.set(secondEmployee));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EmployeeCardHandle expectedEmployee \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                employeeListPanelHandle.getEmployeeCardHandle(INDEX_SECOND_EMPLOYEE.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EmployeeCardHandle selectedEmployee \u003d employeeListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCardEquals(expectedEmployee, selectedEmployee);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Verifies that creating and deleting large number of employees in {@code EmployeeListPanel} requires lesser than"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ObservableList\u003cEmployee\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }, \"Creation and deletion of employee cards exceeded time limit\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Returns a list of employees containing {@code employeeCount} employees that is used to populate the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code EmployeeListPanel}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private ObservableList\u003cEmployee\u003e createBackingList(int employeeCount) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ObservableList\u003cEmployee\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        for (int i \u003d 0; i \u003c employeeCount; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d new Phone(\"000\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d new Email(\"a@aa\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d new Address(\"a\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            Employee employee \u003d new Employee(name, phone, email, address, Collections.emptySet());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            backingList.add(employee);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Initializes {@code employeeListPanelHandle} with a {@code EmployeeListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code EmployeeListPanel}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void initUi(ObservableList\u003cEmployee\u003e backingList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        EmployeeListPanel employeeListPanel \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new EmployeeListPanel(backingList, selectedEmployee, selectedEmployee::set);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        uiPartRule.setUiPart(employeeListPanel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        employeeListPanelHandle \u003d new EmployeeListPanelHandle(getChildNode(employeeListPanel.getRoot(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                EmployeeListPanelHandle.EMPLOYEE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 34,
      "jeffgan96": 17,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * A GUI unit test class for PocketProject."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.storage.JsonPocketProjectStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        JsonPocketProjectStorage jsonPocketProjectStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                new JsonPocketProjectStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonPocketProjectStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 4,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ProjectCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysProject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import guitests.guihandles.ProjectCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ProjectCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // no milestones"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Project projectWithNoMilestones \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ProjectCard projectCard \u003d new ProjectCard(projectWithNoMilestones, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uiPartRule.setUiPart(projectCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCardDisplay(projectCard, projectWithNoMilestones, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Project project \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ProjectCard projectCard \u003d new ProjectCard(project, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        //same project, same index -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ProjectCard copy \u003d new ProjectCard(project, 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(projectCard.equals(copy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        //same object -\u003e return true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTrue(projectCard.equals(projectCard));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(projectCard.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        //different types -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(projectCard.equals(0));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        //different project, same index -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Project differentProject \u003d new ProjectBuilder().withProjectName(\"differentName\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(projectCard.equals(new ProjectCard(differentProject, 0)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        //same project, different index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertFalse(projectCard.equals(new ProjectCard(project, 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Asserts that {@code projectCard} displays the details of {@code expectedProject} correctly and matches"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void assertCardDisplay(ProjectCard projectCard, Project expectedProject, int expectedId) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ProjectCardHandle projectCardHandle \u003d new ProjectCardHandle(projectCard.getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", projectCardHandle.getId());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        // verify project details are displayed correctly"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCardDisplaysProject(expectedProject, projectCardHandle);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 1,
      "jeffgan96": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ProjectListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalProjects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysProject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import guitests.guihandles.ProjectCardHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import guitests.guihandles.ProjectListPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.Client;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ProjectListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final ObservableList\u003cProject\u003e TYPICAL_PROJECTS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            FXCollections.observableList(getTypicalProjects());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private final SimpleObjectProperty\u003cProject\u003e selectedProject \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private ProjectListPanelHandle projectListPanelHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        initUi(TYPICAL_PROJECTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PROJECTS.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            projectListPanelHandle.navigateToCard(TYPICAL_PROJECTS.get(i));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            Project expectedProject \u003d TYPICAL_PROJECTS.get(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            ProjectCardHandle actualCard \u003d projectListPanelHandle.getProjectCardHandle(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            assertCardDisplaysProject(expectedProject, actualCard);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void selection_modelSelectedProjectChanged_selectionChanges() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        initUi(TYPICAL_PROJECTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Project secondProject \u003d TYPICAL_PROJECTS.get(INDEX_SECOND_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        guiRobot.interact(() -\u003e selectedProject.set(secondProject));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ProjectCardHandle expectedProject \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                projectListPanelHandle.getProjectCardHandle(INDEX_SECOND_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ProjectCardHandle selectedProject \u003d projectListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCardEquals(expectedProject, selectedProject);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Verifies that creating and deleting large number of projects in {@code ProjectListPanel} requires lesser than"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ObservableList\u003cProject\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }, \"Creation and deletion of project cards exceeded time limit\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns a list of projects containing {@code projectCount} projects that is used to populate the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * {@code ProjectListPanel}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private ObservableList\u003cProject\u003e createBackingList(int projectCount) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ObservableList\u003cProject\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        for (int i \u003d 0; i \u003c projectCount; i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            ProjectName name \u003d new ProjectName(i + \"a\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            Client client \u003d new Client(\"a\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"12/12/2012\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            Project project \u003d new Project(name, client, deadline);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            backingList.add(project);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Initializes {@code projectListPanelHandle} with a {@code ProjectListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code ProjectListPanel}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void initUi(ObservableList\u003cProject\u003e backingList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        ProjectListPanel projectListPanel \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                new ProjectListPanel(backingList, selectedProject, selectedProject::set);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        uiPartRule.setUiPart(projectListPanel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        projectListPanelHandle \u003d new ProjectListPanelHandle(getChildNode(projectListPanel.getRoot(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                ProjectListPanelHandle.PROJECT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffgan96": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private final PocketProject pocketProject \u003d new PocketProject();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, pocketProject);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        guiRobot.interact(() -\u003e pocketProject.addEmployee(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 5,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import guitests.guihandles.EmployeeCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import guitests.guihandles.EmployeeListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import guitests.guihandles.ProjectCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static void assertCardEquals(EmployeeCardHandle expectedCard, EmployeeCardHandle actualCard) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(expectedCard.getSkills(), actualCard.getSkills());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static void assertCardEquals(ProjectCardHandle expectedCard, ProjectCardHandle actualCard) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedCard.getProjectName(), actualCard.getProjectName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedCard.getClient(), actualCard.getClient());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedCard.getDeadline(), actualCard.getDeadline());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedEmployee}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static void assertCardDisplaysEmployee(Employee expectedEmployee, EmployeeCardHandle actualCard) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedEmployee.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedEmployee.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedEmployee.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedEmployee.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(expectedEmployee.getSkills().stream().map(skill -\u003e skill.skillName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                actualCard.getSkills());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Asserts that the list in {@code employeeListPanelHandle} displays the details of {@code employees} correctly and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static void assertListMatching(EmployeeListPanelHandle employeeListPanelHandle, Employee... employees) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        for (int i \u003d 0; i \u003c employees.length; i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            employeeListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            assertCardDisplaysEmployee(employees[i], employeeListPanelHandle.getEmployeeCardHandle(i));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Asserts that the list in {@code employeeListPanelHandle} displays the details of {@code employees} correctly and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static void assertListMatching(EmployeeListPanelHandle employeeListPanelHandle, List\u003cEmployee\u003e employees) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertListMatching(employeeListPanelHandle, employees.toArray(new Employee[0]));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Asserts the size of the list in {@code employeeListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public static void assertListSize(EmployeeListPanelHandle employeeListPanelHandle, int size) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        int numberOfPeople \u003d employeeListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedProject}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static void assertCardDisplaysProject(Project expectedProject, ProjectCardHandle actualCard) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedProject.getProjectName().projectName, actualCard.getProjectName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedProject.getClient().client, actualCard.getClient());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertEquals(expectedProject.getDeadline().deadline, actualCard.getDeadline());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 19,
      "jeffgan96": 23,
      "-": 54
    }
  },
  {
    "path": "src/test/java/systemtests/AddEmployeeCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SKILL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_C;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.ALICE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.CARL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.HOON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.IDA;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddEmployeeCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EmployeeBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EmployeeUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class AddEmployeeCommandSystemTest extends PocketProjectSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void addEmployee() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: add a employee without skills to a non-empty pocket project, command with leading spaces and trailing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "         * spaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Employee toAdd \u003d AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String command \u003d \" \" + AddEmployeeCommand.COMMAND_WORD + \" \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + SKILL_DESC_C + \" \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.addEmployee(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: add a employee with all fields same as another employee in the pocket project except name -\u003e added */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        toAdd \u003d new EmployeeBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddEmployeeCommand.COMMAND_WORD + \" \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + SKILL_DESC_C;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: add a employee with all fields same as another employee in the pocket project except phone and email"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        toAdd \u003d new EmployeeBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d EmployeeUtil.getAddEmployeeCommand(toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: add to empty pocket project -\u003e added */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        deleteAllEmployees();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        /* Case: add a employee with mixed case command words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dehui333"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dehui333"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        toAdd \u003d AMY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        command \u003d \"   \" + \"AdD\" + \"  \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + \" \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                + SKILL_DESC_C + \" \";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        deleteAllEmployees();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        /* Case: add a employee with mixed case key words"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dehui333"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dehui333"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        toAdd \u003d AMY;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        command \u003d \"   \" + AddEmployeeCommand.COMMAND_WORD + \"  \" + \"EmPloyee\" + \" \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                + SKILL_DESC_C + \" \";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        deleteAllEmployees();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        /* Case: add a employee with alias for employee"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dehui333"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dehui333"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        toAdd \u003d AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        command \u003d \"   \" + AddEmployeeCommand.COMMAND_WORD + \"  \" + \"e\" + \" \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                + SKILL_DESC_C + \" \";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        deleteAllEmployees();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: add a employee with skills, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        command \u003d AddEmployeeCommand.COMMAND_WORD + \" \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + SKILL_DESC_C"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB + SKILL_DESC_JAVA + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: add a employee, missing skills -\u003e added */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: filters the employee list before adding -\u003e added */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* ------------------------ Perform add operation while a employee card is selected ------------------------- */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: selects first card in the employee list, add a employee -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        viewEmployee(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: add a duplicate employee -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d EmployeeUtil.getAddEmployeeCommand(HOON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, AddEmployeeCommand.MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: add a duplicate employee except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        toAdd \u003d new EmployeeBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d EmployeeUtil.getAddEmployeeCommand(toAdd);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, AddEmployeeCommand.MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: add a duplicate employee except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        toAdd \u003d new EmployeeBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d EmployeeUtil.getAddEmployeeCommand(toAdd);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, AddEmployeeCommand.MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: add a duplicate employee except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        toAdd \u003d new EmployeeBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d EmployeeUtil.getAddEmployeeCommand(toAdd);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, AddEmployeeCommand.MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: add a duplicate employee except with different skills -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        command \u003d EmployeeUtil.getAddEmployeeCommand(HOON) + \" \" + PREFIX_SKILL.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, AddEmployeeCommand.MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddEmployeeCommand.COMMAND_WORD + \" \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEmployeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddEmployeeCommand.COMMAND_WORD + \" \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEmployeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddEmployeeCommand.COMMAND_WORD + \" \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEmployeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddEmployeeCommand.COMMAND_WORD + \" \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEmployeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        command \u003d \"adds \" + EmployeeUtil.getEmployeeDetails(toAdd);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddEmployeeCommand.COMMAND_WORD + \" \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddEmployeeCommand.COMMAND_WORD + \" \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddEmployeeCommand.COMMAND_WORD + \" \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddEmployeeCommand.COMMAND_WORD + \" \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        /* Case: invalid skill -\u003e rejected */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddEmployeeCommand.COMMAND_WORD + \" \" + AddEmployeeCommand.ADD_EMPLOYEE_KEYWORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + INVALID_SKILL_DESC;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(command, Skill.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Executes the {@code AddEmployeeCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddEmployeeCommand} with the details of"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * 4. {@code Storage} and {@code EmployeeListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void assertCommandSuccess(Employee toAdd) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(EmployeeUtil.getAddEmployeeCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Employee)}. Executes {@code command}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @see AddEmployeeCommandSystemTest#assertCommandSuccess(Employee)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void assertCommandSuccess(String command, Employee toAdd) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.addEmployee(toAdd);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddEmployeeCommand.MESSAGE_ADD_EMPLOYEE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Employee)} except asserts that"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * 2. {@code Storage} and {@code EmployeeListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @see AddEmployeeCommandSystemTest#assertCommandSuccess(String, Employee)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * 4. {@code Storage} and {@code EmployeeListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 40,
      "jeffgan96": 19,
      "dehui333": 30,
      "-": 149,
      "jothipillay": 49
    }
  },
  {
    "path": "src/test/java/systemtests/AddEmployeeToCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddEmployeeToCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddToCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.testutil.TypicalProjects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class AddEmployeeToCommandSystemTest extends PocketProjectSystemTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void addEmployeeTo() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Model model \u003d getProjectModel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* ------------------------ Perform addto operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: add an employee to a project in the non-empty pocket project, command with leading spaces and trailing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "         * spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Project targetProject \u003d model.getProjectWithName(TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        int validIndex \u003d model.getFilteredEmployeeList().size() - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Employee targetEmployee \u003d model.getFilteredEmployeeList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            .get(Index.fromOneBased(model.getFilteredEmployeeList().size() - 1).getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String command \u003d AddToCommand.COMMAND_WORD + \" \" + targetProject.getProjectName() + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + AddEmployeeToCommand.ADD_EMPLOYEE_KEYWORD + \" \" + validIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(command, targetProject, targetEmployee);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: undo adding employee to Project Alice */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        model.addEmployeeTo(targetProject, targetEmployee);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* ----------------------------------- Perform invalid addto operations ------------------------------------- */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: add a duplicate employee to a project -\u003e rejected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddToCommand.COMMAND_WORD + \" \" + targetProject.getProjectName() + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                + AddEmployeeToCommand.ADD_EMPLOYEE_KEYWORD + \" \" + validIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, AddEmployeeToCommand.MESSAGE_DUPLICATE_PROJ_EMPLOYEE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: missing command word -\u003e rejected */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d targetProject.getProjectName() + \" \" + AddEmployeeToCommand.ADD_EMPLOYEE_KEYWORD + \" \" + validIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, String.format(Messages.MESSAGE_UNKNOWN_COMMAND));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: missing project name -\u003e rejected */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddToCommand.COMMAND_WORD + \" \" + AddEmployeeToCommand.ADD_EMPLOYEE_KEYWORD + \" \" + validIndex;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            AddToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: missing employee keyword -\u003e rejected */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddToCommand.COMMAND_WORD + \" \" + targetProject.getProjectName() + \" \" + validIndex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                AddToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: missing employee index -\u003e rejected */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddToCommand.COMMAND_WORD + \" \" + targetProject.getProjectName() + \" \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                + AddEmployeeToCommand.ADD_EMPLOYEE_KEYWORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                AddToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Executes the {@code AddEmployeeToCommand} that adds {@code targetEmployee}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * to {@code targetProject} in the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddEmployeeToCommand} with the details of"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 4. {@code Storage} equal to the corresponding components in"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * the current model added with {@code targetEmployee} and {@code targetProject}.\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private void assertCommandSuccess(String command, Project targetProject, Employee targetEmployee) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        expectedModel.addEmployeeTo(targetProject, targetEmployee);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddEmployeeToCommand.MESSAGE_ADDTOPROJECT_EMPLOYEE_SUCCESS,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            targetEmployee, targetProject.getProjectName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Project, Employee)} except asserts that"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 2. {@code Storage} and {@code EmployeeListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @see AddEmployeeToCommandSystemTest#assertCommandSuccess(String, Project, Employee)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 4. {@code Storage} and {@code EmployeeListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jothipillay": 140
    }
  },
  {
    "path": "src/test/java/systemtests/AddMilestoneToCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddMilestoneToCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddToCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Milestone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.testutil.ProjectUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.testutil.TypicalMilestones;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.testutil.TypicalProjects;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class AddMilestoneToCommandSystemTest extends PocketProjectSystemTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void addMilestoneTo() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Model model \u003d getProjectModel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* ------------------------ Perform addto operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: add a milestone to a project in the non-empty pocket project, command with leading spaces and trailing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "         * spaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Project targetProject \u003d model.getProjectWithName(TypicalProjects.PROJECT_ALICE.getProjectName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Milestone milestone \u003d TypicalMilestones.TYPICAL_MILESTONE_COMPLETED_UG;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(targetProject, milestone);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: undo adding milestone to Project Alice */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: redo adding milestone to the list -\u003e milestone added again */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        model.addMilestoneTo(targetProject, milestone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* ----------------------------------- Perform invalid addto operations ------------------------------------- */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: add a duplicate milestone to a project -\u003e rejected */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d ProjectUtil.getAddMilestoneToCommand(targetProject, milestone);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, AddMilestoneToCommand.MESSAGE_DUPLICATE_MILESTONE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: missing command word -\u003e rejected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d targetProject.getProjectName() + \" \" + AddMilestoneToCommand.ADD_MILESTONE_KEYWORD + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + ProjectUtil.getMilestoneDetails(TypicalMilestones.TYPICAL_MILESTONE_GUI_V2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, String.format(Messages.MESSAGE_UNKNOWN_COMMAND));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: missing project name -\u003e rejected */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddToCommand.COMMAND_WORD + \" \" + AddMilestoneToCommand.ADD_MILESTONE_KEYWORD + \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + ProjectUtil.getMilestoneDetails(TypicalMilestones.TYPICAL_MILESTONE_GUI_V2);;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                AddToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: missing milestone keyword -\u003e rejected */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddToCommand.COMMAND_WORD + \" \" + targetProject.getProjectName() + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + ProjectUtil.getMilestoneDetails(TypicalMilestones.TYPICAL_MILESTONE_GUI_V2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                AddToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: missing milestone details -\u003e rejected */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d AddToCommand.COMMAND_WORD + \" \" + targetProject.getProjectName() + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + AddMilestoneToCommand.ADD_MILESTONE_KEYWORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                AddToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Executes the {@code AddMilestoneToCommand} that adds {@code milestone} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddMilestoneToCommand} with the details of"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * {@code milestone}.\u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 4. {@code Storage} equal to the corresponding components in"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * the current model added with {@code milestone}.\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private void assertCommandSuccess(Project targetProject, Milestone milestone) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(ProjectUtil.getAddMilestoneToCommand(targetProject, milestone), targetProject, milestone);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Project, Milestone)}. Executes {@code command}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * instead. @see AddMilestoneToCommandSystemTest#assertCommandSuccess(Project, Milestone)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private void assertCommandSuccess(String command, Project targetProject, Milestone milestone) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Model expectedModel \u003d getProjectModel();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        expectedModel.addMilestoneTo(targetProject, milestone);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddMilestoneToCommand.MESSAGE_ADD_MILESTONE_SUCCESS,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                milestone, targetProject.getProjectName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Project, Milestone)} except asserts that"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 2. {@code Storage} equal to the corresponding components in"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @see AddMilestoneToCommandSystemTest#assertCommandSuccess(String, Project, Milestone)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 4. {@code Storage} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jothipillay": 153
    }
  },
  {
    "path": "src/test/java/systemtests/AddProjectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_WHISKEY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_YANKEE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_ZULU;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.AddProjectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.testutil.ProjectUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "public class AddProjectCommandSystemTest extends PocketProjectSystemTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public void addProject() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Model model \u003d getProjectModel();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: add a project with only name, client and deadline to a non-empty pocket project, command with leading"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "         * spaces and trailing spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Project toAdd \u003d PROJECT_ZULU;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: undo adding Project Zulu to the list -\u003e Project Zulu deleted */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: redo adding Project Zulu to the list -\u003e Project Zulu added again */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        model.addProject(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: add a employee with all fields same as another employee in the pocket project except name -\u003e added */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        toAdd \u003d new Project(new ProjectName(\"Zululu\"), new Client(\"Shunnizuka\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "                new Deadline(\"04/09/2023\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: add to empty pocket project -\u003e added */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        deleteAllProjects();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //TODO find then add -\u003e find may be buggy?"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: filters the project list before adding -\u003e added */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(PROJECT_YANKEE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(PROJECT_WHISKEY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //showProjectsWithName(KEYWORD_MATCHING_YANKEE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //assertCommandSuccess(PROJECT_XAVIER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* ------------------------ Perform add operation while a project card is selected ------------------------- */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        /* Case: selects first card in the project list, add a project -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //TODO view then add"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Executes the {@code AddProjectCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddProjectCommand} with the details of"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 4. {@code Storage} and {@code ProjectListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private void assertCommandSuccess(Project toAdd) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(ProjectUtil.getAddProjectCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Employee)}. Executes {@code command}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @see AddProjectCommandSystemTest#assertCommandSuccess(Project)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private void assertCommandSuccess(String command, Project toAdd) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Model expectedModel \u003d getProjectModel();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        expectedModel.addProject(toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddProjectCommand.MESSAGE_ADD_PROJECT_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Project)} except asserts that"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 2. {@code Storage} and {@code ProjectListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @see AddProjectCommandSystemTest#assertCommandSuccess(String, Project)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 4. {@code Storage} and {@code ProjectListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jothipillay": 139
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class ClearCommandSystemTest extends PocketProjectSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: selects first card in employee list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        viewEmployee(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: filters the employee list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        /* Case: clear empty address book with mixed case command words -\u003e cleared */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandSuccess(\"ClEaR\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 7,
      "jeffgan96": 3,
      "dehui333": 3,
      "-": 88
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteEmployeeCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import static seedu.address.logic.commands.DeleteEmployeeCommand.MESSAGE_DELETE_EMPLOYEE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TestUtil.getEmployee;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.logic.commands.DeleteEmployeeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class DeleteEmployeeCommandSystemTest extends PocketProjectSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dehui333"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteEmployeeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: delete the first employee in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        String command \u003d \"     \" + DeleteEmployeeCommand.COMMAND_WORD + \"      \" + \" employee \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                                + INDEX_FIRST_EMPLOYEE.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee deletedEmployee \u003d removeEmployee(expectedModel, INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, deletedEmployee);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: delete the last employee in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index lastEmployeeIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandSuccess(lastEmployeeIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: undo deleting the last employee in the list -\u003e last employee restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: redo deleting the last employee in the list -\u003e last employee deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        removeEmployee(modelBeforeDeletingLast, lastEmployeeIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: delete the middle employee in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index middleEmployeeIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandSuccess(middleEmployeeIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: filtered employee list, delete index within bounds of address book and employee list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index index \u003d INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredEmployeeList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: filtered employee list, delete index within bounds of address book but out of bounds of employee list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        int invalidIndex \u003d getModel().getPocketProject().getEmployeeList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        command \u003d DeleteEmployeeCommand.COMMAND_WORD + \" employee \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* --------------------- Performing delete operation while a employee card is selected ---------------------- */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: delete the selected employee -\u003e employee list panel selects the employee before the deleted employee */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showAllEmployees();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        viewEmployee(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        command \u003d DeleteEmployeeCommand.COMMAND_WORD + \" employee \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        deletedEmployee \u003d removeEmployee(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, deletedEmployee);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        command \u003d DeleteEmployeeCommand.COMMAND_WORD + \" employee 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        command \u003d DeleteEmployeeCommand.COMMAND_WORD + \" employee -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                getModel().getPocketProject().getEmployeeList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        command \u003d DeleteEmployeeCommand.COMMAND_WORD + \" employee \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandFailure(DeleteEmployeeCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                + \" employee abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandFailure(DeleteEmployeeCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                + \" employee 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Removes the {@code Employee} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * @return the removed employee"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private Employee removeEmployee(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee targetEmployee \u003d getEmployee(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.deleteEmployee(targetEmployee);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        return targetEmployee;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * Deletes the employee at {@code toDelete} by"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * creating a default {@code DeleteEmployeeCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * @see DeleteEmployeeCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee deletedEmployee \u003d removeEmployee(expectedModel, toDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, deletedEmployee);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dehui333"
        },
        "content": "                DeleteEmployeeCommand.COMMAND_WORD + \" employee \" + toDelete.getOneBased(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ditan96"
        },
        "content": "                                expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dehui333"
        },
        "content": "     * @see DeleteEmployeeCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see PocketProjectSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 35,
      "jeffgan96": 14,
      "dehui333": 18,
      "-": 128
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SKILL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_C;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EMPLOYEES;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EMPLOYEE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.skill.Skill;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EmployeeBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.testutil.EmployeeUtil;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class EditCommandSystemTest extends PocketProjectSystemTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Index index \u003d INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + SKILL_DESC_JAVA + \" \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee editedEmployee \u003d new EmployeeBuilder(BOB).withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandSuccess(command, index, editedEmployee);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: undo editing the last employee in the list -\u003e last employee restored */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: redo editing the last employee in the list -\u003e last employee edited again */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.setEmployee(getModel().getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased()),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            editedEmployee);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: edit a employee with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + ADDRESS_DESC_BOB + SKILL_DESC_C + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: edit a employee with new values same as another employee\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(getModel().getPocketProject().getEmployeeList().contains(BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        index \u003d INDEX_SECOND_EMPLOYEE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertNotEquals(getModel().getFilteredEmployeeList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + ADDRESS_DESC_BOB + SKILL_DESC_C + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedEmployee \u003d new EmployeeBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandSuccess(command, index, editedEmployee);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: edit a employee with new values same as another employee\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        index \u003d INDEX_SECOND_EMPLOYEE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + ADDRESS_DESC_BOB + SKILL_DESC_C + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedEmployee \u003d new EmployeeBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandSuccess(command, index, editedEmployee);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        index \u003d INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_SKILL.getPrefix();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee employeeToEdit \u003d getModel().getFilteredEmployeeList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedEmployee \u003d new EmployeeBuilder(employeeToEdit).withSkills().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandSuccess(command, index, editedEmployee);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: filtered employee list, edit index within bounds of address book and employee list -\u003e edited */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        index \u003d INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredEmployeeList().size());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        employeeToEdit \u003d getModel().getFilteredEmployeeList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        editedEmployee \u003d new EmployeeBuilder(employeeToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandSuccess(command, index, editedEmployee);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: filtered employee list, edit index within bounds of address book but out of bounds of employee list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        int invalidIndex \u003d getModel().getPocketProject().getEmployeeList().size();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* --------------------- Performing edit operation while a employee card is selected ----------------------- */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: selects first card in the employee list, edit a employee -\u003e edited, card selection remains unchanged"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "         * but browser url changes"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showAllEmployees();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        index \u003d INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        viewEmployee(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + ADDRESS_DESC_AMY + SKILL_DESC_C;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // browser\u0027s url is updated to reflect the new employee\u0027s name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredEmployeeList().size() + 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        /* Case: invalid skill -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased() + INVALID_SKILL_DESC,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            Skill.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: edit a employee with new values same as another employee\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        executeCommand(EmployeeUtil.getAddEmployeeCommand(BOB));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(getModel().getPocketProject().getEmployeeList().contains(BOB));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        index \u003d INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(getModel().getFilteredEmployeeList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + ADDRESS_DESC_BOB + SKILL_DESC_C + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: edit a employee with new values same as another employee\u0027s values but with different tags -\u003e rejected*/"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + ADDRESS_DESC_BOB + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: edit an employee with new values same as another employee\u0027s values but with different address -\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "         * rejected"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + ADDRESS_DESC_AMY + SKILL_DESC_C + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: edit a employee with new values same as another employee\u0027s values but with different phone -\u003e rejected"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + ADDRESS_DESC_BOB + SKILL_DESC_C + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: edit a employee with new values same as another employee\u0027s values but with different email -\u003e rejected"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            + ADDRESS_DESC_BOB + SKILL_DESC_C + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Employee, Index)} except that"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Employee, Index)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Employee editedEmployee) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedEmployee, null);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the employee at index {@code toEdit} being"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * updated to values specified {@code editedEmployee}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Employee editedEmployee,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        Employee toEditEmployee \u003d expectedModel.getFilteredEmployeeList().get(toEdit.getZeroBased());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.setEmployee(expectedModel.getFilteredEmployeeList().get(toEdit.getZeroBased()), editedEmployee);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        //if no change made to the employee then don\u0027t need to check"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        if (!toEditEmployee.equals(editedEmployee)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            assertTrue(assertProjectEmployeeEditSuccess(expectedModel, toEditEmployee));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            String.format(EditCommand.MESSAGE_EDIT_EMPLOYEE_SUCCESS, editedEmployee), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see PocketProjectSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        expectedModel.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * To check if the employee in the project\u0027s employee list is also edited"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * by checking if the old instance of the employee still exists"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private boolean assertProjectEmployeeEditSuccess(Model expected, Employee toEdit) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        for (Project project: expected.getProjectList()) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            if (project.containsEmployee(toEdit)) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 76,
      "jeffgan96": 38,
      "-": 189,
      "shunnizuka": 20,
      "jothipillay": 1
    }
  },
  {
    "path": "src/test/java/systemtests/FindEmployeeCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPLOYEES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.CARL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.DANIEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.FindEmployeeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class FindEmployeeCommandSystemTest extends PocketProjectSystemTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find multiple employees in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "         * -\u003e 2 employees found"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        String command \u003d \"   \" + FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: repeat previous find command where employee list is displaying the employees we are finding"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "         * -\u003e 2 employees found"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find employee where employee list is not displaying the employee we are finding -\u003e 1 employee found */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD + \" Carl\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find multiple employees in address book, 2 keywords -\u003e 2 employees found */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find multiple employees in address book, 2 keywords in reversed order -\u003e 2 employees found */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find multiple employees in address book, 2 keywords with 1 repeat -\u003e 2 employees found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find multiple employees in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "         * -\u003e 2 employees found"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find same employees in address book after deleting 1 of them -\u003e 1 employee found */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" employee 1\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(getModel().getPocketProject().getEmployeeList().contains(BENSON));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find employee in address book, keyword is same as name but of different case -\u003e 1 employee found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD + \" MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        /* Case: find employee in address book, command word is of mixed case -\u003e 1 employee found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        command \u003d \"FinD\" + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD + \" Meier\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dehui333"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find employee in address book, keyword is substring of name -\u003e 0 employees found */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD + \" Mei\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find employee in address book, name is substring of keyword -\u003e 0 employees found */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD + \" Meiers\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find employee not in address book -\u003e 0 employees found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD + \" Mark\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find while a employee is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showAllEmployees();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        viewEmployee(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(getEmployeeListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD + \" Daniel\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find employee in empty address book -\u003e 0 employees found */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        deleteAllEmployees();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD + \" \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * box displays {@code Messages#MESSAGE_EMPLOYEES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            MESSAGE_EMPLOYEES_LISTED_OVERVIEW, expectedModel.getFilteredEmployeeList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 16,
      "jeffgan96": 5,
      "dehui333": 6,
      "-": 115,
      "shunnizuka": 34
    }
  },
  {
    "path": "src/test/java/systemtests/FindProjectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PROJECTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.logic.commands.DeleteProjectCommand.DELETE_PROJECT_KEYWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.PROJECT_DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.FindProjectCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.ListProjectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "public class FindProjectCommandSystemTest extends PocketProjectSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find multiple projects in Pocket Project, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "         * -\u003e 2 projects found"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        String command \u003d \"   \" + FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \" \" + \"hey\" + \"   \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setProjectFilteredList(expectedModel, PROJECT_ALICE, PROJECT_CARL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedProjectCardUnchanged();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: repeat previous find command where project list is displaying the projects we are finding"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "         * -\u003e 2 projects found"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \"hey\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedProjectCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find project where project list is not displaying the project we are finding -\u003e 1 project found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setProjectFilteredList(expectedModel, PROJECT_CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedProjectCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find multiple projects in Pocket Project, 2 keywords -\u003e 2 projects found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setProjectFilteredList(expectedModel, PROJECT_BENSON, PROJECT_DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedProjectCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find multiple projects in Pocket Project, 2 keywords in reversed order -\u003e 2 projects found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedProjectCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find multiple projects in Pocket Project, 2 keywords with 1 repeat -\u003e 2 projects found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedProjectCardUnchanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find multiple projects in Pocket Project, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "         * -\u003e 2 projects found"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedProjectCardUnchanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find same projects in Pocket Project after deleting 1 of them -\u003e 1 project found */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD + \" \" + ListProjectCommand.LIST_PROJECT_KEYWORD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + DELETE_PROJECT_KEYWORD + \" 3\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(getModel().getPocketProject().getProjectList().contains(PROJECT_CARL));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD + \" \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \"hey\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setProjectFilteredList(expectedModel, PROJECT_ALICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedProjectCardUnchanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find project in Pocket Project, keyword is same as name but of different case -\u003e 1 project found */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD + \" HeY\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedProjectCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find project in Pocket Project, command word is of mixed case -\u003e 1 project found */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d \"FinD\" + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD + \" Hey\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedProjectCardUnchanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find project in Pocket Project, keyword is substring of name -\u003e 0 projects found */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD + \" he\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setProjectFilteredList(expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedProjectCardUnchanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find project in Pocket Project, name is substring of keyword -\u003e 0 projects found */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD + \" heeeeeeey\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setProjectFilteredList(expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedProjectCardUnchanged();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find project not in Pocket Project -\u003e 0 projects found */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD + \" Mark\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedProjectCardUnchanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        //TODO View Project stuff"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find while a project is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        showAllProjects();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        viewProject(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(getEmployeeListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD + \" Daniel\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find employee in empty Pocket Project -\u003e 0 projects found */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        deleteAllProjects();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD + \" \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \"hey\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setProjectFilteredList(expectedModel, PROJECT_DANIEL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedProjectCardUnchanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * box displays {@code Messages#MESSAGE_projects_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            MESSAGE_PROJECTS_LISTED_OVERVIEW, expectedModel.getFilteredProjectList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedProjectCardUnchanged();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shunnizuka": 183
    }
  },
  {
    "path": "src/test/java/systemtests/FindSkillCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPLOYEES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.DANIEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.FindSkillCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "public class FindSkillCommandSystemTest extends PocketProjectSystemTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find multiple employees in Pocket Project, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "         * -\u003e 2 employees found"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        String command \u003d \"   \" + FindSkillCommand.COMMAND_WORD + \" \" + FindSkillCommand.FIND_SKILL_KEYWORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \" \" + \"java\" + \"   \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ALICE, BENSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: repeat previous find command where employee list is displaying the employees we are finding"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "         * -\u003e 2 employees found"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "         */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindSkillCommand.COMMAND_WORD + \" \" + FindSkillCommand.FIND_SKILL_KEYWORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \"java\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find employee where employee list is not displaying the employee we are finding -\u003e 1 employee found */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindSkillCommand.COMMAND_WORD + \" \" + FindSkillCommand.FIND_SKILL_KEYWORD + \" Assembly\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find multiple employees in Pocket Project, 2 keywords -\u003e 2 employees found */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindSkillCommand.COMMAND_WORD + \" \" + FindSkillCommand.FIND_SKILL_KEYWORD + \" CSS Assembly\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find multiple employees in Pocket Project, 2 keywords in reversed order -\u003e 2 employees found */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindSkillCommand.COMMAND_WORD + \" \" + FindSkillCommand.FIND_SKILL_KEYWORD + \" Assembly CSS\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find multiple employees in Pocket Project, 2 keywords with 1 repeat -\u003e 2 employees found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindSkillCommand.COMMAND_WORD + \" \" + FindSkillCommand.FIND_SKILL_KEYWORD"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \" CSS Assembly CSS\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find multiple employees in Pocket Project, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "         * -\u003e 2 employees found"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindSkillCommand.COMMAND_WORD + \" \" + FindSkillCommand.FIND_SKILL_KEYWORD"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \" Css Assembly suppppp\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find same employees in Pocket Project after deleting 1 of them -\u003e 1 employee found */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" employee 1\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(getModel().getPocketProject().getEmployeeList().contains(BENSON));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindSkillCommand.COMMAND_WORD + \" \" + FindSkillCommand.FIND_SKILL_KEYWORD + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \"CSS Assembly\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find employee in Pocket Project, keyword is same as name but of different case -\u003e 1 employee found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindSkillCommand.COMMAND_WORD + \" \" + FindSkillCommand.FIND_SKILL_KEYWORD + \" aSseMBly\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find employee in Pocket Project, command word is of mixed case -\u003e 1 employee found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d \"FinD\" + \" \" + FindSkillCommand.FIND_SKILL_KEYWORD + \" Assembly\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find employee in Pocket Project, keyword is substring of name -\u003e 0 employees found */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindSkillCommand.COMMAND_WORD + \" \" + FindSkillCommand.FIND_SKILL_KEYWORD + \" Asa\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find employee in Pocket Project, name is substring of keyword -\u003e 0 employees found */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindSkillCommand.COMMAND_WORD + \" \" + FindSkillCommand.FIND_SKILL_KEYWORD + \" assemblyyyyyyyy\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find employee not in Pocket Project -\u003e 0 employees found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindSkillCommand.COMMAND_WORD + \" \" + FindSkillCommand.FIND_SKILL_KEYWORD + \" Mark\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find while a employee is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        showAllEmployees();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        viewEmployee(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(getEmployeeListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindSkillCommand.COMMAND_WORD + \" \" + FindSkillCommand.FIND_SKILL_KEYWORD + \" Assembly\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        /* Case: find employee in empty Pocket Project -\u003e 0 employees found */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        deleteAllEmployees();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        command \u003d FindSkillCommand.COMMAND_WORD + \" \" + FindSkillCommand.FIND_SKILL_KEYWORD + \" \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \"Assembly\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * box displays {@code Messages#MESSAGE_EMPLOYEES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            MESSAGE_EMPLOYEES_LISTED_OVERVIEW, expectedModel.getFilteredEmployeeList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shunnizuka": 176
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewEmployeeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class HelpCommandSystemTest extends PocketProjectSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        getEmployeeListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        executeCommand(ViewCommand.COMMAND_WORD + \" \" + ViewEmployeeCommand.VIEW_EMPLOYEE_KEYWORD + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                + INDEX_FIRST_EMPLOYEE.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertListMatching(getEmployeeListPanel(), getModel().getFilteredEmployeeList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        // note: the view command tested above does not update the status bar"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dehui333"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" employee \" + INDEX_FIRST_EMPLOYEE.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 4,
      "jeffgan96": 5,
      "dehui333": 1,
      "-": 93
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    private static final Predicate\u003cEmployee\u003e PREDICATE_MATCHING_NO_EMPLOYEES \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    private static final Predicate\u003cProject\u003e PREDICATE_MATCHING_NO_PROJECTS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cEmployee\u003e toDisplay) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        Optional\u003cPredicate\u003cEmployee\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        model.updateFilteredEmployeeList(predicate.orElse(PREDICATE_MATCHING_NO_EMPLOYEES));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static void setFilteredList(Model model, Employee... toDisplay) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * @see ModelHelper#setProjectFilteredList(Model, List)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public static void setProjectFilteredList(Model model, Project... toDisplay) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        setProjectFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    public static void setProjectFilteredList(Model model, List\u003cProject\u003e toDisplay) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        Optional\u003cPredicate\u003cProject\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            toDisplay.stream().map(ModelHelper::getProjectPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        model.updateFilteredProjectList(predicate.orElse(PREDICATE_MATCHING_NO_PROJECTS));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Employee} equals to {@code other}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    private static Predicate\u003cEmployee\u003e getPredicateMatching(Employee other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return employee -\u003e employee.equals(other);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Project} equals to {@code other}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    private static Predicate\u003cProject\u003e getProjectPredicateMatching(Project other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return project -\u003e project.equals(other);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 3,
      "jeffgan96": 5,
      "-": 32,
      "shunnizuka": 8,
      "jothipillay": 15
    }
  },
  {
    "path": "src/test/java/systemtests/PocketProjectSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import guitests.guihandles.EmployeeListPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import guitests.guihandles.ProjectListPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ditan96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "import seedu.address.logic.commands.FindEmployeeCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.FindProjectCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ListEmployeeCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "import seedu.address.logic.commands.ListProjectCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewEmployeeCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dehui333"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ditan96"
        },
        "content": " * A system test class for PocketProject, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public abstract class PocketProjectSystemTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    protected PocketProject getInitialData() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return TestUtil.typicalPocketProject();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public EmployeeListPanelHandle getEmployeeListPanel() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        return mainWindowHandle.getEmployeeListPanel();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    public ProjectListPanelHandle getProjectListPanel() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        return mainWindowHandle.getProjectListPanel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Displays all employees in the address book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    protected void showAllEmployees() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD + \" \" + ListEmployeeCommand.LIST_EMPLOYEE_KEYWORD);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(getModel().getPocketProject().getEmployeeList().size(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            getModel().getFilteredEmployeeList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Displays all projects in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    protected void showAllProjects() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD + \" \" + ListProjectCommand.LIST_PROJECT_KEYWORD);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertEquals(getModel().getPocketProject().getProjectList().size(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            getModel().getFilteredProjectList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * Displays all employees with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    protected void showEmployeesWithName(String keyword) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        executeCommand(FindEmployeeCommand.COMMAND_WORD + \" \" + FindEmployeeCommand.FIND_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "            + \" \" + keyword);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        System.out.println(getModel().getFilteredEmployeeList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        System.out.println(getModel().getPocketProject().getEmployeeList());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(getModel().getFilteredEmployeeList().size()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ditan96"
        },
        "content": "            \u003c getModel().getPocketProject().getEmployeeList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Displays all projects with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    protected void showProjectsWithName(String keyword) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        executeCommand(FindProjectCommand.COMMAND_WORD + \" \" + FindProjectCommand.FIND_PROJECT_KEYWORD"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            + \" \" + keyword);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        System.out.println(getModel().getFilteredProjectList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        System.out.println(getModel().getPocketProject().getProjectList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertTrue(getModel().getFilteredProjectList().size()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "            \u003c getModel().getPocketProject().getProjectList().size());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Views the employee at {@code index} of the displayed list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    protected void viewEmployee(Index index) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        executeCommand(ViewCommand.COMMAND_WORD + \" \" + ViewEmployeeCommand.VIEW_EMPLOYEE_KEYWORD + \" \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "            + index.getOneBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(index.getZeroBased(), getEmployeeListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    //TODO SET UP GUI CLASSES AND VARIABLES FOR TESTING"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Views the project at {@code index} of the displayed list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    protected void viewProject(Index index) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //executeCommand(ViewCommand.COMMAND_WORD + \" \" + ViewProjectCommand.VIEW_PROJECT_KEYWORD + \" \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //        + index.getOneBased());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        //assertEquals(index.getZeroBased(), getProjectListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "     * * Deletes all employees in the pocket project."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    protected void deleteAllEmployees() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(0, getModel().getPocketProject().getEmployeeList().size());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Deletes all projects in the pocket project."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    protected void deleteAllProjects() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        assertEquals(0, getModel().getPocketProject().getProjectList().size());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same employee objects as {@code expectedModel}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * and the employee list panel displays the employees in the model correctly."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(new PocketProject(expectedModel.getPocketProject()), testApp.readStoragePocketProject());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertListMatching(getEmployeeListPanel(), expectedModel.getFilteredEmployeeList());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Calls {@code EmployeeListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        getEmployeeListPanel().rememberSelectedEmployeeCard();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        getProjectListPanel().rememberSelectedProjectCard();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(getEmployeeListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the employee in the employee list panel at"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see EmployeeListPanelHandle#isSelectedEmployeeCardChanged()"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        getEmployeeListPanel().navigateToCard(getEmployeeListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        String selectedCardName \u003d getEmployeeListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getEmployeeListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the employee list panel remain unchanged."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see EmployeeListPanelHandle#isSelectedEmployeeCardChanged()"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertFalse(getEmployeeListPanel().isSelectedEmployeeCardChanged());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "    protected void assertSelectedProjectCardUnchanged() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shunnizuka"
        },
        "content": "        assertFalse(getProjectListPanel().isSelectedProjectCardChanged());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertListMatching(getEmployeeListPanel(), getModel().getFilteredEmployeeList());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     * Returns a defensive copy of the current project model."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    protected Model getProjectModel() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "        return testApp.getProjectModel();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jothipillay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jothipillay"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 32,
      "jeffgan96": 12,
      "dehui333": 1,
      "-": 230,
      "shunnizuka": 12,
      "jothipillay": 43
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.PocketProject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.model.employee.Employee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ditan96"
        },
        "content": "public class SampleDataTest extends PocketProjectSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    protected PocketProject getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public void pocketProject_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        Employee[] expectedList \u003d SampleDataUtil.getSampleEmployees();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertListMatching(getEmployeeListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 6,
      "jeffgan96": 1,
      "-": 44
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import seedu.address.model.ReadOnlyPocketProject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ditan96"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyPocketProject\u003e addressBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 2,
      "-": 72
    }
  },
  {
    "path": "src/test/java/systemtests/ViewEmployeeCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import static seedu.address.logic.commands.ViewEmployeeCommand.MESSAGE_VIEW_EMPLOYEE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ditan96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "import seedu.address.logic.commands.ViewEmployeeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "public class ViewEmployeeCommandSystemTest extends PocketProjectSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "    public void view() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* ------------------------ Perform view operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: view the first card in the employee list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        String command \u003d \"   \" + ViewCommand.COMMAND_WORD + \" \" + ViewEmployeeCommand.VIEW_EMPLOYEE_KEYWORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                + INDEX_FIRST_EMPLOYEE.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_EMPLOYEE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: view the last card in the employee list -\u003e selected */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        command \u003d ViewCommand.COMMAND_WORD + \" \" + ViewEmployeeCommand.VIEW_EMPLOYEE_KEYWORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                + personCount.getOneBased();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: view the middle card in the employee list -\u003e selected */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        command \u003d ViewCommand.COMMAND_WORD + \" \" + ViewEmployeeCommand.VIEW_EMPLOYEE_KEYWORD + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: view the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* ------------------------ Perform view operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: filtered employee list, view index within bounds of address book but out of bounds of employee list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        int invalidIndex \u003d getModel().getPocketProject().getEmployeeList().size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + ViewEmployeeCommand.VIEW_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                + \" \" + invalidIndex, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: filtered employee list, view index within bounds of address book and employee list -\u003e selected */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredEmployeeList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        command \u003d ViewCommand.COMMAND_WORD + \" \" + ViewEmployeeCommand.VIEW_EMPLOYEE_KEYWORD + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                + validIndex.getOneBased();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* ----------------------------------- Perform invalid view operations ------------------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + ViewEmployeeCommand.VIEW_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                        + \" \" + 0, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewEmployeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + ViewEmployeeCommand.VIEW_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                        + \" \" + -1, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewEmployeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredEmployeeList().size() + 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + ViewEmployeeCommand.VIEW_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                + \" \" + invalidIndex, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + ViewEmployeeCommand.VIEW_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                        + \" abc\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewEmployeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + ViewEmployeeCommand.VIEW_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                        + \" 1 abc\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewEmployeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        /* Case: view from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        deleteAllEmployees();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + ViewEmployeeCommand.VIEW_EMPLOYEE_KEYWORD"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                        + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased(), MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * 3. Result display box displays the success message of executing view command with the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected employee.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * 4. {@code Storage} and {@code EmployeeListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see PocketProjectSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeffgan96"
        },
        "content": "                MESSAGE_VIEW_EMPLOYEE_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ditan96"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getEmployeeListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * 4. {@code Storage} and {@code EmployeeListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * {@code PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ditan96"
        },
        "content": "     * @see PocketProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ditan96": 17,
      "jeffgan96": 41,
      "-": 98
    }
  }
]
