[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d BrainTrain"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-W14-1/main[image:https://travis-ci.org/CS2103-AY1819S2-W14-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "https://ci.appveyor.com/project/eugenefdw/main[image:https://ci.appveyor.com/api/projects/status/vl6bo937loonr7x3?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-W14-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W14-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/d236c7af6a71427ebeae2571add1f3f4[\"Codacy code quality\", link\u003d\"https://www.codacy.com/app/cs2103-w14-1/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103-AY1819S2-w14-1/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* This is a desktop flashcard application. It has a GUI but most of the user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* It is an open-source spaced repetition flashcard application which makes memorizing easy and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "efficient."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* Research has shown that the Spaced-Repetition System (SRS) is more effective than traditional"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "memorization techniques"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5], http://opencsv.sourceforge.net/[opencsv]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 6,
      "halcyoneee": 9,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    compile \u0027com.opencsv:opencsv:4.5\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        //    test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \u0027site-name\u0027: \u0027BrainTrain\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S2-W14-1/main\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 4,
      "halcyoneee": 1,
      "-": 234
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 4 was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d Eugene Foo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "image::eugenefdw.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "{empty}[http://github.com/eugenefdw[github]] [\u003c\u003ceugenefdw#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Lee Tze Ting"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::halcyoneee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty}[http://github.com/halcyoneee[github]] [\u003c\u003chalcyoneee#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Responsibilities: Integration"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d\u003d\u003d Jerald Tan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "image::jeraldtsy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "{empty}[http://github.com/jeraldtsy[github]] [\u003c\u003cjeraldtsy#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "Responsibilities: Deliverables and deadlines"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Evan Tay"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "image::digipie.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "{empty}[http://www.evantay.com[homepage]] [http://github.com/DigiPie[github]] [\u003c\u003cdigipie#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Responsibilities: Management System and Documentation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d Chang Lei"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "image::lallanachang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "{empty}[https://github.com/lallanachang[github]] [\u003c\u003clallanachang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Responsibilities: SRS System"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 4,
      "eugenefdw": 6,
      "halcyoneee": 4,
      "lallanachang": 4,
      "-": 34,
      "DigiPie": 2
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S2-W14-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* *Email us* : You can also reach us at `eugenef@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d BrainTrain - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The rest of the App consists of five components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* \u003c\u003cDesign-QuizModel,*`QuizModel`*\u003e\u003e: Holds the data of the Quiz in-memory."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".  `Logic` uses either the `BrainTrainParser` or `QuizModeParser` class to parse the user command."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "..  If `BrainTrainParser` is used to parse the user command:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "...  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "...  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "..  If `QuizModeParser` is used to parse the user command:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "...  This results in a `QuizCommand` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "...  The command execution can affect the `QuizModel` (e.g. answering a question)."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/managementModel/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* does not depend on any of the other four components."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[[Design-QuizModel]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d QuizModel component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Structure of the QuizModel Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::QuizModelClassDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/quiz/QuizModel.java[`QuizModel.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The `QuizModel`,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* stores a `Quiz` object that represents the list of `QuizCard`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* does not depend on any of the other four components."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "// tag::datastorage[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d Data Storage Feature"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "The data storage feature manages the saving of data, such as lessons and user progress, to disk for the application. This lets the user keep their progress between usage sessions."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "All data storage components implement public functions that are called through Storage, with no user commands currently implemented. These functions include saving and reading of files, with an option for changing the default directory where each kind of data is saved."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "NOTE: These functions are automatically performed on opening/closing the Session."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "* ** Alternative 1(Current choice): Automate importing/exporting when session is open/close"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "** Pros: Lesser commands to manage."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "** Cons: Opening and closing may take up a lot of time if file is very big."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "* **Alternative 2: Individual commands for user to toggle with to import and export files when desired"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "** Pros: More control given to user"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "** Cons: Accidental overwriting of files may occur."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "// end::datastorage[]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "// tag::csvstorage[]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d CSV Storage Feature"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "The lesson CSV storage feature implements the following functions:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* Parsing lesson data into the correct format for saving"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* Parsing data from file into lessons"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Actual file I/O is handled in the CsvUtil class, which uses the opencsv library to read/write CSV files."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d\u003d CSV Format"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ".Data flow diagram for Lessons saving"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "image::CsvStorageDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Lessons are parsed by CsvLessonsStorage, being converted between Lesson and List\u003cString[]\u003e formats. The List\u003cString[]\u003e format is the primary format handled by CsvUtil for reading and writing to CSV files."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "For lessons, there are three main components when saved to a CSV file."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Name"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Lesson names are equivalent to their filenames."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "A lesson named \"French\" would be saved as French.csv, and vice-versa."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Header"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "The header stores the set up information for the lesson. For more information on the format of lessons, please read `TODO`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Core fields start with `CORE_ESCAPE` character, `\\*`. When a field without `*` is found, all subsequent fields are assumed to be optional."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Question and answer fields have the `QUESTION_ESCAPE` character, `?`, and `ANSWER_ESCAPE` character, `@`, respectively after the core character, `*`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Card Data"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "All remaining data is treated as card data. Any invalid data found in memory or from the file is skipped over."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Choice of file type"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* **Alternative 1 (current choice):** Save as CSV"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Pros: Allows the user to edit lesson data in an external program such as Excel, which provides a user-friendly spreadsheet interface."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Cons: Lack of data verification within the file, JSON already implemented"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* **Alternative 2:** Save as JSON"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Pros: Can ensure all values are filled out correctly"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Cons: Difficult for user to edit"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "// end::csvstorage[]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "// tag::quiz[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Quiz feature"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Quiz feature allows users to enter quiz related commands and answer."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The quiz feature implements the following commands and processes answer:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* `\\quit` - Quits a quiz session."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* `\\help` - Lists all commands in quiz and inputs the program will accept."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* `\\hint` - Reveals additional information to help user to solve the question."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* `\\status` - Lists current status and lesson progress of user."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* `Answer [*]` - Enters any character without escape character \\ is treated as an answer."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d \\status"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The `\\status` feature list the total attempts you have attempted, total number of question you"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "have gotten correct in this session and which question you are currently on."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Sequence diagram for status feature"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::QuizStatusCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Answer [*]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The `Answer [*]` feature is facilitated by `QuizAnswerCommand`. The command takes in user input"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "as answer to be processed later."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The following sequence diagram shows the interaction between the various classes when the user"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "answers a question:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Sequence diagram for answer feature"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::QuizAnswerCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Quiz executes"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* **Alternative 1 (current choice):** Run quiz in a different mode"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** Pros: Answer can be anything excluding word starting with a backslash `\\` (e.g. `\\help`)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** Cons: Tedious to implement"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* **Alternative 2:** Run quiz in the same mode as the rest of the management commands"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** Pros: Easier to implement compared to alternative 1"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** Cons: Answer cannot start with those from the list of management commands (e.g. `start`)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "// end::quiz[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*Scenario:* You are in charge of `managementModel`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the managementModel API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/managementModel/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/managementModel/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/managementModel/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/managementModel/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/managementModel/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/managementModel/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/managementModel/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/managementModel/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/managementModel/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/managementModel/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Add `Remark` to managementModel component (you can copy from link:{repoURL}/src/main/java/seedu/address/managementModel/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/managementModel/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/managementModel/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/managementModel/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/managementModel/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* student who is trying to remember something content heavy for a given subject"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* would like a flashcard system that introduces/tests them on words/ideas"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* prefers command line interface for simplicity"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* able to keep track of the progress of all \u003c\u003clesson,lessons\u003e\u003e"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*Possible users*:"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* User / Student: Someone who\u0027s trying to memorise content"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* Creator / Educator: Someone who generates the lists of content so that other users (i.e Student) can use it directly without having to do the data entry"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*Value proposition*: Flashcard integrated with \u003c\u003csrs,SRS\u003e\u003e that assists in memorization"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|Priority |As a ... |I want to ... |So that..."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |new user |see usage instructions |I can refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |load/import lessons |I can use the App without needing to make my own lists first"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |Creator |export lessons |I can share my lessons easily in a multiple files"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |be tested more often on poorly memorized questions |I can automatically focus on them"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |save my current progress |I do not lose progress between sessions"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |export my current progress |I can keep my progress between different devices"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |start multiple lessons |I can see all the question at once"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |reset my progress |I can start anew"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |see my current progress |I know which questions I frequently get it right or wrong"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |be give multiple chances to answer |I am given some leeway for mistyping"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |add tags to the lessons |I can search based on the tags"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |start a lesson |I can start to memorise"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |view correct answer and explanation if I answered wrongly |I can understand and"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "remember it better"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |see a hint if I am not sure about the answer |I can have a deeper impression"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |limit how many questions I’m given at one go |I can have shorter/longer sessions"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |store/favourite hard content |I can review them more frequently"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |have my own profile |Others can use the program on the same device"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |use any language |I can use it for languages other than English"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |have a graded test based on my current progress |I can see clearly how well I obtain the knowledge"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |view lessons created by others |I can import them into my own library without creating my own"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |change the frequency of re-testing |I can test everything on my own basis"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |switch question and answer |I can associate the answer and question the other way."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`*` |user |change the number of possible answers |I can vary the difficulty level"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`*` |user |have images as prompts |I have more varied test options"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`*` |user |set the plan (like 15 words a day) |I can make sure that I\u0027m on track"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`*` |user |autocomplete the lessons name |I can find a lesson quickly"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`*` |Creator |import from other file formats into lessons |I can use my own pre-existing lists with the application"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`*` |Creator |notify users if there is any change of the app |I can help users stay updated with new methods"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d Use case: Export a lesson"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "1. User finds the lesson he wishes to export by using list or find command."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "2. User uses export command."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "3. App displays the location where the exported csv file is saved to."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* 2a. User inputs invalid lesson name."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** 2a1. Step 2 repeats until a valid lesson is found."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* 2b. App is unable to save due to permissions, invalid format, etc"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** 2b1. App notifies User of the error."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** 2b2. Step 2 repeats until the file is able to be saved."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d Use case: Import a lesson"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "1. User downloads file from a source (e.g Internet, other users)."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "2. User uses import command."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "3. App loads the file as a lesson into the app shows the content of the lesson."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "4. App requests confirmation."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "5. App saves lesson to user profile."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* 2a. User inputs invalid file path, file is not found or file is not valid."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** 2a1. Step 2 repeats until a valid file is found."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* 3a. App fails to load the file due to interruption, etc"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** 3a1. App tells user cause of failure."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** 3a2. Step 2 repeats until a valid file is successfully loaded."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* 4a. User declines"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Use case ends"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d Use case: Test poorly memorised questions"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "1. User requests to revise poorly/wrongly answered questions"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "2. App requests for the pool of questions based on the user’s profile"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "3. App displays questions for User to answer."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "4. User to input his answer."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "5. App displays the correct answer."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Steps 3-5 are repeated until there are no more questions left to be tested."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* 3a. App detects no questions to be tested now."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** 3a1. App prompts User to continue testing all questions."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** 3a2. User enter yes."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d Use case: Start multiple lessons"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "1. User finds specified lessons."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "2. User starts lessons by lesson names."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "3. App displays questions for User to answer."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "4. User to input his answer."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "5. App displays the correct answer."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Steps 3-5 are repeated until there are no more questions left to be tested."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* 3a. App detects no questions to be tested now."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** 3a1. App prompts User to continue testing all questions."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** 3a2. User enter yes."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".  Should be able to hold up to 1000 lessons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[[lesson]] Lesson::"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "A labelled set of \u003c\u003cquestion,questions\u003e\u003e."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[[question]] Question::"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "A set of values, where one value is given as a prompt to the user, and another value is used as the correct answer for that given question. Other values may be shown to supplement the question."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[[session]] Session::"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "User’s current learning progress"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[[srs]] Spaced Repetition System (SRS)::"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The technique of gradually delaying or accelerating the testing of content based on the user’s success."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 9,
      "eugenefdw": 35,
      "halcyoneee": 135,
      "lallanachang": 103,
      "-": 857,
      "DigiPie": 12
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The JavaFX framework, which this code base uses for its UI, uses _events_ to communicate user input (such as mouse movement and button presses) to interested _event consumers_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The JavaFX event loop acts as an _event dispatcher_ to transmit events to event consumers."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* https://docs.oracle.com/javase/8/javafx/events-tutorial/events.htm[JavaFX: Handling Events]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Note how components of AddressBook have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the AddressBook app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Add more assertions to AddressBook as you see fit."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how the AddressBook app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Add more logging to AddressBook as you see fit."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Note how AddressBook uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Analyze the AddressBook code/design to identify,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingGradle#, how the AddressBook app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as Jackson. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingTravis#, how the AddressBook app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/src/test/java/seedu/address/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/address/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the link:{repoURL}/src/test/java/seedu/address/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* Test methods `prefsReadSave()` and `addressBookReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Test method `handleAddressBookChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleAddressBookChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/seedu/address/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/address/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern*: The code base uses JavaFX\u0027s https://docs.oracle.com/javase/8/javafx/api/javafx/beans/value/ObservableValue.html[`ObservableValue`] interface to allow objects to watch for changes in data."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "This interface is an implementation of the Observer pattern."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Objects that are interested in changes to an `ObservableValue` can register a listener via `ObservableValue#addListener(...)`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "When the value represented by the `ObservableValue` changes, it will notify all registered listeners."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the managementModel because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/seedu/address/ui/UiPart.java[`UiPart`] (e.g. `PersonListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "-": 270,
      "DigiPie": 1
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d BrainTrain - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W14-1/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "By: `Team BrainTrain`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "BrainTrain is an open-source spaced repetition flashcard application which makes *memorizing easy and efficient*. Research has shown that the Spaced-Repetition System (SRS) is *much more effective* than traditional memorization techniques. With BrainTrain, you will *learn more with less time*."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "BrainTrain is also a *portable* and *easy-to-navigate* desktop program. It is an *offline* application which you can use anywhere, even in places with limited or no Internet availability. It can be navigated and used via *easy-to-use* commands through the Command Line Interface (CLI). The CLI is supplemented by a minimalistic Graphical User Interface (GUI) which provides *helpful but non-distracting visual aid*. Together, the CLI and GUI provides an *effective and straightforward* way for you to use BrainTrain."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Start using BrainTrain today! To get started, read \u003c\u003cQuick Start\u003e\u003e for installation and setup instructions."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".  Ensure that Java version `9` or later is installed on your Computer. You can download it link:https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase9-3934878.html[here]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".  Download the latest `braintrain.jar` file link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Create a folder to use as the home folder for BrainTrain (e.g. `braintrain/`)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Move the downloaded file to the created folder."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Double-click the file to run BrainTrain. The GUI will appear in a few seconds."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".BrainTrain\u0027s GUI on first run"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[#img-firstlook]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::UiFirstLook.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Type the command `help` in the command box at the top and press kbd:[Enter] to display usage information on BrainTrain commands."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Read \u003c\u003cFeatures\u003e\u003e to find out more about BrainTrain commands."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add card q/QUESTION a/ANSWER [h/HINT]`, `QUESTION` and  `ANSWER` parameters can be used as `add card q/What is the capital of Belgium? a/Brussels`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Items in square brackets are optional e.g `add card q/QUESTION a/ANSWER [h/HINT]` can be used as `add card q/What state is Seattle in? a/Washington h/The state is named after the founding father of USA.` or as `add card q/What state is Seattle in? a/Washington`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `add card q/QUESTION a/ANSWER`, `add card a/ANSWER q/QUESTION` is also acceptable."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Management Mode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help: `help`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Displays usage information on all Management Mode commands. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Starting quiz session: `start`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Switches to Quiz Mode and starts a new quiz session. +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Flashcards are tested based on the link:https://en.wikipedia.org/wiki/Spaced_repetition[Space-Repetition technique]."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Format: `start n/NAME [c/COUNT] m/MODE`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Usage rules:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* The count field is optional. It represents the number of cards the user wants in the session. By default, it sets to be 10."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* The number of cards should be at least 1. The start command will fail with count to be 0."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* The mode field only supports three mode: `learn, preview and review`."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* `start n/02-03-LEARN c/15 m/LEARN`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all lessons: `listLessons`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Shows a numbered list of all lessons. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `listLessons`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a lesson: `addLesson`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Adds a lesson. +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `addLesson n/NAME c/CORE... [o/OPTIONAL]...`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Usage rules:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* The lesson to be added must contain at least 2 `CORE` parameters. These parameters are `CORE` headers which define the lesson cards\u0027 `CORE` values. An example of a `CORE` header and a card\u0027s `CORE` value would be \u0027Country\u0027 and \u0027Japan\u0027 respectively."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The lesson can have any number of `OPTIONAL` headers (including 0)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The `OPTIONAL` headers are optional. The values of these headers are displayed during quiz mode when you enter \u003c\u003chint, `\\hint`\u003e\u003e."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `addLesson n/MedicineTrivia c/Proposition c/TrueOrFalse`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `addLesson n/Country Capitals c/Country c/Capital o/First letter of capital`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a lesson: `deleteLesson`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Deletes a lesson. +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `deleteLesson INDEX`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Usage rules:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Deletes the lesson at the specified `INDEX`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* To find the `INDEX` number of a lesson, type `listLessons` to list all lessons loaded in memory."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `deleteLesson 2` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Deletes the 2nd lesson in the numbered list displayed by `listLessons`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[list_cards]]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all flashcards: `listCards`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Shows a numbered list of all flashcards. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `listCards`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a flashcard: `addCard`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Adds a flashcard. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `addCard q/QUESTION a/ANSWER [h/HINT]`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Usage rules:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* The hint field is optional. When added, it is displayed during Quiz mode when \u003c\u003chint, `\\hint`\u003e\u003e is entered."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `addCard q/What is the capital of Belgium? a/Brussels`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `addCard q/What state is Seattle in? a/Washington h/The state is named after the founding father of USA.`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a flashcard : `editCard`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Edits an existing flashcard. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `editCard INDEX [q/QUESTION] [a/ANSWER] [h/HINT]`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Usage rules:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Edits the flashcard at the specified `INDEX`. To find the `INDEX` number of a question, type `listCards` to list all flashcards."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* All fields are optional, but minimally one field must be specified."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* The flashcard\u0027s hint can be removed by typing `h/`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `editCard 1 a/Tokyo` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Changes the answer of the first flashcard to `Tokyo`. All other fields such as the question remain the same."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `editCard 12 q/How many intercostal spaces are there? h/` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Changes the question of the 12th flashcard to \u0027How many intercostal spaces are there?\u0027 and removes the flashcard\u0027s hint."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a flashcard: `deleteCard`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Deletes a flashcard in the question pool. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `deleteCard INDEX`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Usage rules:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Deletes the flashcard at the specified `INDEX`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* To find the `INDEX` number of a question, type `listCards` to list all flashcards in the question pool."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `deleteCard 2` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Deletes the 2nd flashcard."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Importing user profile : `importUser`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Imports the selected `.csv` file and loads the current progress of the user. +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `importUser FILEPATH`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Exporting user profile : `exportUser`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Exports the current progress of the user into a `.csv` file. +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `exportUser FILEPATH`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Quitting the program : `quit`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Quits the program. +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `quit`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "// tag::quiz[]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Quiz Mode"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help: `\\help`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Displays usage information on all Quiz Mode commands and acceptable inputs for answering cards. +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `\\help`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[hint]]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing the current flashcard\u0027s hint: `\\hint`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Reveals the hint for the current flashcard. +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `\\hint`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing the session status: `\\status`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Displays information on the current session\u0027s status such as progression. +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `\\status`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Answering a flashcard : `[*]`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Any input without the escape character `\\` is treated as an answer to the current flashcard. +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `[*]`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Quitting the current quiz session: `\\quit`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Quits the current quiz session and switches back to Management Mode. +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `\\quit`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "// end::quiz[]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d Address Book 4 Features"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*Features here will be replaced by equivalent features in BrainTrain document above.*"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d Troubleshooting TODO"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*Q*: Why are my card values shown as `?????` or question marks? +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*A*: If your lesson contains non-ASCII characters such as:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* Characters with accents: `à`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* Non-English words : `こんにちは` `السلام عليكم` `你好`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "This can be fixed in Excel by going into the Save As dialog, and saving as `CSV UTF-8 (Comma delimited) (*.csv)`. For other csv file editors, you may need to look up relevant documentation on how save in UTF-8 encoding. +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "****"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "The default encoding setting is unable to process special characters. As a result, you will need to save it as a UTF-8 encoded csv file."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Note that the files have to be saved as a UTF-8 encoded csv file before the first save. +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "If the file is saved without UTF-8 encoding, the data may have already been saved as ?????, and all non-ASCII characters are lost."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "****"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d Management Mode"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Help: `help`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *Start a quiz session*: `start n/NAME [c/COUNT] m/MODE`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "e.g. `start n/02-03-LEARN c/15 m/LEARN`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* List all lessons: `listLessons`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *Add a lesson*: `addLesson n/NAME c/CORE…​ [o/OPTIONAL]…​`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "e.g. `addLesson n/MedicineTrivia c/Proposition c/TrueOrFalse`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* List all cards: `list cards`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *Add a card*: `add card q/QUESTION a/ANSWER [h/HINT]`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "e.g. `add card q/What state is Seattle in? a/Washington h/The state is named after the founding father of USA`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *Edit a card*: `edit card INDEX [q/QUESTION] [a/ANSWER] [h/HINT]`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "e.g. `card edit 12 q/How many intercostal spaces are there? h/`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *Delete a card*: `delete card INDEX`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "e.g. `delete card 2`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Import user profile: `import user`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Export user profile: `export user`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* History: `history`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Quit: `quit`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d Quiz Mode"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Help: `\\help`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* View the hint: `\\hint`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* View status: `\\status`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Answer: `[*]`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Quit: `\\quit`"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 15,
      "halcyoneee": 14,
      "lallanachang": 36,
      "DigiPie": 137,
      "-": 174
    }
  },
  {
    "path": "docs/team/digipie.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d Evan Tay - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d PROJECT: BrainTrain"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This project portfolio highlights my key contributions to the https://cs2103-ay1819s2-w14-1.github.io/main/[BrainTrain] project."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "BrainTrain is an open-source spaced repetition flashcard application which makes *memorizing easy and efficient*. Research has shown that the Spaced-Repetition System (SRS) is *much more effective* than traditional memorization techniques. By using BrainTrain, users will be able to *learn more with less time*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "BrainTrain is also a *portable* and *easy-to-navigate* desktop program. It is an *offline* application which can be used anywhere, even in places with limited or no Internet availability. It can be navigated and used via *easy-to-use* commands through the Command Line Interface (CLI). The CLI is supplemented by a minimalistic Graphical User Interface (GUI) which provides *helpful but non-distracting visual aid*. Together, the CLI and GUI provides an *effective and straightforward* way to use BrainTrain."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Major enhancement*: Implemented a Card Management System"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** What it does: Allows users to manage lessons\u0027 cards."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Allows users to view all cards in a lesson"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Allows users to add a card to a lesson"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Allows users to modify an existing card in a lesson"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Allows users to delete a card in a lesson"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Justification: // To do"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Highlights: Pull request https://github.com/CS2103-AY1819S2-W14-1/main/pull/34[#34], https://github.com/CS2103-AY1819S2-W14-1/main/pull/39[#39], https://github.com/CS2103-AY1819S2-W14-1/main/pull/77[#77], https://github.com/CS2103-AY1819S2-W14-1/main/pull/85[#85]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Minor enhancement*: // To do"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** // To do"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** // To do"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Closed milestone // To do"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Major overhaul of `package seedu.address.logic` design and implementation (Pull request https://github.com/CS2103-AY1819S2-W14-1/main/pull/85[#85])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Wrote the User Guide\u0027s Introduction and Quick Start sections (Pull request https://github.com/CS2103-AY1819S2-W14-1/main/pull/15[#15], https://github.com/CS2103-AY1819S2-W14-1/main/pull/85[#85])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Updated User Guide with management mode commands (Pull request"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-1/main/pull/20[#20], https://github.com/CS2103-AY1819S2-W14-1/main/pull/85[#85])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Updated Developer Guide with management mode implementation (Pull request // To do)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Fix a bug in teammate\u0027s pull request (Pull request https://github.com/CS2103-AY1819S2-W14-1/main/pull/33[#33])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Reviewed pull requests with constructive feedback (Pull request https://github.com/CS2103-AY1819S2-W14-1/main/pull/30#pullrequestreview-209863095[#30],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-1/main/pull/36#pullrequestreview-209862756[#36], https://github.com/CS2103-AY1819S2-W14-1/main/pull/36#pullrequestreview-209862756[#36] and  https://github.com/CS2103-AY1819S2-W14-1/main/pull/37#pullrequestreview-209866595[#37])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Reported bugs for other teams in the class (// To do)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** // To do"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "include::../UserGuide.adoc[tag\u003dquiz]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dquiz]"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 66
    }
  },
  {
    "path": "docs/team/eugenefdw.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d Eugene Foo TODO - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "-": 71
    }
  },
  {
    "path": "docs/team/halcyoneee.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d Lee Tze Ting - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d PROJECT: BrainTrain"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "This project portfolio page showcases my contributions to the BrainTrain project."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "BrainTrain is a spaced repetition flashcard application which makes memorizing easy and efficient."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Research has shown that the Spaced-Repetition System (SRS) is more effective than traditional"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "memorization techniques. With it, you will be able to learn more with less time. User interaction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "happens through Command Line Interface (CLI) and it has a minimal Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* *Major enhancement*: Quiz mode"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** *What it does*: Quiz mode manages user interaction during a quiz. It comprises of 4 commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "only available in quiz mode and takes in all other inputs as answer."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** *Justification*: To ensure that answers are not limited or excluded of certain keywords,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "BrainTrain supports two different modes, management and quiz mode. To differentiate the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "commands between the two modes, quiz mode commands start with a backslash `\\`, whereas management"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "commands are not."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** *Highlights*: Pull request https://github.com/CS2103-AY1819S2-W14-1/main/pull/32[#32],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-1/main/pull/43[#42]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*** Managed release `v1.1` on GitHub"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*** Integrated `AddressBook` features with `BrainTrain` ( https://github.com/CS2103-AY1819S2-W14-1/main/pull/33[#33])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "include::../UserGuide.adoc[tag\u003dquiz]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dquiz]"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 58
    }
  },
  {
    "path": "docs/team/jeraldtsy.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d\u003d PROJECT: BrainTrain"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "This project portfolio page showcases my contributions to the BrainTrain project."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "BrainTrain is a spaced repetition flashcard application which makes memorizing easy and efficient."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "Research has shown that the Spaced-Repetition System (SRS) is more effective than traditional"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "memorization techniques. With it, you will be able to learn more with less time. User interaction"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "happens through Command Line Interface (CLI) and it has a minimal Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "* *Major enhancement*: User features"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "** What it does: User features manage the user progress and import and export their progress into a CSV file accordingly. The feature is automated whenever the program is open(Import) or close(export)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "** Highlights: https://github.com/CS2103-AY1819S2-W14-1/main/pull/(INSERT PULL NUMBER HERE)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "* *Minor enhancement*: https://github.com/CS2103-AY1819S2-W14-1/main/pull/(INSERT PULL NUMBER HERE)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 26
    }
  },
  {
    "path": "docs/team/lallanachang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d Chang Lei - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d PROJECT: BrainTrain"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "This project portfolio page displays my contributions to the BrainTrain project."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *Major enhancement*: Session and session manager model"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** *What it does*: Session model generates quiz cards that are needed to be tested in quiz mode based on storage data both from lesson and user progress."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Justification: To choose the most suitable words for users to learn, session model also has a manager to do the spaced repetition analysis. The method will always generate the cards with the closet due date to users. It can update the user progress after each quiz session as well."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *Minor enhancement*: quiz start command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dquiz]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dquiz]"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.Lessons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.storage.CsvLessonImportExport;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.storage.CsvLessonsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.storage.LessonImportExport;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.storage.LessonsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    protected ManagementModel managementModel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    protected QuizModel quizModel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing BrainTrain ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonsStorage lessonsStorage \u003d new CsvLessonsStorage(userPrefs.getLessonsFolderPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons lessons \u003d initLessons(lessonsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonImportExport lessonImportExport \u003d new CsvLessonImportExport(userPrefs.getLessonImportExportFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storage \u003d new StorageManager(userPrefsStorage, lessonsStorage, lessonImportExport);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        managementModel \u003d initModelManager(userPrefs, lessons);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel \u003d initQuizModelManager();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        logic \u003d new LogicManager(managementModel, quizModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns a {@code ManagementModelManager} with the data from {@code userPrefs}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModel initModelManager(ReadOnlyUserPrefs userPrefs, Lessons lessons) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new ManagementModelManager(userPrefs, lessons);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns an empty {@code QuizModelManager}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModelManager initQuizModelManager() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new QuizModelManager();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with a empty BrainTrain\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    protected Lessons initLessons(LessonsStorage storage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path lessonsFolderPath \u003d storage.getLessonsFolderPath();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        logger.info(\"Using lessons folder : \" + lessonsFolderPath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons initializedLessons \u003d null;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            Optional\u003cLessons\u003e prefsOptional \u003d storage.readLessons();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            initializedLessons \u003d prefsOptional.orElse(new Lessons());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with a empty BrainTrain\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            initializedLessons \u003d new Lessons();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        logger.info(initializedLessons.getLessons().size() + \" lessons loaded.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return initializedLessons;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        logger.info(\"Starting BrainTrain \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping BrainTrain ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            storage.saveUserPrefs(managementModel.getUserPrefs());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 40,
      "halcyoneee": 14,
      "-": 149,
      "DigiPie": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " * Taken from seedu.addressbook."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final String LOG_FILE \u003d \"braintrain.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 3,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/CardDataImportException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " * Signals that the operation will result in duplicate file"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public class CardDataImportException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public CardDataImportException(String msg) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DuplicateCardDataException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " * Signals that the operation will result in duplicate card data"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public class DuplicateCardDataException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public DuplicateCardDataException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        super(\"Operation would result in duplicate card data\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CsvUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import com.opencsv.CSVReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import com.opencsv.CSVWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " * Converts a List of String arrays to CSV and vice versa."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class CsvUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CsvUtil.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns a list of String arrays from the given file or null object if the file is not found."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Files are automatically assumed to be UTF-8 encoded, and BOMs are checked for and removed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static List\u003cString[]\u003e readCsvFile(Path filePath) throws IOException, NullPointerException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.info(\"csv file at [\" + filePath + \"] not found\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CSVReader csvReader;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString[]\u003e values;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        BufferedReader reader \u003d Files.newBufferedReader(filePath, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        csvReader \u003d new CSVReader(reader);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        values \u003d csvReader.readAll();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (values.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.info(\"Invalid/empty file: \" + filePath.getFileName().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        //Extra handling of first line for UTF-8 BOM."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String[] firstLine \u003d values.get(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (firstLine[0].startsWith(\"\\uFEFF\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            firstLine[0] \u003d firstLine[0].substring(1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            values.set(0, firstLine);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return values;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Saves the Csv object to the specified file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Defaults to UTF-8 csv by appending the UTF-8 BOM, \\uFEFF."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param data     cannot be null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @return Whether a file was successfully written to."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static boolean writeCsvFile(Path filePath, List\u003cString[]\u003e data) throws IOException, NullPointerException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (data.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.info(\"Attempted to write empty data.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CSVWriter csvWriter;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        BufferedWriter writer \u003d Files.newBufferedWriter(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        //write UTF-8 BOM"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        writer.write(\"\\uFEFF\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        csvWriter \u003d new CSVWriter(writer, CSVWriter.DEFAULT_SEPARATOR, CSVWriter.DEFAULT_QUOTE_CHARACTER,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            \u0027\\\\\u0027, CSVWriter.DEFAULT_LINE_END);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        csvWriter.writeAll(data);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        csvWriter.close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizStartCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.parser.ManagementModeParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.parser.QuizModeParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final ManagementModel managementModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final QuizModel quizModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final ManagementModeParser managementModeParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final QuizModeParser quizModeParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LogicManager(ManagementModel managementModel, QuizModel quizModel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.managementModel \u003d managementModel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.quizModel \u003d quizModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        managementModeParser \u003d new ManagementModeParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModeParser \u003d new QuizModeParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            Command command \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            if (quizModel.isQuizDone()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                command \u003d managementModeParser.parse(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult \u003d command.execute(managementModel, history);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                command \u003d quizModeParser.parse(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult \u003d command.execute(quizModel, history);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            // very ugly way"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (command instanceof QuizStartCommand) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                QuizStartCommand quizStartCommand \u003d (QuizStartCommand) command;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult \u003d quizStartCommand.executeActual(quizModel, history);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return managementModel.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        managementModel.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 12,
      "-": 50,
      "DigiPie": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "DigiPie": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /** Quiz UI should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final boolean showQuiz;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showQuiz, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.showQuiz \u003d showQuiz;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean isShowQuiz() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return showQuiz;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 10,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Represents an error which occurs during execution of a {@link seedu.address.logic.commands.Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_EXPECTED_MGT_MODEL \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            \"Expected ManagementModel but received QuizModel instead.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_EXPECTED_QUIZ_MODEL \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            \"Expected QuizModel but received ManagementModel instead.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "DigiPie": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/AddLessonCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.exceptions.CommandException.MESSAGE_EXPECTED_MGT_MODEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_LESSON_CORE_HEADER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_LESSON_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_LESSON_OPT_HEADER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * This implements a {@link Command} which executes a command to add a {@link Lesson} to the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * {@code List\u003cLesson\u003e lessons} loaded in memory. It requires a {@link ManagementModel}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * to be passed into the {@link #execute(Model, CommandHistory)} command. The actual addition"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * of the {@link Lesson} is carried out in the {@link ManagementModel}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class AddLessonCommand implements Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The word a user must enter to call this command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addLesson\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Instructions on command usage and parameters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a lesson. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_LESSON_NAME + \"NAME \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_LESSON_CORE_HEADER + \"CORE...\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"[\" + PREFIX_LESSON_OPT_HEADER + \"OPTIONAL]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_LESSON_NAME + \"Capitals of the world \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_LESSON_CORE_HEADER + \"Country \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_LESSON_CORE_HEADER + \"Capital \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_LESSON_OPT_HEADER + \"Hint\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user upon successful execution of this command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added lesson: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The lesson to be added when {@link #execute(Model, CommandHistory)} is called."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Lesson toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates an AddLessonCommand to add the specified {@link Lesson}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param toAdd the {@link Lesson} to be added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public AddLessonCommand(Lesson toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model which the command should operate on."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException will be thrown if and only if LogicManager passes in the incorrect Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // In other words, only incorrect code will result in a CommandException being thrown"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(model instanceof ManagementModel)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(MESSAGE_EXPECTED_MGT_MODEL);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel mgtModel \u003d (ManagementModel) model;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        mgtModel.addLesson(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || (other instanceof AddLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddLessonCommand) other).toAdd));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/DeleteLessonCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.exceptions.CommandException.MESSAGE_EXPECTED_MGT_MODEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * This implements a {@link Command} which executes a command to delete a {@link Lesson} from the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * {@code List\u003cLesson\u003e lessons} loaded in memory. It requires a {@link ManagementModel}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * to be passed into the {@link #execute(Model, CommandHistory)} command. The actual deletion"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * of the {@link Lesson} is carried out in the {@link ManagementModel}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class DeleteLessonCommand implements Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The word a user must enter to call this command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteLesson\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Instructions on command usage and parameters."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \": Deletes the lesson identified by its index number in the numbered list\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \" shown when the command \\\u0027listLessons\\\u0027 is entered.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Parameter: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user upon successful execution of this command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted lesson: \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The index of the lesson to be deleted when {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * is called."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates an DeleteLessonCommand to delete the specified {@link Lesson}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param targetIndex the index of the {@link Lesson} to be deleted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public DeleteLessonCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model which the command should operate on."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException will be thrown if and only if LogicManager passes in the incorrect Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // In other words, only incorrect code will result in a CommandException being thrown"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(model instanceof ManagementModel)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(MESSAGE_EXPECTED_MGT_MODEL);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel mgtModel \u003d (ManagementModel) model;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int toDeleteIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String lessonName \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            lessonName \u003d mgtModel.getLesson(toDeleteIndex).getName();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            mgtModel.deleteLesson(toDeleteIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    DeleteLessonCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + lessonName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || (other instanceof DeleteLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                \u0026\u0026 targetIndex.getZeroBased() \u003d\u003d ((DeleteLessonCommand) other).targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting BrainTrain as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 12,
      "DigiPie": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, true, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "DigiPie": 16,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class HistoryCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 11,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/ListLessonsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.exceptions.CommandException.MESSAGE_EXPECTED_MGT_MODEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * This implements a {@link Command} which executes a command to list all {@link Lesson} objects"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * in the {@code List\u003cLesson\u003e lessons} loaded in memory. It requires a {@link ManagementModel}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * to be passed into the {@link #execute(Model, CommandHistory)} command. The actual listing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * of the {@link Lesson} objects is carried out in the {@link ManagementModel}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ListLessonsCommand implements Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The word a user must enter to call this command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listLessons\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Instructions on command usage and parameters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all lessons in memory.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user upon successful execution of this command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all lessons\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Used to separate {@link #MESSAGE_SUCCESS} and either {@link #MESSAGE_NO_LESSONS}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * or list of lessons when forming the result message in {@link #buildList(List)}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_DELIMITER \u003d \":\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Shown when {@link #buildList(List)} is called and there are no lessons yet."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_NO_LESSONS \u003d \"There are no lessons yet.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param lessons the list of lessons"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return a String representing {@code lessons}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String buildList(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        builder.append(MESSAGE_SUCCESS).append(MESSAGE_DELIMITER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (lessons.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            builder.append(MESSAGE_NO_LESSONS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                builder.append(i).append(\".\\t\").append(lesson).append(\"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model which the command should operate on."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException will be thrown if and only if LogicManager passes in the incorrect Model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // In other words, only incorrect code will result in a CommandException being thrown"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(model instanceof ManagementModel)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(MESSAGE_EXPECTED_MGT_MODEL);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel mgtModel \u003d (ManagementModel) model;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessons.addAll(mgtModel.getLessons());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new CommandResult(buildList(lessons));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizAnswerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.exceptions.CommandException.MESSAGE_EXPECTED_QUIZ_MODEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Execute User answer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class QuizAnswerCommand implements Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"answer\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": * any character except word that starts with \\\\\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_QUESTION \u003d \"Question: %1$s\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_QUESTION_ANSWER \u003d \"Question: %1$s\\nAnswer: %2$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_CORRECT \u003d \"Your answer is correct.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_WRONG_ONCE \u003d \"Your answer is wrong, you have one more chance to answer it\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_WRONG \u003d \"The correct answer is %1$s.\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_COMPLETE \u003d \"You have completed all the questions in this quiz.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizAnswerCommand(String answer) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model {@link QuizModel} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException If the {@link Model} passed in is not a {@link QuizModel}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException will be thrown if and only if LogicManager passes in the incorrect Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // In other words, only incorrect code will result in a CommandException being thrown"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(model instanceof QuizModel)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(MESSAGE_EXPECTED_QUIZ_MODEL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModel quizModel \u003d (QuizModel) model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizCard card \u003d quizModel.getCurrentQuizCard();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (card.getQuizMode() \u003d\u003d Quiz.Mode.PREVIEW) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            // don\u0027t need to update totalAttempts and streak"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (quizModel.hasCardLeft()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                card \u003d quizModel.getNextCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                if (card.getQuizMode() \u003d\u003d Quiz.Mode.PREVIEW) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    return new CommandResult(String.format(MESSAGE_QUESTION_ANSWER,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                        card.getQuestion(), card.getAnswer()), true, false, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_QUESTION, card.getQuestion()), true, false, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                sb.append(MESSAGE_COMPLETE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                // TODO return this to session"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                System.out.println(quizModel.end());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new CommandResult(sb.toString(), true, false, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        boolean result \u003d quizModel.updateTotalAttemptsAndStreak(card.getIndex(), answer);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (result) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            sb.append(MESSAGE_CORRECT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (quizModel.hasCardLeft()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                card \u003d quizModel.getNextCard();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                sb.append(String.format(MESSAGE_QUESTION, card.getQuestion()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                sb.append(MESSAGE_COMPLETE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                // TODO return this to session"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                System.out.println(quizModel.end());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            if (!card.isWrongTwice()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                sb.append(MESSAGE_WRONG_ONCE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                sb.append(String.format(MESSAGE_QUESTION, card.getQuestion()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                sb.append(String.format(MESSAGE_WRONG, card.getAnswer()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                sb.append(String.format(MESSAGE_QUESTION, card.getQuestion()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(sb.toString(), true, false, false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            || (other instanceof QuizAnswerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            \u0026\u0026 answer.equals(((QuizAnswerCommand) other).answer)); // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 75,
      "DigiPie": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizHelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class QuizHelpCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"\\\\help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_QUIZ_USAGE \u003d QuizAnswerCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"\\n\" + QuizStatusCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"\\n\" + QuizHelpCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(MESSAGE_QUIZ_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 20,
      "DigiPie": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizStartCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.exceptions.CommandException.MESSAGE_EXPECTED_MGT_MODEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_START_COUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_START_MODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_START_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "//import seedu.address.model.modelmanager.management.ManagementModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizCard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.session.SrsCardsManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "//import seedu.address.storage.CsvLessonsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * TODO: implement the actual start command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class QuizStartCommand implements Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_START_NAME + \"NAME \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"[\" + PREFIX_START_COUNT + \"COUNT] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_START_MODE + \"MODE...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_START_NAME + \"02-03-LEARN \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_START_COUNT + \"15 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_START_MODE + \"LEARN\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Starting new quiz\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_QUESTION_ANSWER \u003d \"Question: %1$s\\nAnswer: %2$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private static final Path INVALID_CORE_CHAR_FIELD_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            \"CsvLessonsStorageTest\", \"invalidCoreCharInField\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    protected List\u003cQuizCard\u003e quizCards;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Session session;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public QuizStartCommand(Session session) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.session \u003d session;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public CommandResult executeActual(QuizModel model, CommandHistory history) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.quizCards \u003d session.generateSession();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Quiz quiz \u003d new Quiz(quizCards, session.getMode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        model.init(quiz);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard card \u003d model.getNextCard();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_QUESTION_ANSWER, card.getQuestion(), card.getAnswer()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            true, false, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException will be thrown if and only if LogicManager passes in the incorrect Model"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // In other words, only incorrect code will result in a CommandException being thrown"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(model instanceof ManagementModel)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(MESSAGE_EXPECTED_MGT_MODEL);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        //CsvLessonsStorage storage \u003d new CsvLessonsStorage(INVALID_CORE_CHAR_FIELD_DATA_FOLDER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        //ManagementModel mgtModel \u003d new ManagementModelManager(null, storage.readLessons().get());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        //Lesson lesson \u003d mgtModel.getLesson(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        //HashMap\u003cInteger, CardSrsData\u003e cardData \u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        //TODO: implement these hard code after updates"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Card card1 \u003d new Card(List.of(\"Japan\", \"Tokyo\"), List.of(\"T\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Card card2 \u003d new Card(List.of(\"Belgium\", \"Brussels\"), List.of(\"B\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Lesson lesson \u003d new Lesson(\"Capitals\", List.of(\"Country\", \"Capitals\"), List.of(\"Hint\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                0, 1, List.of(card1, card2));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Instant current \u003d Instant.now();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CardSrsData cardData1 \u003d new CardSrsData(card1.hashCode(), 1, 1, current);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CardSrsData cardData2 \u003d new CardSrsData(card2.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                current.plus(Duration.ofHours(1)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        HashMap\u003cInteger, CardSrsData\u003e cardData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData.put(card1.hashCode(), cardData1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData.put(card2.hashCode(), cardData2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCardsManager generateManager \u003d new SrsCardsManager(lesson, cardData);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.session \u003d new Session(this.session.getName(), this.session.getCount(), this.session.getMode(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                generateManager.sort());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 25,
      "lallanachang": 44,
      "DigiPie": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizStatusCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.exceptions.CommandException.MESSAGE_EXPECTED_QUIZ_MODEL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Display the total attempts, streak and progress of the current session"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizStatusCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"\\\\status\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        COMMAND_WORD + \": Shows the total attempts, streak and progress for the current session.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_RESULT \u003d \"Total attempts: %1$s\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"Total correct answer: %2$s\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"Current progress: %3$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // CommandException will be thrown if and only if LogicManager passes in the incorrect Model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // In other words, only incorrect code will result in a CommandException being thrown"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (!(model instanceof QuizModel)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new CommandException(MESSAGE_EXPECTED_QUIZ_MODEL);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModel quizModel \u003d (QuizModel) model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_RESULT, quizModel.getQuizTotalAttempts(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quizModel.getQuizTotalCorrectQuestions(), quizModel.getCurrentProgress()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddLessonParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_LESSON_CORE_HEADER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_LESSON_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_LESSON_OPT_HEADER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.lesson.Lesson.EXCEPTION_INVALID_CORE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.lesson.Lesson.EXCEPTION_INVALID_CORE_SIZE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.lesson.Lesson.EXCEPTION_INVALID_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.lesson.Lesson.EXCEPTION_INVALID_OPT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.AddLessonCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Parses input arguments and creates a new {@link AddLessonCommand} object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class AddLessonParser implements Parser\u003cAddLessonCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@link AddLessonCommand}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * and returns an {@link AddLessonCommand} object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public AddLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_LESSON_NAME,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        PREFIX_LESSON_CORE_HEADER, PREFIX_LESSON_OPT_HEADER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_LESSON_NAME, PREFIX_LESSON_CORE_HEADER)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String name \u003d argMultimap.getValue(PREFIX_LESSON_NAME).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArrayList\u003cString\u003e coreHeaders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArrayList\u003cString\u003e optHeaders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        coreHeaders.addAll(argMultimap.getAllValues(PREFIX_LESSON_CORE_HEADER));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        optHeaders.addAll(argMultimap.getAllValues(PREFIX_LESSON_OPT_HEADER));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lesson \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            lesson \u003d new Lesson(name, coreHeaders, optHeaders);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            // Throws IllegalArgumentException if less than 2 core headers are specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            String message \u003d e.getMessage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (message.equals(EXCEPTION_INVALID_CORE_SIZE) || message.equals(EXCEPTION_INVALID_CORE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    || message.equals(EXCEPTION_INVALID_NAME) || message.equals(EXCEPTION_INVALID_OPT)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new AddLessonCommand(lesson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param argumentMultimap the mapping of prefixes to their respective arguments"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param prefixes the prefixes to check if present"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if prefixes are present in {@see argumentMultimap}; false otherwise"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 2,
      "-": 142,
      "DigiPie": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteLessonParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.DeleteLessonCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Parses input arguments and creates a new {@link DeleteLessonCommand} object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class DeleteLessonParser implements Parser\u003cDeleteLessonCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link DeleteLessonCommand} and returns an {@link DeleteLessonCommand} object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public DeleteLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new DeleteLessonCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                            DeleteLessonCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "DigiPie": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ManagementModeParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.AddLessonCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.DeleteLessonCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.ListLessonsCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizStartCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ManagementModeParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Command parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        //        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        //            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // TODO use parser here"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        case QuizStartCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new StartCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        case AddLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new AddLessonParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        case DeleteLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new DeleteLessonParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        case ListLessonsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new ListLessonsCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        //        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        //            return new UndoCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        //"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        //        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        //            return new RedoCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 5,
      "halcyoneee": 51,
      "lallanachang": 1,
      "DigiPie": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "DigiPie": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Parses a {@code String name} into a {@code String name}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static String parseName(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return trimmedName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Parses a {@code String count} into a {@code int count}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static int parseCount(String count) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        requireNonNull(count);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        String trimmedCount \u003d count.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return Integer.parseInt(trimmedCount);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Parses a {@code String mode} into an {@code Quiz.mode mode}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static Quiz.Mode parseMode(String mode) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        String trimmedMode \u003d mode.trim().toUpperCase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return Quiz.Mode.valueOf(trimmedMode);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 13,
      "-": 43,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * E.g. \u0027n/\u0027 in \u0027addLesson n/Capitals of the world c/Country c/Capital o/Hint\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/QuizModeParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizAnswerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizHelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizStatusCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Parses user input in QuizMode"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class QuizModeParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\\\\\\\\\w*)|(?\u003canswer\u003e^\\\\S.+)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static Matcher matcher;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Checks if userInput is valid"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Command parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, QuizHelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String answer \u003d matcher.group(\"answer\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (commandWord !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return parseCommand(commandWord);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return parseAnswer(answer);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Command parseAnswer(String answer) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new QuizAnswerCommand(answer);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param commandWord full user input string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Command parseCommand(String commandWord) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case QuizStatusCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new QuizStatusCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case QuizHelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new QuizHelpCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 3,
      "halcyoneee": 59,
      "DigiPie": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StartCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_START_COUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_START_MODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_START_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizStartCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * Parses user input when start a session quiz."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class StartCommandParser implements Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "  * Parses the given {@code String} of arguments in the context of the StartCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "  * and returns an StartCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public QuizStartCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_START_NAME, PREFIX_START_COUNT, PREFIX_START_MODE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_START_NAME, PREFIX_START_MODE)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, QuizStartCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_START_NAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int count \u003d ParserUtil.parseCount(argMultimap.getValue(PREFIX_START_COUNT)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            .orElse(String.valueOf(Session.CARD_COUNT_MINIMUM)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Quiz.Mode mode \u003d ParserUtil.parseMode(argMultimap.getValue(PREFIX_START_MODE).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Session session \u003d new Session(name, count, mode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new QuizStartCommand(session);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 33,
      "DigiPie": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Syntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class Syntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Prefix PREFIX_LESSON_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Prefix PREFIX_LESSON_CORE_HEADER \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Prefix PREFIX_LESSON_OPT_HEADER \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Prefix PREFIX_START_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Prefix PREFIX_START_COUNT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Prefix PREFIX_START_MODE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Lessons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " * Wraps all lesson data in memory."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class Lessons {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //Static fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EXCEPTION_INVALID_INDEX \u003d \"Invalid index: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private List\u003cLesson\u003e lessons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Lessons () {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Lesson getLesson(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return lessons.get(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Removes lesson at index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void deleteLesson(int index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            lessons.remove(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Adds a lesson to the current list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.add(lesson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLesson(int index, Lesson lesson) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.set(index, lesson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (!(other instanceof Lessons)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons otherLesson \u003d (Lessons) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return otherLesson.hashCode() \u003d\u003d this.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessons.hashCode();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 67,
      "DigiPie": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Path getLessonsFolderPath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Path getLessonImportExportFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Path lessonsFolderPath \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Path lessonImportExportFilePath \u003d Paths.get(\"import\", \"test-lesson.csv\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        setLessonsFolderPath(newUserPrefs.getLessonsFolderPath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        setLessonImportExportFilePath(newUserPrefs.getLessonImportExportFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Path getLessonsFolderPath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonsFolderPath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonsFolderPath(Path lessonsFolderPath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(lessonsFolderPath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.lessonsFolderPath \u003d lessonsFolderPath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Path getLessonImportExportFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonImportExportFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonImportExportFilePath(Path lessonImportExportFilePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(lessonImportExportFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.lessonImportExportFilePath \u003d lessonImportExportFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return this.hashCode() \u003d\u003d o.hashCode();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return Objects.hash(guiSettings, lessonsFolderPath, lessonImportExportFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + lessonsFolderPath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        sb.append(\"\\nLocal import/export file location : \" + lessonsFolderPath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 24,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Card.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Represents a flash card which minimally contains {@value #MIN_CORE_COUNT} {@link java.lang.String} objects in"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * {@link #cores} and 0 or more {@link java.lang.String} objects in {@link #optionals}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003eA basic {@code Card} will have 2 {@link java.lang.String} objects in {@link #cores} representing"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Question and Answer, and optionally have 1 {@link java.lang.String} object in {@link #optionals} representing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Hint."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Class fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A {@code Card} requires at least {@value #MIN_CORE_COUNT} cores to be testable (e.g. Question and Answer)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final int MIN_CORE_COUNT \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Two {@code Card} objects with the same sets and order of {@link #cores} and {@link #optionals} will have"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * the same {@code hashCode}. See {@link #generateHashCode()}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private int hashCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Cores are fields a {@code Card} must have. A {@code Card} requires at least {@value #MIN_CORE_COUNT} cores"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * to be testable (e.g. Question and Answer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ArrayList\u003cString\u003e cores;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Optionals are fields a {@code Card} can have. A {@code Card} can have 0 or more optionals (e.g. Hint)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ArrayList\u003cString\u003e optionals;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates a {@code Card} which represents a flash card."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param cores {@link #cores} a {@code Card} must have."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param optionals {@link #optionals} a {@code Card} can have."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Card(List\u003cString\u003e cores, List\u003cString\u003e optionals) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(cores, optionals);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cores.addAll(cores);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionals.addAll(optionals);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        hashCode \u003d generateHashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates a {@code Card} which represents a flash card."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param cores {@link #cores} a {@code Card} must have."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Card(List\u003cString\u003e cores) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(cores);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cores.addAll(cores);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        hashCode \u003d generateHashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the list of {@link #cores}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the list of {@link #cores}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ArrayList\u003cString\u003e getCores() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return cores;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the list of {@link #optionals}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the list of {@link #optionals}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ArrayList\u003cString\u003e getOptionals() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return optionals;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Replaces the existing list in {@link #cores} with newCores."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param newCores the new list of {@link #cores}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setCores(List\u003cString\u003e newCores) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(newCores);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cores.clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cores.addAll(newCores);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        hashCode \u003d generateHashCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Replaces the existing list in {@link #optionals} with newOptionals."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param newOptionals the new list of {@link #optionals}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setOptionals(List\u003cString\u003e newOptionals) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(newOptionals);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionals.clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionals.addAll(newOptionals);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        hashCode \u003d generateHashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the core at the specified position in {@link #cores}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index index of the core to return"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the core at the specified position in {@link #cores}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String getCore(int index) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return cores.get(index);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the optional at the specified position in {@link #optionals}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index index of the optional to return"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the optional at the specified position in {@link #optionals}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String getOptional(int index) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return optionals.get(index);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Replaces the core at the specified position in {@link #cores} with newCore."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index index of the core to replace"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param newCore core to be stored at the specified position in {@link #cores}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setCore(int index, String newCore) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cores.set(index, newCore);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        hashCode \u003d generateHashCode();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Replaces the optional at the specified position in {@link #optionals} with newOptional."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index index of the optional to replace"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param newOptional optional to be stored at the specified position in {@link #optionals}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setOptional(int index, String newOptional) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        optionals.set(index, newOptional);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        hashCode \u003d generateHashCode();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Generates a hash code using {@link #cores} and {@link #optionals} as input."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Two {@code Card} objects with the \u003cb\u003esame set and order\u003c/b\u003e of {@link #cores} and {@link #optionals}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * will have the same hash code."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return {@link #hashCode} generated using {@link #cores} and {@link #optionals} as input"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private int generateHashCode() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return Objects.hash(cores, optionals);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        builder.append(\"Hash Code: \")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .append(hashCode())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .append(\", Cores: \")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .append(getCores())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .append(\", Optionals: \")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .append(getOptionals());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return hashCode;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if both are {@code Card} objects, and are the same object or have the same {@link #hashCode}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param other object to be compared for equality with this {@code Card}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if the specified object is a {@code Card} identical to this {@code Card}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(other instanceof Card)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card otherCard \u003d (Card) other;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return otherCard.hashCode() \u003d\u003d this.hashCode();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 4,
      "DigiPie": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/Lesson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.model.card.Card.MIN_CORE_COUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Represents a lesson which contains multiple flash cards and can be loaded into Quiz Mode"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * for testing. It stores multiple {@link Card} objects, and also {@link #coreHeaders} and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * {@link #optionalHeaders} which are headers for the core and optional fields in the {@link Card} objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003eIt also stores {@link #questionCoreIndex} and {@link #answerCoreIndex} which identifies the indices"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * of the question and answer in the {@link Card} objects\u0027 list of cores respectively."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003eA basic {@code Lesson} will have {@link Card} objects, where every {@link Card} could have"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * 2 {@link java.lang.String} objects in their list of cores representing question and answer, and optionally"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * have 1 {@link java.lang.String} object in their list of optionals representing hint."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003eThe lesson\u0027s {@link #coreHeaders} could store \"Country\" and \"Capital\" to identify what the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * questions and answers of the {@link Card} objects are. The lesson\u0027s {@link #optionalHeaders} could store"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * \"Starts with\" to identify what the hints of the {@link Card} objects are."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Static fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static final int DEFAULT_INDEX_QUESTION \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static final int DEFAULT_INDEX_ANSWER \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EXCEPTION_INVALID_NAME \u003d \"Invalid name supplied.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EXCEPTION_INVALID_INDEX \u003d \"Invalid index: \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EXCEPTION_INVALID_CORE_SIZE \u003d \"Invalid number of core headers supplied.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EXCEPTION_INVALID_CORE \u003d \"Invalid core header supplied.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EXCEPTION_INVALID_OPT \u003d \"Invalid optional header supplied.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EXCEPTION_CORE_SIZE_MISMATCH \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        \"The cores of the card to be added do not match the core headers of this lesson.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The name of the lesson which is displayed to the user. It is not used by {@link #equals(Object)}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The headers for the cores of every {@link Card} object in this {@code lesson}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * These headers describe the core values in the {@link Card} objects."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * All {@link Card} objects added to this lesson must have the same number of cores as the number of"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * core headers."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private List\u003cString\u003e coreHeaders;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The headers for the optionals of every {@link Card} object in this {@code lesson}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * These headers describe the optional values in the {@link Card} objects."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private List\u003cString\u003e optionalHeaders;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The index of the question in {@link Card} objects\u0027 cores."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private int questionCoreIndex \u003d DEFAULT_INDEX_QUESTION;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The index of the answer in {@link Card} objects\u0027 cores."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private int answerCoreIndex \u003d DEFAULT_INDEX_ANSWER;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The list of {@link Card} objects."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private List\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Controls the visibility of optionals. If {@code isVisibleOptionals[i]} is set to {@code true},"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * the optional at index {@code i} of every {@see Card} object\u0027s list of optionals is shown."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * If set to {@code false}, all {@see Card} object\u0027s optionals at index {@code i} is hidden."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private boolean[] isVisibleOptionals;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates a {@code Lesson}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param name name of the {@code lesson}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param coreHeaders all {@link Card} objects added to this lesson must have cores corresponding to"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * these headers."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param optionalHeaders if the {@code i}th element of {@link #isVisibleOptionals} is set to true,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *                        the {@code i}th element of optionalHeaders is shown alongside the {@code i}th"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *                        element of every {@link Card} objects\u0027 list of optionals, if it is available."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Lesson(String name, List\u003cString\u003e coreHeaders, List\u003cString\u003e optionalHeaders) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(coreHeaders);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setName(name);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setCoreHeaders(coreHeaders);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setOptionalHeaders(optionalHeaders);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (optionalHeaders !\u003d null \u0026\u0026 optionalHeaders.size() \u003e 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            isVisibleOptionals \u003d new boolean[optionalHeaders.size()];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates a {@code Lesson}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param name name of the {@code lesson}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param noOfCoreHeaders specifies the number of core headers in {@code headers}. Used to separate core"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *                        headers from optional headers."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param headers contains core and optional headers. All {@link Card} objects added to this lesson must"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *                have cores corresponding to the core headers specified."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Lesson(String name, int noOfCoreHeaders, List\u003cString\u003e headers) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireAllNonNull(headers);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e cores;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e optionals;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cores \u003d headers.subList(0, noOfCoreHeaders);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int optionalCount \u003d headers.size() - noOfCoreHeaders;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (optionalCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            optionals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            optionals \u003d headers.subList(optionalCount, headers.size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setName(name);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setCoreHeaders(cores);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setOptionalHeaders(optionals);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (optionals.size() \u003e 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            isVisibleOptionals \u003d new boolean[optionals.size()];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates a {@code Lesson} containing {@link Card} objects."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param name name of the {@code lesson}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param coreHeaders all {@link Card} objects added to this lesson must have cores corresponding to"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * these headers"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param optionalHeaders if the {@code i}th element of {@link #isVisibleOptionals} is set to true,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *                        the {@code i}th element of optionalHeaders is shown alongside the {@code i}th"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *                        element of every {@link Card} objects\u0027 list of optionals, if it is available"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param questionCoreIndex the index of the question in {@link Card} objects\u0027 cores."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param answerCoreIndex the index of the answer in {@link Card} objects\u0027 cores."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param cards list of {@link Card} objects to be added to this lesson"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Lesson(String name, List\u003cString\u003e coreHeaders, List\u003cString\u003e optionalHeaders,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                  int questionCoreIndex, int answerCoreIndex, List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this(name, coreHeaders, optionalHeaders);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setQuestionAnswerIndices(questionCoreIndex, answerCoreIndex);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        addCards(cards);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the name of the lesson. It is not used by {@link #equals(Object)}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param name the name of the lesson which is displayed to the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (name \u003d\u003d null || name.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_INVALID_NAME);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Gets the name of the lesson for displaying to the user."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return name of the lesson"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the core headers which describes what every {@link Card} object\u0027s cores are."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param coreHeaders all {@link Card} objects added to this lesson must have cores corresponding to"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *      * these headers"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setCoreHeaders(List\u003cString\u003e coreHeaders) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(coreHeaders);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (coreHeaders.size() \u003c MIN_CORE_COUNT) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_INVALID_CORE_SIZE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.coreHeaders \u003d coreHeaders;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the core headers which describes what every {@link Card} object\u0027s cores are."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the core headers of this lesson"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cString\u003e getCoreHeaders() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return coreHeaders;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the number of core headers in this lesson"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int getCoreHeaderSize() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return coreHeaders.size();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the optional headers which describes what every {@link Card} object\u0027s optionals are."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param optionalHeaders all {@link Card} objects added to this lesson can have optionals corresponding"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *                        to these headers"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setOptionalHeaders(List\u003cString\u003e optionalHeaders) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (optionalHeaders \u003d\u003d null) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            this.optionalHeaders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.optionalHeaders \u003d optionalHeaders;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (optionalHeaders.size() \u003e 0) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            isVisibleOptionals \u003d new boolean[optionalHeaders.size()];"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the optional headers which describes what every {@link Card} object\u0027s optional are."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the optional headers of this lesson"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cString\u003e getOptionalHeaders() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return optionalHeaders;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the question in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setQuestionCoreIndex(int index) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d coreHeaders.size()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        questionCoreIndex \u003d index;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the answer in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setAnswerCoreIndex(int index) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d coreHeaders.size()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        answerCoreIndex \u003d index;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param questionCoreIndex the index of the question in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param answerCodeIndex the index of the answer in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setQuestionAnswerIndices(int questionCoreIndex, int answerCodeIndex) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setQuestionCoreIndex(questionCoreIndex);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setAnswerCoreIndex(answerCodeIndex);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the index of the question in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int getQuestionCoreIndex() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return questionCoreIndex;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the index of the answer in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int getAnswerCoreIndex() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return answerCoreIndex;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns a {@link #isVisibleOptionals} which controls the visibility of optionals. If"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@code isVisibleOptionals[i]} is set to {@code true}, the optional at index {@code i} of every"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@see Card} object\u0027s list of optionals is shown. If set to {@code false}, all {@see Card} object\u0027s"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * optionals at index {@code i} is hidden."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the list of booleans corresponding to the visibility of headers in {@link #optionalHeaders}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean[] getIsVisibleOptionals() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return isVisibleOptionals;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the visibility of the {@code i}th element of {@link #isVisibleOptionals} to {@code isShown}."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * If {@code isVisibleOptionals[i]} is set to {@code true}, the optional at index {@code i} of every"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@see Card} object\u0027s list of optionals is shown. If set to {@code false}, all {@see Card} object\u0027s"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * optionals at index {@code i} is hidden."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the optional to change visibility of"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param isShown if set to true, the optional at {@code index} will be shown during quiz mode"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setIsVisibleOptional(int index, boolean isShown) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d isVisibleOptionals.length) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        isVisibleOptionals[index] \u003d isShown;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the {@link #isVisibleOptionals} element to get"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the visibility of the optional at {@code index}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean getIsVisibleOptional(int index) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return isVisibleOptionals[index];"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Adds a {@link Card} object to the lesson."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param card {@link Card} to be added to the lesson"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // All Card objects added must have the same number of cores as the number of core headers."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (card.getCores().size() !\u003d coreHeaders.size()) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_CORE_SIZE_MISMATCH);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (String field: card.getCores()) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (field.isEmpty()) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new IllegalArgumentException(EXCEPTION_CORE_SIZE_MISMATCH);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cards.add(card);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Adds a {@link Card} object to the lesson."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@code fields} are separated into two separate sub-lists of cores and optionals based on"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link #coreHeaders}\u0027s {@code size()}."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param fields the {@link Card}\u0027s cores and optionals in this order"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCard(List\u003cString\u003e fields) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireAllNonNull(fields);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e cores \u003d fields.subList(0, coreHeaders.size());"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int optionalCount \u003d fields.size() - coreHeaders.size();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (optionalCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            addCard(new Card(cores));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            List\u003cString\u003e optionals \u003d fields.subList(optionalCount, fields.size());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            addCard(new Card(cores, optionals));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Adds {@link Card} objects to the lesson."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param cards a list of {@link Card} objects to be added to the lesson"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (Card card: cards) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            addCard(card);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the list of {@link Card} objects in this lesson"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cCard\u003e getCards() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return cards;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the number of {@link Card} objects in this lesson"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int getCardCount() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return cards.size();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if there is at least 1 {@link Card} in this lesson"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean hasCards() {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return cards !\u003d null \u0026\u0026 cards.size() !\u003d 0;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Two {@code Lesson} objects with the same hashcode are equivalent."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * They need not have the same {@link #name}."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the hashcode generated using {@link #coreHeaders}, {@link #optionalHeaders},"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link #questionCoreIndex}, {@link #answerCoreIndex} and {@link #cards} as input."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return Objects.hash(coreHeaders, optionalHeaders, questionCoreIndex, answerCoreIndex,"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                cards);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        builder.append(name)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .append(\": Cores [\").append(String.join(\", \", coreHeaders))"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .append(\"], Optionals [\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (optionalHeaders.size() \u003e 0) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            builder.append(String.join(\", \", optionalHeaders));"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        builder.append(\"], Cards [\").append(getCardCount()).append(\"]\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (!(other instanceof Lesson)) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lesson otherLesson \u003d (Lesson) other;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return otherLesson.hashCode() \u003d\u003d this.hashCode();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 82,
      "halcyoneee": 2,
      "DigiPie": 350
    }
  },
  {
    "path": "src/main/java/seedu/address/model/modelmanager/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.modelmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Wrapper interface for QuizModel and ManagementModel"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/modelmanager/management/ManagementModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.modelmanager.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * The API of the ManagementModel component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public interface ManagementModel extends Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Gets the lesson by index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Lesson getLesson(int index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Gets the entire list of lessons."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    List\u003cLesson\u003e getLessons();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Adds the lesson."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void addLesson(Lesson lesson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Updates the lesson at the given index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void setLesson(int index, Lesson updatedLesson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Removes the lesson at the given index from memory, and deletes its corresponding file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param index w"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void deleteLesson(int index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 31,
      "halcyoneee": 24,
      "DigiPie": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/modelmanager/management/ManagementModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.modelmanager.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.Lessons;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Represents the in-memory management of BrainTrain data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ManagementModelManager implements ManagementModel {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ManagementModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private final Lessons lessons;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Initializes a ManagementModelManager with the given userPrefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ManagementModelManager(ReadOnlyUserPrefs userPrefs, Lessons lessons) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        logger.fine(\"Initializing with user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.lessons \u003d lessons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ManagementModelManager() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this(new UserPrefs(), new Lessons());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Lessons \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessons.getLessons();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Lesson getLesson(int index) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lesson \u003d lessons.getLesson(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lesson;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.addLesson(lesson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLesson(int index, Lesson updatedLesson) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.setLesson(index, updatedLesson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void deleteLesson(int index) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.deleteLesson(index);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    public void undoAddressBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    public void redoAddressBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    public void commitAddressBook() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(obj instanceof ManagementModelManager)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModelManager other \u003d (ManagementModelManager) obj;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return userPrefs.equals(other.userPrefs) \u0026\u0026 lessons.equals(other.lessons);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 35,
      "halcyoneee": 89,
      "DigiPie": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/modelmanager/quiz/Quiz.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.modelmanager.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Represents a quiz that stores a list of QuizCard"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class Quiz {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Mode must only be learn/review/preview\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private List\u003cQuizCard\u003e currentSession;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private List\u003cQuizCard\u003e generatedSession;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Mode mode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizCard currentQuizCard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private int currentCardIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private int generatedCardSize;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private boolean isQuizDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private int quizTotalAttempts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private int quizTotalCorrectQuestions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Different types of mode supported in Quiz."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Learn: sees both the question and answer first then get tested."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Review: only get tested."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Preview: sees both question and answer but not tested."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public enum Mode {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        LEARN,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        REVIEW,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        PREVIEW"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Build constructor from session"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param session contains a list of question, answer and list of optional"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public Quiz(List\u003cQuizCard\u003e session, Mode mode) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        checkArgument(mode !\u003d null, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.currentSession \u003d session;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.currentCardIndex \u003d -1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.generatedCardSize \u003d -1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.isQuizDone \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.quizTotalAttempts \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.quizTotalCorrectQuestions \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        generate();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Generates a list of cards based on the chosen cards given by session."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * R"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cQuizCard\u003e generate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        generatedSession \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case PREVIEW:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            generatePreview();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case LEARN:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            // Learn is a combination of Preview + Review"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            generatePreview();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            generateReview();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case REVIEW:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            generateReview();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        generatedCardSize \u003d generatedSession.size();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return generatedSession;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Generates a list of card with the mode Review"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void generateReview() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard currentCard;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c currentSession.size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            currentCard \u003d currentSession.get(i);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            generatedSession.add(new QuizCard(i, currentCard.getQuestion(), currentCard.getAnswer(), Mode.REVIEW));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c currentSession.size(); i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            currentCard \u003d currentSession.get(i);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            generatedSession.add(new QuizCard(i, currentCard.getAnswer(), currentCard.getQuestion(), Mode.REVIEW));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Generates a list of card with the mode Preview see but don\u0027t need to answer."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void generatePreview() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard currentCard;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c currentSession.size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            currentCard \u003d currentSession.get(i);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            generatedSession.add(new QuizCard(i, currentCard.getQuestion(), currentCard.getAnswer(), Mode.PREVIEW));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns true if there is card left in quiz."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean hasCardLeft() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return currentCardIndex \u003c (generatedCardSize - 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the next card in line."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizCard getNextCard() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        currentCardIndex++;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (currentCardIndex \u003c generatedCardSize) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            currentQuizCard \u003d generatedSession.get(currentCardIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return currentQuizCard;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        throw new IndexOutOfBoundsException(\"No cards left.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getCurrentProgress() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return (currentCardIndex + 1) + \"/\" + generatedCardSize;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizCard getCurrentQuizCard() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireNonNull(currentQuizCard);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return currentQuizCard;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Updates the totalAttempts and streak of a specified card in the current session"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * and current quiz session totalAttempts and totalCorrectQuestions"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param index of the card"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param answer user input"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean updateTotalAttemptsAndStreak(int index, String answer) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard sessionCard \u003d currentSession.get(index);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        boolean isCorrect \u003d currentQuizCard.isCorrect(answer);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        sessionCard.updateTotalAttemptsAndStreak(isCorrect);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (isCorrect) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quizTotalCorrectQuestions++;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizTotalAttempts++;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return isCorrect;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int getQuizTotalAttempts() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quizTotalAttempts;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int getQuizTotalCorrectQuestions() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quizTotalCorrectQuestions;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the current session."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cQuizCard\u003e getCurrentSession() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return currentSession;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Format data needed by Session"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return a list of index of card, total attempts and streak in this session."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cList\u003cInteger\u003e\u003e end() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.isQuizDone \u003d true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cList\u003cInteger\u003e\u003e session \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard card;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c currentSession.size(); i++) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            card \u003d currentSession.get(i);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            session.add(Arrays.asList(i, card.getTotalAttempts(), card.getStreak()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return session;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean isQuizDone() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return isQuizDone;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (!(obj instanceof Quiz)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz other \u003d (Quiz) obj;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return other.hashCode() \u003d\u003d this.hashCode();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return Objects.hash(currentSession, generatedSession, mode,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            currentQuizCard, currentCardIndex, isQuizDone);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 222,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/modelmanager/quiz/QuizCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.modelmanager.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Represents a partial of Card, only contains the necessary information for Quiz."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizCard {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Question/answer can take any values, and it\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \" should not be blank or contain only whitespaces\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Quiz.Mode quizMode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private List\u003cString\u003e opt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private int totalAttempts;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private int streak;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private boolean hasAttemptedBefore;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private boolean isWrongTwice;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizCard(String question, String answer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(question, answer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        checkArgument(!question.trim().isEmpty() \u0026\u0026 !answer.isEmpty(), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.index \u003d -1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.totalAttempts \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.streak \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizCard(String question, String answer, List\u003cString\u003e opt) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(question, answer, opt);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        checkArgument(!question.trim().isEmpty() \u0026\u0026 !answer.isEmpty(), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.opt \u003d opt;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.index \u003d -1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.totalAttempts \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.streak \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizCard(int index, String question, String answer, Quiz.Mode quizMode) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(index, question, answer, quizMode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        checkArgument(!question.trim().isEmpty() \u0026\u0026 !answer.isEmpty(), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.quizMode \u003d quizMode;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.hasAttemptedBefore \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.isWrongTwice \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cString\u003e getOpt() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return opt;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assert index \u003e -1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int getTotalAttempts() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return totalAttempts;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int getStreak() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return streak;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean isWrongTwice() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return isWrongTwice;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public Quiz.Mode getQuizMode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(quizMode);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quizMode;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Check if the given answer is the same as the answer of the card."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param answer user\u0027s input answer."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return the result after checking."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean isCorrect(String answer) throws NullPointerException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (hasAttemptedBefore) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            isWrongTwice \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        hasAttemptedBefore \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return answer.equalsIgnoreCase(this.answer);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Update both totalAttempts and streak depending on isCorrect"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param isCorrect the output of isCorrect method"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void updateTotalAttemptsAndStreak(boolean isCorrect) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (quizMode !\u003d Quiz.Mode.PREVIEW) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            if (isCorrect) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                streak +\u003d 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                streak \u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            totalAttempts +\u003d 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (!(obj instanceof QuizCard)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard other \u003d (QuizCard) obj;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return other.hashCode() \u003d\u003d this.hashCode();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return Objects.hash(index, question, answer, opt, totalAttempts, streak);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        sb.append(\"Question: \" + question + \"\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        sb.append(\"Answer: \" + answer + \"\\n\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        sb.append(\"Optionals: \" + opt + \"\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        sb.append(\"Index: \" + index + \"\\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        sb.append(\"Total attempts: \" + totalAttempts + \"\\n\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        sb.append(\"Streak: \" + streak + \"\\n\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 154,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/modelmanager/quiz/QuizModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.modelmanager.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * The API of the QuizModel component."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public interface QuizModel extends Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Generate a list of quizCards that will be tested in quiz."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    List\u003cQuizCard\u003e generateSession();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Return mode of {@code session}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    Quiz.Mode getMode();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Return card count of {@code session}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    int getCount();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Return name of {@code session}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    String getName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Sets the {@code Quiz} information."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    void init(Quiz quiz);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Sets the {@code Quiz} and {@code Session} information."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    void initWithSession(Quiz quiz, Session session);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns if there is still card left in {@code Quiz}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    boolean hasCardLeft();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the next card in line for {@code Quiz}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    QuizCard getNextCard();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the user current progress in {@code Quiz}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    String getCurrentProgress();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the current QuizCard in {@code Quiz}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    QuizCard getCurrentQuizCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Update the totalAttempts and streak of a specified card in the current session."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param index of the current {@code QuizCard}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param answer user input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return true if correct"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    boolean updateTotalAttemptsAndStreak(int index, String answer);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns total attempts in this {@code Quiz}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    int getQuizTotalAttempts();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the total correct questions attempted in this {code Quiz}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    int getQuizTotalCorrectQuestions();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns if User is done with {@code Quiz}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    boolean isQuizDone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns data needed by {@code Session} when {@code Quiz} end."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    List\u003cList\u003cInteger\u003e\u003e end();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 59,
      "lallanachang": 26,
      "DigiPie": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/modelmanager/quiz/QuizModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.modelmanager.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Represents the in-memory management of quiz data"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizModelManager implements QuizModel {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(QuizModelManager.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Quiz quiz;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Session session;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Initialises empty QuizModelManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizModelManager() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        logger.fine(\"Initializing empty constructor\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    // todo include session"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public List\u003cQuizCard\u003e generateSession() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return session.generateSession();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Quiz.Mode getMode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return session.getMode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public int getCount() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return session.getCount();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return session.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void init(Quiz quiz) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(quiz);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.quiz \u003d quiz;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void initWithSession(Quiz quiz, Session session) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        requireAllNonNull(quiz, session);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.quiz \u003d quiz;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.session \u003d session;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean hasCardLeft() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.hasCardLeft();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizCard getNextCard() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.getNextCard();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getCurrentProgress() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.getCurrentProgress();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizCard getCurrentQuizCard() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.getCurrentQuizCard();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean updateTotalAttemptsAndStreak(int index, String answer) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.updateTotalAttemptsAndStreak(index, answer);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int getQuizTotalAttempts() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.getQuizTotalAttempts();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int getQuizTotalCorrectQuestions() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.getQuizTotalCorrectQuestions();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean isQuizDone() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (quiz !\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return quiz.isQuizDone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // By default if no quiz is running, it will be considered as done"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cList\u003cInteger\u003e\u003e end() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.end();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (!(obj instanceof QuizModelManager)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelManager other \u003d (QuizModelManager) obj;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.equals(other.quiz);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 98,
      "lallanachang": 29,
      "DigiPie": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/session/Session.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * Represents a session that stores cards based on srs data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class Session {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static final int CARD_COUNT_MINIMUM \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Quiz.Mode mode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private int cardCount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private List\u003cQuizCard\u003e quizCards;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private List\u003cSrsCard\u003e srsCards;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Session(String name, int cardCount, Quiz.Mode mode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (name \u003d\u003d null || name.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid name\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (cardCount \u003c CARD_COUNT_MINIMUM) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"CardCount should not zero\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if ((mode !\u003d Quiz.Mode.LEARN) \u0026 (mode !\u003d Quiz.Mode.REVIEW) \u0026 (mode !\u003d Quiz.Mode.PREVIEW)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid mode\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.cardCount \u003d cardCount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Session(String name, int cardCount, Quiz.Mode mode, List\u003cSrsCard\u003e srsCards) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (name \u003d\u003d null || name.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid name\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (cardCount \u003c CARD_COUNT_MINIMUM) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"CardCount should not be less than five in a single session\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if ((mode !\u003d Quiz.Mode.LEARN) \u0026 (mode !\u003d Quiz.Mode.REVIEW) \u0026 (mode !\u003d Quiz.Mode.PREVIEW)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid mode\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.cardCount \u003d cardCount;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.srsCards \u003d srsCards;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Session(String name, Quiz.Mode mode, List\u003cSrsCard\u003e srsCards) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (name \u003d\u003d null || name.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid name\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if ((mode !\u003d Quiz.Mode.LEARN) \u0026 (mode !\u003d Quiz.Mode.REVIEW) \u0026 (mode !\u003d Quiz.Mode.PREVIEW)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid mode\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.cardCount \u003d 10;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.srsCards \u003d srsCards;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Generate a list of quizCards that will pass to quiz system."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public List\u003cQuizCard\u003e generateSession() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCard currentCard;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        for (int i \u003d 0; i \u003c cardCount; i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            currentCard \u003d srsCards.get(i);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            quizCards.add(new QuizCard(currentCard.getQuestion(), currentCard.getAnswer()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return quizCards;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Quiz.Mode getMode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public int getCount() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return cardCount;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public List\u003cSrsCard\u003e getSrsCards() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return srsCards;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "lallanachang": 97,
      "DigiPie": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/session/SrsCardsManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static java.time.temporal.ChronoUnit.HOURS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Represents a management of cards manager."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class SrsCardsManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Lesson lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private HashMap\u003cInteger, CardSrsData\u003e cardData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private List\u003cSrsCard\u003e srsCards;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private List\u003cList\u003cInteger\u003e\u003e quizInformation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Instant currentDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SrsCardsManager(Lesson lesson, HashMap\u003cInteger, CardSrsData\u003e cardData) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        requireAllNonNull(lesson, cardData);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.cardData \u003d cardData;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SrsCardsManager(List\u003cSrsCard\u003e srsCards, List\u003cList\u003cInteger\u003e\u003e quizInformation, Instant currentDate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        requireAllNonNull(srsCards, quizInformation);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.quizInformation \u003d quizInformation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.srsCards \u003d srsCards;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.currentDate \u003d currentDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Sorts all cards in this lesson based on their srsDueDate."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public List\u003cSrsCard\u003e sort() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cCard\u003e cards \u003d lesson.getCards();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e srsCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            Card currentCard \u003d cards.get(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            SrsCard srsCard \u003d new SrsCard(currentCard, cardData.get(currentCard.hashCode()), lesson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            Instant currentSrsDueDate \u003d srsCard.getSrsDueDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            int currentSize \u003d srsCards.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (srsCards.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                srsCards.add(srsCard);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                for (int k \u003d 0; k \u003c currentSize; k++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    if (currentSrsDueDate.compareTo(srsCards.get(k).getSrsDueDate()) \u003c 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        srsCards.add(k, srsCard);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        srsCards.add(srsCard);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return srsCards;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Updates fields of each cardData class based on the result of quiz system."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public List\u003cCardSrsData\u003e updateCardData() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        List\u003cCardSrsData\u003e updatedCardData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        HashMap\u003cSrsCard, Integer\u003e memoryBoxes \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        for (int i \u003d 0; i \u003c quizInformation.size(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            Instant srsDueDate \u003d srsCards.get(i).getSrsDueDate();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (srsDueDate.compareTo(currentDate) \u003c 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                memoryBoxes.put(srsCards.get(i), 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (currentDate.until(srsDueDate, HOURS) \u003c 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                memoryBoxes.put(srsCards.get(i), 2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (currentDate.until(srsDueDate, HOURS) \u003c 5) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                memoryBoxes.put(srsCards.get(i), 3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (currentDate.until(srsDueDate, HOURS) \u003c 12) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                memoryBoxes.put(srsCards.get(i), 4);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                memoryBoxes.put(srsCards.get(i), 5);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            int currentHashCode \u003d srsCards.get(i).getHashcode();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            int currentNumOfAttempts \u003d srsCards.get(i).getNumOfAttempts() + quizInformation.get(i).get(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            int currentStreak \u003d srsCards.get(i).getStreak() + quizInformation.get(i).get(2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            int currentLevel \u003d memoryBoxes.get(srsCards.get(i));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (quizInformation.get(i).get(1).equals(quizInformation.get(i).get(2)) \u0026\u0026 currentLevel !\u003d 5) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                memoryBoxes.put(srsCards.get(i), currentLevel + 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (quizInformation.get(i).get(1) \u003e quizInformation.get(i).get(2) \u0026\u0026 currentLevel !\u003d 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                memoryBoxes.put(srsCards.get(i), currentLevel - 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            Instant updatedSrsDueDate \u003d Instant.MIN;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (memoryBoxes.get(srsCards.get(i)) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                updatedSrsDueDate \u003d currentDate.plus(Duration.ofHours(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (memoryBoxes.get(srsCards.get(i)) \u003d\u003d 2) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                updatedSrsDueDate \u003d currentDate.plus(Duration.ofHours(5));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (memoryBoxes.get(srsCards.get(i)) \u003d\u003d 3) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                updatedSrsDueDate \u003d currentDate.plus(Duration.ofHours(12));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (memoryBoxes.get(srsCards.get(i)) \u003d\u003d 4) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                updatedSrsDueDate \u003d currentDate.plus(Duration.ofHours(24));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (memoryBoxes.get(srsCards.get(i)) \u003d\u003d 5) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                updatedSrsDueDate \u003d currentDate.plus(Duration.ofHours(48));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            updatedCardData.add(new CardSrsData(currentHashCode, currentNumOfAttempts, currentStreak,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    updatedSrsDueDate));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return updatedCardData;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 4,
      "eugenefdw": 3,
      "lallanachang": 108,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/srscard/SrsCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.model.srscard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * Represents a flashcard contains both core fields(question and answer) and srs data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class SrsCard {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Card card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private CardSrsData cardData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Lesson lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private int questionIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private int answerIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public SrsCard(Card card, CardSrsData cardData, Lesson lesson) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        requireAllNonNull(card, cardData, lesson);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.cardData \u003d cardData;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        questionIndex \u003d lesson.getQuestionCoreIndex();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        answerIndex \u003d lesson.getAnswerCoreIndex();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return card.getCore(questionIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Card getCard() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public CardSrsData getCardData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return cardData;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return card.getCore(answerIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Instant getSrsDueDate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return cardData.getSrsDueDate();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public int getHashcode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return cardData.getHashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public int getNumOfAttempts() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return cardData.getNumOfAttempts();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public int getStreak() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return cardData.getStreak();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Lesson getLesson() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return lesson;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCard other \u003d (SrsCard) obj;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return other.getHashcode() \u003d\u003d this.getHashcode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 3,
      "eugenefdw": 1,
      "lallanachang": 65,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/CardSrsData.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " * Represents a Card which contains the data and hashcode that can be called by session"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public class CardSrsData {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private int hashCode; // This corresponds to a Card\u0027s hashCode"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private int numOfAttempts; // Number of attempts for this Card by a User"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private int streak;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private Instant srsDueDate; // SRS Due Date for a User"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private HashMap \u003cInteger, CardSrsData\u003e cardMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Constructor for the CardData"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Takes in the hashCode, numOfAttempts, streak and the srsDueDate"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param hashCode this corresponds to a Card\u0027s hashCode"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param numOfAttempts this corresponds to the number of attempts"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param streak this corresponds to the number of correct answers consecutively"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param srsDueDate this corresponds to the space repetition storage due date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public CardSrsData(int hashCode, int numOfAttempts, int streak, Instant srsDueDate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        this.hashCode \u003d hashCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        this.numOfAttempts \u003d numOfAttempts;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        this.streak \u003d streak;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        this.srsDueDate \u003d srsDueDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Function for session management to get list of card datas"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param hashCode must be given"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @return card from hashmap"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public CardSrsData getCard(int hashCode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return cardMap.get(hashCode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setCard(int hashCode, CardSrsData values) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardMap.put(hashCode, values);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public int getHashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return hashCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public int getNumOfAttempts() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return numOfAttempts;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setNumOfAttempts(int numOfAttempts) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        this.numOfAttempts \u003d numOfAttempts;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public int getStreak() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return streak;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setStreak(int streak) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        this.streak \u003d streak;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /*@Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CardSrsData other \u003d (CardSrsData) obj;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return other.getHashCode() \u003d\u003d this.getHashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public Instant getSrsDueDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return srsDueDate;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 60,
      "eugenefdw": 1,
      "lallanachang": 8,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/User.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " * Represents a user data and allows importing and exporting"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private HashMap\u003cInteger, CardSrsData\u003e cardmap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public User() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        cardmap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void addCard(CardSrsData singleCard) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        cardmap.put(singleCard.getHashCode(), singleCard);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void deleteCard(CardSrsData singleCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        cardmap.remove(singleCard.getHashCode());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setCard(CardSrsData singleCard) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        addCard(singleCard);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public CardSrsData getCard(int hashCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return cardmap.get(hashCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public Map\u003cInteger, CardSrsData\u003e getCards() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return cardmap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 34,
      "eugenefdw": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CsvLessonImportExport.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " * A class to access individual Lesson stored in the hard disk as a csv file"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class CsvLessonImportExport implements LessonImportExport {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public CsvLessonImportExport(Path filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Path getImportExportFilePath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Optional\u003cLesson\u003e importLesson(Path filePath) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void exportLesson(Lesson lesson, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CsvLessonsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.util.CsvUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.Lessons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " * A class to access Lessons stored in the hard disk as a csv file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class CsvLessonsStorage implements LessonsStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CsvLessonsStorage.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final String CORE_ESCAPE \u003d \"*\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final String QUESTION_ESCAPE \u003d \"?\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final String ANSWER_ESCAPE \u003d \"@\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final String READ_WARNING_CORE_LABEL \u003d \"Core escape character [ \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            + CORE_ESCAPE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            + \" ] was found after non-core column.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Path folderPath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public CsvLessonsStorage(Path folderPath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.folderPath \u003d folderPath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Path getLessonsFolderPath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return folderPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonsFolderPath(Path folderPath) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(folderPath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.folderPath \u003d folderPath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Parses the given file at the path into a lesson, in the following order:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * - Reads the file into a List of String arrays"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * - Parses the first String array as a header"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * -\u003e Values marked as core using CORE_ESCAPE have the marker removed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *      --\u003e Values marked with QUESTION_ESCAPE and ANSWER_ESCAPE are assigned."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *       - See documentation on save data. TODO"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * -\u003e The count of cores is kept"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * - Name of lesson is read from filename without extension"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * - Fields of lesson read from modified header"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * - Cards are read from remainder of data."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param filePath Assumes not null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @return The parsed lesson."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Optional\u003cLesson\u003e parseFileIntoLesson(Path filePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString[]\u003e data;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            data \u003d CsvUtil.readCsvFile(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.warning(\"Unable to read file at: \" + filePath.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (data \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.warning(\"Empty/invalid file at: \" + filePath.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String[] header \u003d data.get(0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int coreCount \u003d 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int questionIndex \u003d Lesson.DEFAULT_INDEX_QUESTION;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int answerIndex \u003d Lesson.DEFAULT_INDEX_ANSWER;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        boolean readingCores \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (int i \u003d 0; i \u003c header.length; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            String value \u003d header[i];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            if (value.startsWith(CORE_ESCAPE)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                if (!readingCores) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    logger.warning(\"File \" + filePath.toString() + \": \" + READ_WARNING_CORE_LABEL);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                coreCount++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                header[i] \u003d value.substring(CORE_ESCAPE.length());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                String substring \u003d header[i];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                if (substring.startsWith(QUESTION_ESCAPE)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    header[i] \u003d substring.substring(QUESTION_ESCAPE.length());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    questionIndex \u003d i;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                } else if (substring.startsWith(ANSWER_ESCAPE)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    header[i] \u003d substring.substring(ANSWER_ESCAPE.length());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    answerIndex \u003d i;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                readingCores \u003d false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (coreCount \u003c Card.MIN_CORE_COUNT) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String lessonName \u003d filePath.getFileName().toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int extensionPos \u003d lessonName.lastIndexOf(\".\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessonName \u003d lessonName.substring(0, extensionPos);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString\u003e fields \u003d Arrays.asList(header);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lesson newLesson \u003d new Lesson(lessonName, coreCount, fields);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        newLesson.setQuestionAnswerIndices(questionIndex, answerIndex);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (int i \u003d 1; i \u003c data.size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                newLesson.addCard(Arrays.asList(data.get(i)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return Optional.of(newLesson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns a String[] containing correctly formatted strings for saving."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Appends QUESTION_ESCAPE and ANSWER_ESCAPE chars to the headers, then appends CORE_ESCAPE to all remaining core"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * values."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param lesson"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @return Header data with relevant escape characters."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private String[] parseHeaderData(Lesson lesson) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String[] header;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString\u003e headerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        headerList.addAll(lesson.getCoreHeaders());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        headerList.addAll(lesson.getOptionalHeaders());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int headerSize \u003d headerList.size();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        header \u003d new String[headerSize];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        headerList.toArray(header);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        header[lesson.getQuestionCoreIndex()] \u003d QUESTION_ESCAPE + header[lesson.getQuestionCoreIndex()];"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        header[lesson.getAnswerCoreIndex()] \u003d ANSWER_ESCAPE + header[lesson.getAnswerCoreIndex()];"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (int i \u003d 0; i \u003c lesson.getCoreHeaderSize(); i++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            header[i] \u003d CORE_ESCAPE + header[i];"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return header;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns a String[] of all card fields in order."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param card"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @return Formatted card data."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private String[] parseCardData(Card card) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String[] cardArray;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString\u003e cardData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        cardData.addAll(card.getCores());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        cardData.addAll(card.getOptionals());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        cardArray \u003d new String[card.getCores().size() + card.getOptionals().size()];"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        cardData.toArray(cardArray);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return cardArray;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * TODO"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param lesson"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private void saveLessonToFile(Lesson lesson, Path folderPath) throws IOException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString[]\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path filePath \u003d Paths.get(folderPath.toString(), lesson.getName() + \".csv\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        data.add(parseHeaderData(lesson));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (Card card : lesson.getCards()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            data.add(parseCardData(card));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvUtil.writeCsvFile(filePath, data);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Optional\u003cLessons\u003e readLessons() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return readLessons(folderPath);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Optional\u003cLessons\u003e readLessons(Path folderPath) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(folderPath);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cPath\u003e paths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons lessons \u003d new Lessons();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            Files.walk(folderPath, 1).filter(path -\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    path.toString().endsWith(\".csv\")).forEach(paths::add);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (Path filePath : paths) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            Optional\u003cLesson\u003e newLesson \u003d parseFileIntoLesson(filePath);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            newLesson.ifPresent(lessons::addLesson);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return Optional.of(lessons);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public int saveLessons(Lessons lessons) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return saveLessons(lessons, folderPath);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public int saveLessons(Lessons lessons, Path folderPath) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(lessons);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(folderPath);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int saveCount \u003d 0;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cLesson\u003e allLessons \u003d lessons.getLessons();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (Lesson lesson : allLessons) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                saveLessonToFile(lesson, folderPath);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                saveCount++;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                logger.warning(lesson.getName() + \" failed to save; IOException occurred\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return saveCount;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 242,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CsvUserStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.commons.util.CsvUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " * A class to access User stored in the hard disk as a csv file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public class CsvUserStorage implements UserStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CsvLessonsStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public CsvUserStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public Path getUserFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setUserFilePath(Path filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private Optional\u003cUser\u003e parseFileIntoUser(Path filePath) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        List\u003cString[]\u003e data;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            data \u003d CsvUtil.readCsvFile(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            logger.warning(\"Unable to read file at: \" + filePath.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        if (data \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            logger.warning(\"Empty/invalid file at: \" + filePath.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        User user \u003d new User();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        for (String[] arr : data) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            user.addCard(parseStringIntoCard(arr));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return Optional.of(user);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * TODO"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param user"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private void parseUserIntoFile(User user, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        user.getCards();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        List\u003cString[]\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        for (Map.Entry\u003cInteger, CardSrsData\u003e entry : user.getCards().entrySet()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            data.add(parseCardIntoString(entry.getValue()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        CsvUtil.writeCsvFile(filePath, data);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param card"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @return a String array with the cardData(hashcode, numAttempts, streak, srs)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private String[] parseCardIntoString(CardSrsData card) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        String[] cardArray \u003d new String[4];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        cardArray[0] \u003d Integer.toString(card.getHashCode());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        cardArray[1] \u003d Integer.toString(card.getNumOfAttempts());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        cardArray[2] \u003d Integer.toString(card.getStreak());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        cardArray[3] \u003d card.getSrsDueDate().toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return cardArray;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * TODO"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param cardArray"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private CardSrsData parseStringIntoCard(String[] cardArray) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        int hashCode;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        int numOfAttempts;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        int streak;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        Instant srs;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        hashCode \u003d Integer.getInteger(cardArray[0]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        numOfAttempts \u003d Integer.getInteger(cardArray[1]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        streak \u003d Integer.getInteger(cardArray[2]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        srs \u003d Instant.parse(cardArray[3]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        CardSrsData card \u003d new CardSrsData(hashCode, numOfAttempts, streak, srs);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public Optional\u003cUser\u003e readUser() throws IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return readUser(filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public Optional\u003cUser\u003e readUser(Path filePath) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        Optional\u003cUser\u003e newUser \u003d parseFileIntoUser(filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return newUser;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void saveUser(User user) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        saveUser(user, filePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void saveUser(User users, Path filePath) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        requireNonNull(users);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            parseUserIntoFile(users, filePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            logger.warning(\"Failed to save user; IOException occured\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/LessonImportExport.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " * Represents explicit external lesson importing and exporting of {@link Lesson}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public interface LessonImportExport {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns the default folder exported lessons are placed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Path getImportExportFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns Lesson data as a {@link Lesson} from a given location."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns {@code Optional.empty()} if file is not found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @throws IOException if there was any problem when reading from the location."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Optional\u003cLesson\u003e importLesson(Path filePath) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Exports the given {@link Lesson} to the given location."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param lesson cannot be null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void exportLesson(Lesson lesson, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/LessonsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.Lessons;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " * Represents a storage for {@link Lessons}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public interface LessonsStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns the folder path of the data file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Path getLessonsFolderPath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Sets the folder path of the data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void setLessonsFolderPath(Path folderPath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns Lessons data as a {@link Lessons}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Optional\u003cLessons\u003e readLessons() throws IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @see #getLessonsFolderPath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Optional\u003cLessons\u003e readLessons(Path folderPath) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Saves the given {@link Lessons} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param lessons cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @return Number of lessons successfully saved."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    int saveLessons(Lessons lessons) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @see #saveLessons(Lessons)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    int saveLessons(Lessons lessons, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.Lessons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public interface Storage extends UserPrefsStorage, LessonsStorage, LessonImportExport, UserStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Optional\u003cLessons\u003e readLessons() throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    int saveLessons(Lessons lessons) throws IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Optional\u003cLesson\u003e importLesson(Path filePath) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void exportLesson(Lesson lesson, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 1,
      "eugenefdw": 9,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.Lessons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private LessonsStorage lessonsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private LessonImportExport lessonImportExport;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public StorageManager(UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                          LessonsStorage lessonsStorage,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                          LessonImportExport lessonImportExport) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.lessonsStorage \u003d lessonsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.lessonImportExport \u003d lessonImportExport;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Lessons methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Path getLessonsFolderPath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonsStorage.getLessonsFolderPath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonsFolderPath(Path folderPath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessonsStorage.setLessonsFolderPath(folderPath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Optional\u003cLessons\u003e readLessons() throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonsStorage.readLessons();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Optional\u003cLessons\u003e readLessons(Path filePath) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonsStorage.readLessons(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public int saveLessons(Lessons lessons) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonsStorage.saveLessons(lessons);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public int saveLessons(Lessons lessons, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonsStorage.saveLessons(lessons, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Path getImportExportFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonImportExport.getImportExportFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Optional\u003cLesson\u003e importLesson(Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void exportLesson(Lesson lesson, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public Path getUserFilePath() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setUserFilePath(Path folderPath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public Optional\u003cUser\u003e readUser() throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public Optional\u003cUser\u003e readUser(Path folderPath) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void saveUser(User user) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void saveUser(User user, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 30,
      "eugenefdw": 40,
      "halcyoneee": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserImportExport.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " * Represents explicit and implicit user importing and exporting of {@link User}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public interface UserImportExport {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * returns the default file Path where the updated user are placed at."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    Path getImportExportFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Returns User data as a {@link User} from a given location."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Returns {@code Optional.empty()} if file is not found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @throws IOException if problem encountered when reading from location"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    Optional\u003cUser\u003e importUser(Path filePath) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Exports the given {@link User} to the given location."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param user cannot be null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    void exportUser(User user, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " * Represents a storage for {@link User}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public interface UserStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Returns the folder path of the data file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    Path getUserFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Sets the folder path of the data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    void setUserFilePath(Path folderPath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Returns Lessons data as a {@link User}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    Optional\u003cUser\u003e readUser() throws IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @see #getUserFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    Optional\u003cUser\u003e readUser(Path folderPath) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Saves the given {@link User} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param user cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    void saveUser(User user) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @see #saveUser(User, Path)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    void saveUser(User user, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 1,
      "-": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizAnswerCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizResultDisplay quizResultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private StackPane quizResultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizResultDisplay \u003d new QuizResultDisplay();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizResultDisplayPlaceholder.getChildren().add(quizResultDisplay.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            if (commandResult.isShowQuiz()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                String feedback \u003d commandResult.getFeedbackToUser();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                // TODO refactor this"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                if (feedback.contains(QuizAnswerCommand.MESSAGE_CORRECT)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    resultDisplay.setFeedbackToUser(QuizAnswerCommand.MESSAGE_CORRECT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    feedback \u003d feedback.replace(QuizAnswerCommand.MESSAGE_CORRECT, \"\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                } else if (feedback.contains(QuizAnswerCommand.MESSAGE_WRONG_ONCE)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    resultDisplay.setFeedbackToUser(QuizAnswerCommand.MESSAGE_WRONG_ONCE);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    feedback \u003d feedback.replace(QuizAnswerCommand.MESSAGE_WRONG_ONCE, \"\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                } else if (feedback.contains(\"The correct answer is\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    int startIndex \u003d feedback.indexOf(\"The correct answer is \");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    int endIndex \u003d feedback.indexOf(\"Question: \");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    String removeThisString \u003d feedback.substring(startIndex, endIndex);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    resultDisplay.setFeedbackToUser(removeThisString);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    feedback \u003d feedback.replace(removeThisString, \"\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                quizResultDisplay.setFeedbackToUser(feedback);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                // clear"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                quizResultDisplay.setFeedbackToUser(\"\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 35,
      "-": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/QuizResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String FXML \u003d \"QuizResultDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String boldStyle \u003d \"-fx-font-family: \\\"Segoe UI\\\";\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"-fx-font-weight: bold;\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private TextFlow quizResultDisplay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizResultDisplay() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizResultDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Text feedback \u003d new Text(feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizResultDisplay.getChildren().add(feedback);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // contains only question"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (!feedbackToUser.contains(\"Answer:\") \u0026\u0026 feedbackToUser.contains(\"Question:\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            Text text1 \u003d new Text(\"Type the \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            Text answer \u003d new Text(\"answer \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            Text text2 \u003d new Text(\"for the \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            Text question \u003d new Text(\"question \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            Text text3 \u003d new Text(\"above and press Enter:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            answer.setStyle(boldStyle);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            question.setStyle(boldStyle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quizResultDisplay.getChildren().addAll(text1, answer, text2, question, text3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/braintrain_colour_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 4,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".quiz-result-display {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/*.quiz-result-display *.text {*/"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /*-fx-text-alignment: center;*/"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/*.quiz-result-display .label {*/"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /*-fx-text-fill: black !important;*/"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#resultDisplay .content, #quizResultDisplay .content {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#quizResultDisplay {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-padding: 0 10 10 10;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#quizResultDisplay \u003e Text {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-fill: DCDCDC;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 25,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         title\u003d\"BrainTrain App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    \u003cImage url\u003d\"@/images/braintrain_colour_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"quizResultDisplayPlaceholder\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                   styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                   minHeight\u003d\"340\" prefHeight\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        \u003c!--\u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e--\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "          \u003c!--\u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e--\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            \u003c!--\u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "              \u003c!--\u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e--\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            \u003c!--\u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            \u003c!--\u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e--\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "          \u003c!--\u003c/VBox\u003e--\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "          \u003c!--\u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e--\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            \u003c!--\u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "              \u003c!--\u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e--\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            \u003c!--\u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "          \u003c!--\u003c/StackPane\u003e--\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        \u003c!--\u003c/SplitPane\u003e--\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 19,
      "-": 56
    }
  },
  {
    "path": "src/main/resources/view/QuizResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" prefHeight\u003d\"155.0\" prefWidth\u003d\"488.0\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    \u003cTextFlow fx:id\u003d\"quizResultDisplay\" styleClass\u003d\"quiz-result-display\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    \u003c!--\u003cchildren\u003e--\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "       \u003c!--\u003cVBox \u003e--\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "          \u003c!--\u003cchildren\u003e--\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "             \u003c!--\u003cTextArea fx:id\u003d\"quizResultDisplay\" editable\u003d\"false\"--\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                       \u003c!--styleClass\u003d\"quiz-result-display\" /\u003e--\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         \u003c!--\u003c/children\u003e--\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "      \u003c!--\u003c/VBox\u003e--\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "   \u003c!--\u003c/children\u003e--\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 22
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        //        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //        return personListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 5,
      "-": 46
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/QuizResultDisplayHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * A handler for the {@code QuizResultDisplay} of the UI"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizResultDisplayHandle extends NodeHandle\u003cTextFlow\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String RESULT_DISPLAY_ID \u003d \"#quizResultDisplay\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizResultDisplayHandle(TextFlow quizResultDisplayNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        super(quizResultDisplayNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the text in the result display."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (Node node: getRootNode().getChildren()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            sb.append(((Text) node).getText());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.Lessons;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns a defensive copy of the management."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ManagementModel getModel() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel copy \u003d new ManagementModelManager(new UserPrefs(), new Lessons());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 1,
      "-": 58,
      "DigiPie": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotNull(fifthPersonIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 91,
      "DigiPie": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/index/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.commons.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CsvUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.AccessDeniedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class CsvUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static final String[] TEST_STRINGS \u003d new String[]{\"ab\", \"bc\", \"cd\", \"de\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readCsvFile_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            CsvUtil.readCsvFile(null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    // I can\u0027t guarantee the path is access denied since it might be OS dependent, so.."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readCsvFile_accessDeniedPath_throwsAccessDeniedException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        final Path emptyPath \u003d Paths.get(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Assert.assertThrows(AccessDeniedException.class, () -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            CsvUtil.readCsvFile(emptyPath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readCsvFile_nonExistentPath() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        final Path fakePath \u003d Paths.get(\"doesnotexist\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNull(CsvUtil.readCsvFile(fakePath));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readCsvFile_invalidFile() throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path path \u003d Paths.get(\"src/test/data/empty.bmp\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(null, CsvUtil.readCsvFile(path));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readCsvFile() throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path path \u003d Paths.get(\"src/test/data/test.csv\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString[]\u003e data \u003d CsvUtil.readCsvFile(path);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String[] testData \u003d TEST_STRINGS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        //Extra handling of test data for UTF-8 BOM"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (testData[0].startsWith(\"\\uFEFF\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            testData[0] \u003d testData[0].substring(1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (int i \u003d 0; i \u003c testData.length; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            String value \u003d testData[i];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            for (String str : data.get(i)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                assertEquals(value, str);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void writeCsvFile() throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path path \u003d TestUtil.getFilePathInSandboxFolder(\"test_write.csv\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString[]\u003e data \u003d Arrays.asList(TEST_STRINGS, TEST_STRINGS, TEST_STRINGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertTrue(CsvUtil.writeCsvFile(path, data));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        data \u003d CsvUtil.readCsvFile(path);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNotNull(data);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void writeCsvFile_emptyData() throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path path \u003d TestUtil.getFilePathInSandboxFolder(\"test_write_empty.csv\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString[]\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertFalse(CsvUtil.writeCsvFile(path, data));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void writeCsvFile_invalidFile() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path path \u003d Paths.get(\"src/test/data/test-readonly.csv\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        File file \u003d path.toFile();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        file.setReadOnly();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString[]\u003e data \u003d Arrays.asList(TEST_STRINGS, TEST_STRINGS, TEST_STRINGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Assert.assertThrows(AccessDeniedException.class, () -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            CsvUtil.writeCsvFile(path, data);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(commandHistoryWithA \u003d\u003d null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizAnswerCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizStatusCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.Lessons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizCard;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.storage.CsvLessonImportExport;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.storage.CsvLessonsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModel managementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel quizModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonsStorage lessonsStorage \u003d new CsvLessonsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonImportExport lessonImportExport \u003d new CsvLessonImportExport(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userPrefsStorage, lessonsStorage, lessonImportExport);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        logic \u003d new LogicManager(managementModel, quizModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_startCommand_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // TODO change to session"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // this hardcoded values matched QuizStartCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // when session is implemented then this will change to session instead"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card1 \u003d new QuizCard(\"Japan\", \"Tokyo\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card3 \u003d new QuizCard(\"Christmas Island\", \"The Settlement\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card4 \u003d new QuizCard(\"中国\", \"北京\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2, card3, card4));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final Quiz quiz \u003d new Quiz(quizCards, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelManager expectedModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quiz);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard expectedCard \u003d expectedModel.getNextCard();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult expected \u003d new CommandResult(String.format(QuizStartCommand.MESSAGE_QUESTION_ANSWER,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedCard.getQuestion(), expectedCard.getAnswer()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(QuizStartCommand.COMMAND_WORD, expected.getFeedbackToUser(), expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_quizCommand_success() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String answer \u003d \"Budapest\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // TODO change to session"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // this hardcoded values matched QuizStartCommand"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // when session is implemented then this will change to session instead"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card1 \u003d new QuizCard(\"Japan\", \"Tokyo\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card3 \u003d new QuizCard(\"Christmas Island\", \"The Settlement\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card4 \u003d new QuizCard(\"中国\", \"北京\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2, card3, card4));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final Quiz quiz \u003d new Quiz(quizCards, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelManager expectedModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quiz);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard expectedCard \u003d expectedModel.getNextCard();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expected \u003d new CommandResult(String.format(QuizAnswerCommand.MESSAGE_QUESTION_ANSWER,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedCard.getQuestion(), expectedCard.getAnswer()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.init(new Quiz(quizCards, Quiz.Mode.LEARN));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(answer, expected.getFeedbackToUser(), expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_quizStatusCommand_success() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // TODO change to session"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // this hardcoded values matched StartCommand"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // when session is implemented then this will change to session instead"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card1 \u003d new QuizCard(\"Japan\", \"Tokyo\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card3 \u003d new QuizCard(\"Christmas Island\", \"The Settlement\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card4 \u003d new QuizCard(\"中国\", \"北京\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2, card3, card4));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final Quiz quiz \u003d new Quiz(quizCards, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelManager expectedModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quiz);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expected \u003d new CommandResult(String.format(QuizStatusCommand.MESSAGE_RESULT,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedModel.getQuizTotalAttempts(), expectedModel.getQuizTotalCorrectQuestions(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedModel.getCurrentProgress()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.init(new Quiz(quizCards, Quiz.Mode.LEARN));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(\"\\\\status\", expected.getFeedbackToUser(), expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(new QuizAnswerCommand(\"someanswer\").execute(quizModel, history).isShowQuiz());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void isShowHelp() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(new HelpCommand().execute(managementModel, history).isShowHelp());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void isExit() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(new ExitCommand().execute(managementModel, history).isExit());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getHistory() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandHistory empty \u003d new CommandHistory();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(empty.getHistory(), logic.getHistory());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Also confirms that {@code expectedManagementModel} is as specified."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, ManagementModel)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                                      ManagementModel expectedManagementModel) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedManagementModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, QuizModel)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, QuizModel expectedModel) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, ManagementModel)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, ManagementModel)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, ManagementModel)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel expectedManagementModel \u003d new ManagementModelManager(new UserPrefs(), new Lessons());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedManagementModel);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *      - the internal management manager data are same as those in the {@code expectedManagementModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *      - {@code expectedManagementModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                                           String expectedMessage, ManagementModel expectedManagementModel) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(expectedManagementModel, managementModel);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *      - the internal management manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                                       String expectedMessage, QuizModel expectedModel) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedModel, quizModel);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 6,
      "halcyoneee": 116,
      "-": 113,
      "DigiPie": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/AddLessonCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.exceptions.CommandException.MESSAGE_EXPECTED_MGT_MODEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizCard;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.TypicalLessons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class AddLessonCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void constructor_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new AddLessonCommand(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_lessonAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModelStubAcceptingLesson modelStub \u003d new ManagementModelStubAcceptingLesson();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson validLesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new AddLessonCommand(validLesson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(String.format(AddLessonCommand.MESSAGE_SUCCESS, validLesson),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(Arrays.asList(validLesson), modelStub.lessonsAdded);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_incorrectModel_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModelStub modelStub \u003d new QuizModelStub();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson validLesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        AddLessonCommand addLessonCommand \u003d new AddLessonCommand(validLesson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_EXPECTED_MGT_MODEL);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        addLessonCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lessonDefault \u003d new LessonBuilder(TypicalLessons.LESSON_DEFAULT).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lessonTrueFalse \u003d new LessonBuilder(TypicalLessons.LESSON_TRUE_FALSE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        AddLessonCommand addLessonDefCommand \u003d new AddLessonCommand(lessonDefault);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        AddLessonCommand addLessonPropCommand \u003d new AddLessonCommand(lessonTrueFalse);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(addLessonDefCommand, addLessonDefCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        AddLessonCommand addLessonDefCommandCopy \u003d new AddLessonCommand(lessonDefault);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(addLessonDefCommand, addLessonDefCommandCopy);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(addLessonDefCommand, 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(addLessonDefCommand, null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different lesson -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(addLessonDefCommand, addLessonPropCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class ManagementModelStub implements ManagementModel {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Gets the lesson by index."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public Lesson getLesson(int index) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Gets the entire list of lessons."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Adds the lesson."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Updates the lesson at the given index."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void setLesson(int index, Lesson updatedLesson) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Removes the lesson at the given index from memory, and deletes its corresponding file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * @param index w"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void deleteLesson(int index) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A Model stub that always accept the lesson being added."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class ManagementModelStubAcceptingLesson extends ManagementModelStub {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public final ArrayList\u003cLesson\u003e lessonsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            requireNonNull(lesson);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            lessonsAdded.add(lesson);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class QuizModelStub implements QuizModel {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * This method should not be called."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cQuizCard\u003e generateSession() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * This method should not be called."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public Quiz.Mode getMode() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * This method should not be called."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public int getCount() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * This method should not be called."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public String getName() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Sets the {@code Quiz} information."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void init(Quiz quiz) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "         * Sets the {@code Quiz} and {@code Session} information."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        public void initWithSession(Quiz quiz, Session session) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns if there is still card left in {@code Quiz}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean hasCardLeft() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns the next card in line for {@code Quiz}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public QuizCard getNextCard() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public String getCurrentProgress() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns the current QuizCard in {@code Quiz}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public QuizCard getCurrentQuizCard() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Update the totalAttempts and streak of a specified card in the current session."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * @param index of the current {@code QuizCard}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * @param answer user input"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public boolean updateTotalAttemptsAndStreak(int index, String answer) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public int getQuizTotalAttempts() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public int getQuizTotalCorrectQuestions() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public boolean isQuizDone() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns if User is done with {@code Quiz}."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isDone() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns data needed by {@code Session} when {@code Quiz} end."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cList\u003cInteger\u003e\u003e end() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 23,
      "lallanachang": 8,
      "DigiPie": 252
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(commandResult \u003d\u003d null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 9,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * - the {@code actualManagementModel} matches {@code expectedManagementModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static void assertCommandSuccess(Command command, ManagementModel actualManagementModel,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                                            CommandHistory actualCommandHistory, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                                            ManagementModel expectedManagementModel) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            CommandResult result \u003d command.execute(actualManagementModel, actualCommandHistory);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            assertEquals(expectedManagementModel, actualManagementModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, ManagementModel, CommandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * CommandResult, ManagementModel)}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static void assertCommandSuccess(Command command, ManagementModel actualManagementModel,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                                            CommandHistory actualCommandHistory, String expectedMessage,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                                            ManagementModel expectedManagementModel) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(command, actualManagementModel, actualCommandHistory, expectedCommandResult,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedManagementModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 31,
      "DigiPie": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/DeleteLessonCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.exceptions.CommandException.MESSAGE_EXPECTED_MGT_MODEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.Lessons.EXCEPTION_INVALID_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.LESSON_DEFAULT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.Lessons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizCard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class DeleteLessonCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Attempts to delete a non-existent lesson"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_lessonDeletedByModel_deleteUnsuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubAcceptingAddDelete modelStub \u003d new MgtModelStubAcceptingAddDelete();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new DeleteLessonCommand(toDeleteIndex).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_lessonDeletedByModel_deleteSuccessful() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubAcceptingAddDelete modelStub \u003d new MgtModelStubAcceptingAddDelete();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelStub.addLesson(LESSON_DEFAULT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new DeleteLessonCommand(toDeleteIndex).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(String.format(DeleteLessonCommand.MESSAGE_SUCCESS + LESSON_DEFAULT.getName(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                toDeleteIndex.getZeroBased()), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_incorrectModel_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModelStub modelStub \u003d new QuizModelStub();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        DeleteLessonCommand addLessonCommand \u003d new DeleteLessonCommand(toDeleteIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_EXPECTED_MGT_MODEL);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        addLessonCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex1 \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex2 \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        DeleteLessonCommand deleteLessonCommand1 \u003d new DeleteLessonCommand(toDeleteIndex1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        DeleteLessonCommand deleteLessonCommand2 \u003d new DeleteLessonCommand(toDeleteIndex2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(deleteLessonCommand1, deleteLessonCommand1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        DeleteLessonCommand deleteLessonCommandCopy \u003d new DeleteLessonCommand(toDeleteIndex1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(deleteLessonCommand1, deleteLessonCommandCopy);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(deleteLessonCommand1, 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(deleteLessonCommand1, null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different lesson -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(deleteLessonCommand1, deleteLessonCommand2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class ManagementModelStub implements ManagementModel {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Gets the lesson by index."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public Lesson getLesson(int index) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Gets the entire list of lessons."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Adds the lesson."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Updates the lesson at the given index."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void setLesson(int index, Lesson updatedLesson) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Removes the lesson at the given index from memory, and deletes its corresponding file."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * @param index w"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void deleteLesson(int index) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A Model stub that always accept the lesson being added."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStubAcceptingAddDelete extends ManagementModelStub {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        private final Lessons lessons \u003d new Lessons();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            requireNonNull(lesson);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            lessons.addLesson(lesson);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Gets the entire list of lessons."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public Lesson getLesson(int index) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                return lessons.getLesson(index);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Gets the entire list of lessons."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return lessons.getLessons();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void deleteLesson(int index) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            lessons.deleteLesson(index);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class QuizModelStub implements QuizModel {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "         * This method should not be called."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        public List\u003cQuizCard\u003e generateSession() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "         * This method should not be called."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        public Quiz.Mode getMode() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "         * This method should not be called."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        public int getCount() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "         * This method should not be called."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        public String getName() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Sets the {@code Quiz} information."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void init(Quiz quiz) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "         * Sets the {@code Quiz} and {@code Session} information."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        public void initWithSession(Quiz quiz, Session session) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns if there is still card left in {@code Quiz}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean hasCardLeft() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns the next card in line for {@code Quiz}."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public QuizCard getNextCard() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public String getCurrentProgress() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns the current QuizCard in {@code Quiz}."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public QuizCard getCurrentQuizCard() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Update the totalAttempts and streak of a specified card in the current session."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * @param index of the current {@code QuizCard}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * @param answer user input"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public boolean updateTotalAttemptsAndStreak(int index, String answer) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public int getQuizTotalAttempts() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public int getQuizTotalCorrectQuestions() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public boolean isQuizDone() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns if User is done with {@code Quiz}."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isDone() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns data needed by {@code Session} when {@code Quiz} end."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cList\u003cInteger\u003e\u003e end() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 23,
      "lallanachang": 36,
      "DigiPie": 253
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.management.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModel managementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModel expectedManagementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), managementModel, commandHistory,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedCommandResult, expectedManagementModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 4,
      "-": 13,
      "DigiPie": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.management.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.HelpCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModel managementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModel expectedManagementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS, false, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), managementModel, commandHistory,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedCommandResult, expectedManagementModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 4,
      "-": 13,
      "DigiPie": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.management.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModel managementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModel expectedManagementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), managementModel, history,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                HistoryCommand.MESSAGE_NO_HISTORY, expectedManagementModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), managementModel, history,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedManagementModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), managementModel, history, expectedMessage, expectedManagementModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "-": 25,
      "DigiPie": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/ListLessonsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.exceptions.CommandException.MESSAGE_EXPECTED_MGT_MODEL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.management.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ListLessonsCommand.MESSAGE_DELIMITER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ListLessonsCommand.MESSAGE_NO_LESSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ListLessonsCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizCard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.TypicalLessons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Contains tests for ListCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ListLessonsCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_listNoLessons() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel modelStub \u003d new ManagementModelStubWithNoLessons();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new ListLessonsCommand(), modelStub, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                MESSAGE_SUCCESS + MESSAGE_DELIMITER + MESSAGE_NO_LESSONS, modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_listLessons() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel modelStub \u003d new ManagementModelStubWithLessons();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ListLessonsCommand listLessonsCommand \u003d new ListLessonsCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String expectedOutput \u003d listLessonsCommand.buildList(TypicalLessons.getTypicalLessons());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new ListLessonsCommand(), modelStub, commandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedOutput, modelStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_incorrectModel_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModelStub modelStub \u003d new QuizModelStub();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ListLessonsCommand listLessonsCommand \u003d new ListLessonsCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_EXPECTED_MGT_MODEL);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        listLessonsCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class ManagementModelStub implements ManagementModel {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Gets the lesson by index."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public Lesson getLesson(int index) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Gets the entire list of lessons."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Adds the lesson."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Updates the lesson at the given index."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void setLesson(int index, Lesson updatedLesson) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Removes the lesson at the given index from memory, and deletes its corresponding file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * @param index w"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void deleteLesson(int index) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class ManagementModelStubWithNoLessons extends ManagementModelStub {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class ManagementModelStubWithLessons extends ManagementModelStub {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return TypicalLessons.getTypicalLessons();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class QuizModelStub implements QuizModel {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * This method should not be called."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cQuizCard\u003e generateSession() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * This method should not be called."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public Quiz.Mode getMode() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * This method should not be called."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public int getCount() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * This method should not be called."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public String getName() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Sets the {@code Quiz} information."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void init(Quiz quiz) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "         * Sets the {@code Quiz} and {@code Session} information."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        public void initWithSession(Quiz quiz, Session session) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns if there is still card left in {@code Quiz}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean hasCardLeft() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns the next card in line for {@code Quiz}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public QuizCard getNextCard() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public String getCurrentProgress() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns the current QuizCard in {@code Quiz}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public QuizCard getCurrentQuizCard() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Update the totalAttempts and streak of a specified card in the current session."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * @param index of the current {@code QuizCard}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * @param answer user input"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public boolean updateTotalAttemptsAndStreak(int index, String answer) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public int getQuizTotalAttempts() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public int getQuizTotalCorrectQuestions() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public boolean isQuizDone() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns if User is done with {@code Quiz}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isDone() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns data needed by {@code Session} when {@code Quiz} end."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cList\u003cInteger\u003e\u003e end() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 23,
      "lallanachang": 8,
      "DigiPie": 225
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/quiz/QuizAnswerCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizAnswerCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final QuizCard QUIZCARD_1 \u003d new QuizCard(\"Japan\", \"Tokyo\", Arrays.asList(\"JP\", \"Asia\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final QuizCard QUIZCARD_2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final List\u003cQuizCard\u003e VALID_QUIZCARD \u003d Arrays.asList(QUIZCARD_1, QUIZCARD_2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final Quiz QUIZ \u003d new Quiz(VALID_QUIZCARD, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void constructor_nullAnswer_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        new QuizAnswerCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_wrongModel_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Model model \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizAnswerCommand(\"someanswer\").execute(model, commandHistory));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_validLearn_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String answer \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card1 \u003d new QuizCard(\"Japan\", \"Tokyo\", Arrays.asList(\"JP\", \"Asia\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final Quiz quiz \u003d new Quiz(quizCards, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelManager expectedModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quiz);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModel actual \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actual.init(QUIZ);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actual.getNextCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizAnswerCommand quizAnswerCommand \u003d new QuizAnswerCommand(answer);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard card \u003d expectedModel.getNextCard();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        card.isCorrect(answer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expectedMessage \u003d String.format(QuizAnswerCommand.MESSAGE_QUESTION_ANSWER, card.getQuestion(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            card.getAnswer());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCommandTestUtil.assertCommandSuccess(quizAnswerCommand, actual, commandHistory,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_validPreview_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String answer \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card1 \u003d new QuizCard(\"Japan\", \"Tokyo\", Arrays.asList(\"JP\", \"Asia\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final Quiz quiz \u003d new Quiz(quizCards, Quiz.Mode.PREVIEW);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelManager expectedModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quiz);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModel actual \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actual.init(new Quiz(quizCards, Quiz.Mode.PREVIEW));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actual.getNextCard();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizAnswerCommand quizAnswerCommand \u003d new QuizAnswerCommand(answer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard card \u003d expectedModel.getNextCard();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        card.isCorrect(answer);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expectedMessage \u003d String.format(QuizAnswerCommand.MESSAGE_QUESTION_ANSWER, card.getQuestion(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            card.getAnswer());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCommandTestUtil.assertCommandSuccess(quizAnswerCommand, actual, commandHistory,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // complete preview quiz"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizAnswerCommand \u003d new QuizAnswerCommand(\"Budapest\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.end();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedMessage \u003d QuizAnswerCommand.MESSAGE_COMPLETE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCommandTestUtil.assertCommandSuccess(quizAnswerCommand, actual, commandHistory,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_validReview_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String answer \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card1 \u003d new QuizCard(\"Japan\", \"Tokyo\", Arrays.asList(\"JP\", \"Asia\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final Quiz quiz \u003d new Quiz(quizCards, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelManager expectedModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quiz);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModel actual \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actual.init(new Quiz(quizCards, Quiz.Mode.LEARN));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actual.getNextCard();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actual.getNextCard();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizAnswerCommand quizAnswerCommand \u003d new QuizAnswerCommand(answer);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard card \u003d expectedModel.getNextCard();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        card.isCorrect(answer);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expectedMessage \u003d String.format(QuizAnswerCommand.MESSAGE_QUESTION, card.getQuestion());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCommandTestUtil.assertCommandSuccess(quizAnswerCommand, actual, commandHistory,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_correctAndWrongAnswer_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String correctAns \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String wrongAns \u003d \"wronganswer\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card1 \u003d new QuizCard(\"Japan\", \"Tokyo\", Arrays.asList(\"JP\", \"Asia\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final Quiz quiz \u003d new Quiz(quizCards, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // correct"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelManager expectedModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quiz);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModel actual \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actual.init(new Quiz(quizCards, Quiz.Mode.LEARN));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actual.getNextCard();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actual.getNextCard();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actual.getNextCard();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizAnswerCommand quizAnswerCommand \u003d new QuizAnswerCommand(correctAns);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard card \u003d expectedModel.getNextCard();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        card.isCorrect(correctAns);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expectedMessage \u003d QuizAnswerCommand.MESSAGE_CORRECT"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            + String.format(QuizAnswerCommand.MESSAGE_QUESTION, card.getQuestion());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCommandTestUtil.assertCommandSuccess(quizAnswerCommand, actual, commandHistory,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // wrong"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizAnswerCommand \u003d new QuizAnswerCommand(wrongAns);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actual.getNextCard();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        card \u003d expectedModel.getNextCard();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        card.isCorrect(wrongAns);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedMessage \u003d QuizAnswerCommand.MESSAGE_WRONG_ONCE"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            + String.format(QuizAnswerCommand.MESSAGE_QUESTION, card.getQuestion());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCommandTestUtil.assertCommandSuccess(quizAnswerCommand, actual, commandHistory,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // wrong twice"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedMessage \u003d String.format(QuizAnswerCommand.MESSAGE_WRONG, card.getAnswer())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            + String.format(QuizAnswerCommand.MESSAGE_QUESTION, card.getQuestion());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCommandTestUtil.assertCommandSuccess(quizAnswerCommand, actual, commandHistory,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // complete the quiz"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizAnswerCommand \u003d new QuizAnswerCommand(\"Hungary\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actual.getNextCard();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        card \u003d expectedModel.getNextCard();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        card.isCorrect(wrongAns);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.end();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedMessage \u003d QuizAnswerCommand.MESSAGE_CORRECT + QuizAnswerCommand.MESSAGE_COMPLETE;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCommandTestUtil.assertCommandSuccess(quizAnswerCommand, actual, commandHistory,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizAnswerCommand quizAnswerCommand \u003d new QuizAnswerCommand(\"Tokyo\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizAnswerCommand quizAnswerCommandDiff \u003d new QuizAnswerCommand(\"Something\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quizAnswerCommand.equals(quizAnswerCommand));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizAnswerCommand quizAnswerCommandCopy \u003d new QuizAnswerCommand(\"Tokyo\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quizAnswerCommand.equals(quizAnswerCommandCopy));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(quizAnswerCommand.equals(quizAnswerCommandDiff));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(quizAnswerCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // differnt type -\u003e returns false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(quizAnswerCommand.equals(5));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 215,
      "DigiPie": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/quiz/QuizCommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizCommandTestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static void assertCommandSuccess(Command command, QuizModel actualModel,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                                            CommandHistory actualCommandHistory, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                                            QuizModel expectedModel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, QuizModel, CommandHistory,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * CommandResult, QuizModel)}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static void assertCommandSuccess(Command command, QuizModel actualModel,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                                            CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                                            String expectedMessage, QuizModel expectedModel) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 40,
      "DigiPie": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/quiz/QuizHelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizHelpCommand.MESSAGE_QUIZ_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizHelpCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel model \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel expectedModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card1 \u003d new QuizCard(\"Japan\", \"Tokyo\", Arrays.asList(\"JP\", \"Asia\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final Quiz quiz \u003d new Quiz(quizCards, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        model.init(quiz);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quiz);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_QUIZ_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(new QuizHelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 35,
      "DigiPie": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/quiz/QuizStartCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.SrsCardBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class QuizStartCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void constructor_throwsNullPointerException () {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new QuizStartCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    //TODO: after obtaining data from model manager of lesson and user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_success() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel managementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Session session \u003d new SessionBuilder().build_without_srsCards();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d new QuizStartCommand(session).execute(managementModel, commandHistory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(QuizStartCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void executeActual_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final Session session \u003d new SessionBuilder(new Session(\"01-01-Learn\", 2,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                Quiz.Mode.LEARN, List.of(new SrsCardBuilder().build(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCardBuilder(new SrsCard(CARD_JAPAN, new CardSrsData(CARD_JAPAN.hashCode(), 1,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        1, Instant.now().plus(Duration.ofHours(2))), lesson)).build()))).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final QuizCard card1 \u003d new QuizCard(\"Belgium\", \"Brussels\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Japan\", \"Tokyo\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final Quiz quiz \u003d new Quiz(quizCards, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        QuizModelManager expectedModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expectedModel.init(quiz);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CommandResult expectedCommandResult \u003d new QuizStartCommand(session).executeActual(expectedModel,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        QuizModel actualModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        QuizStartCommand quizStartCommand \u003d new QuizStartCommand(session);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(commandHistory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CommandResult result \u003d quizStartCommand.executeActual(actualModel, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expectedCommandHistory, commandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /*final QuizCard card1 \u003d new QuizCard(\"Japan\", \"Tokyo\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card3 \u003d new QuizCard(\"Christmas Island\", \"The Settlement\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card4 \u003d new QuizCard(\"中国\", \"北京\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2, card3, card4));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final Quiz quiz \u003d new Quiz(quizCards, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelManager expectedModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quiz);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult expectedCommandResult \u003d new QuizStartCommand().executeActual(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModel actualModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizStartCommand quizStartCommand \u003d new QuizStartCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(commandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult result \u003d quizStartCommand.executeActual(actualModel, commandHistory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(expectedCommandHistory, commandHistory);*/"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 32,
      "lallanachang": 48,
      "DigiPie": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/quiz/QuizStatusCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizStatusCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel model \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel expectedModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card1 \u003d new QuizCard(\"Japan\", \"Tokyo\", Arrays.asList(\"JP\", \"Asia\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final Quiz quiz \u003d new Quiz(quizCards, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        model.init(quiz);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quiz);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_wrongModel_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Model model \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizStatusCommand().execute(model, commandHistory));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_status_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        model.getNextCard();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expected \u003d String.format(QuizStatusCommand.MESSAGE_RESULT, model.getQuizTotalAttempts(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            model.getQuizTotalCorrectQuestions(), model.getCurrentProgress());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(new QuizStatusCommand(), model, commandHistory, expected, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddLessonParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.management.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.management.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_LESSON_CORE_HEADER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_LESSON_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_LESSON_OPT_HEADER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.LessonBuilder.DEFAULT_CORE_HEADER_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.LessonBuilder.DEFAULT_CORE_HEADER_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.LessonBuilder.DEFAULT_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.LessonBuilder.DEFAULT_OPT_HEADER_1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.LESSON_DEFAULT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.AddLessonCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class AddLessonParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String LESSON_NAME \u003d \" \" + PREFIX_LESSON_NAME + DEFAULT_NAME;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String LESSON_NAME_OTHER \u003d \" \" + PREFIX_LESSON_NAME + \"Trivia\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String LESSON_CORE_1 \u003d \" \" + PREFIX_LESSON_CORE_HEADER + DEFAULT_CORE_HEADER_1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String LESSON_CORE_2 \u003d \" \" + PREFIX_LESSON_CORE_HEADER + DEFAULT_CORE_HEADER_2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String LESSON_OPT_1 \u003d \" \" + PREFIX_LESSON_OPT_HEADER + DEFAULT_OPT_HEADER_1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private AddLessonParser addLessonParser \u003d new AddLessonParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson expectedLesson \u003d new LessonBuilder(LESSON_DEFAULT).withNoCards().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseSuccess(addLessonParser, PREAMBLE_WHITESPACE + LESSON_NAME"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + LESSON_CORE_1 + LESSON_CORE_2 + LESSON_OPT_1, new AddLessonCommand(expectedLesson));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseSuccess(addLessonParser, LESSON_NAME_OTHER + LESSON_NAME"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + LESSON_CORE_1 + LESSON_CORE_2 + LESSON_OPT_1, new AddLessonCommand(expectedLesson));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // zero optionals"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson expectedLesson \u003d new LessonBuilder(LESSON_DEFAULT).withNoOptionalHeaders().withNoCards().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseSuccess(addLessonParser, LESSON_NAME + LESSON_CORE_1 + LESSON_CORE_2,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new AddLessonCommand(expectedLesson));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, DEFAULT_NAME + LESSON_CORE_1 + LESSON_CORE_2,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // missing 1 core prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, LESSON_NAME + DEFAULT_CORE_HEADER_1 + LESSON_CORE_2,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, LESSON_NAME + LESSON_CORE_1 + DEFAULT_CORE_HEADER_2,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // missing 2 core prefixes"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, LESSON_NAME + DEFAULT_CORE_HEADER_1 + DEFAULT_CORE_HEADER_2,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, DEFAULT_NAME + DEFAULT_CORE_HEADER_1 + DEFAULT_CORE_HEADER_2,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, PREAMBLE_NON_EMPTY + LESSON_NAME_OTHER + LESSON_NAME"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        + LESSON_CORE_1 + LESSON_CORE_2,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // missing name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, PREFIX_LESSON_NAME"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        + LESSON_CORE_1 + LESSON_CORE_2,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // empty core string specified"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, LESSON_NAME"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        + PREFIX_LESSON_CORE_HEADER + LESSON_CORE_2,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, LESSON_NAME"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        + LESSON_CORE_1 + PREFIX_LESSON_CORE_HEADER,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "DigiPie": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteLessonParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalIndices.INDEX_FIRST_LESSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.DeleteLessonCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class DeleteLessonParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private DeleteLessonParser parser \u003d new DeleteLessonParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseSuccess(parser, \"\" + INDEX_FIRST_LESSON.getOneBased(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new DeleteLessonCommand(INDEX_FIRST_LESSON));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ManagementModeParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.HistoryCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ManagementModeParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final ManagementModeParser parser \u003d new ManagementModeParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            parser.parse(\"histories\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //        assertTrue(parser.parse(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //        assertTrue(parser.parse(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //        assertTrue(parser.parse(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //        assertTrue(parser.parse(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseCommand_start() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(QuizStartCommand.COMMAND_WORD) instanceof QuizStartCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        parser.parse(\"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        parser.parse(\"unknownCommand\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 54,
      "DigiPie": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalIndices.INDEX_FIRST_LESSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalIndices.INDEX_SECOND_LESSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(INDEX_FIRST_LESSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(INDEX_SECOND_LESSON, ParserUtil.parseIndex(\"  2  \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void parserUtil() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final String name \u003d \"01-01-learn\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final String count \u003d \"1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final String mode \u003d \"learn\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        ParserUtil parserUtil \u003d new ParserUtil();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        String expectedName \u003d parserUtil.parseName(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expectedName, name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        int expectedCount \u003d parserUtil.parseCount(count);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expectedCount, 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Quiz.Mode expectedMode \u003d parserUtil.parseMode(mode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expectedMode, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 12,
      "-": 38,
      "DigiPie": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/QuizModeParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizAnswerCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizHelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizStatusCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Parse user input in QuizMode"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizModeParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final QuizModeParser parser \u003d new QuizModeParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseAnswer() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(\"some answer\") instanceof QuizAnswerCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(\"someanswer\") instanceof QuizAnswerCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseCommand() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(\"\\\\help\") instanceof QuizHelpCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(QuizHelpCommand.COMMAND_WORD) instanceof QuizHelpCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(\"\\\\status\") instanceof QuizStatusCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(QuizStatusCommand.COMMAND_WORD) instanceof QuizStatusCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parse_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, QuizHelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        parser.parse(\"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parse_onlyWhitespace_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, QuizHelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        parser.parse(\"   \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parse_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        parser.parse(\"\\\\unknownCommand\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 3,
      "halcyoneee": 56,
      "DigiPie": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/StartCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static java.lang.String.format;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizStartCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "//import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "//import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class StartCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private StartCommandParser parser \u003d new StartCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertParseFailure(parser, \"     \", format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                QuizStartCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void parseArguments() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        QuizStartCommand expected \u003d new QuizStartCommand(new Session(\"02-03-LEARN\", 15,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                Quiz.Mode.LEARN));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertParseSuccess(parser, \"02-03-LEARN 15 LEARN\", expected);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertParseSuccess(parser, \" \\n 02-03-LEARN \\n \\t 15  \\t LEARN\", expected);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/LessonsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class LessonsTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Lessons lessons \u003d new Lessons();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private void addTestLesson() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.addLesson(getTestLesson());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Lesson getTestLesson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        ArrayList\u003cString\u003e testFields \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        testFields.add(\"test 1\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        testFields.add(\"test 2\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lesson lesson \u003d new Lesson(\"test\", 2, testFields);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lesson;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void getLessons_lessonsNotNull_getsLessonsList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNotNull(lessons.getLessons());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void getLesson_indexOutOfBounds_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.getLesson(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.getLesson(-1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.getLesson(999);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void getLesson_validLesson_getsLesson() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        addTestLesson();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(getTestLesson(), lessons.getLesson(0));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void addLesson_validLesson_addsLesson() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        addTestLesson();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(1, lessons.getLessons().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void addLesson_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.addLesson(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLesson_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        addTestLesson();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.setLesson(0, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLesson_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.setLesson(0, getTestLesson());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setLesson_validData_updatesLesson() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        addTestLesson();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lesson newLesson \u003d getTestLesson();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        newLesson.addCard(Arrays.asList(\"test1\", \"test2\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNotEquals(newLesson, getTestLesson());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.setLesson(0, newLesson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(newLesson, lessons.getLesson(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteLesson_invalidIndex_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.deleteLesson(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.deleteLesson(-1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.deleteLesson(1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void deleteLesson_validIndex_deletesLesson() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        addTestLesson();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(1, lessons.getLessons().size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(getTestLesson(), lessons.getLesson(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.deleteLesson(0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(0, lessons.getLessons().size());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.getLesson(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons diffLessons \u003d new Lessons();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        diffLessons.addLesson(getTestLesson());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(lessons, lessons);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNotEquals(lessons, diffLessons);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNotEquals(lessons, new Object());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons diffLessonsCopy \u003d new Lessons();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (Lesson l : diffLessons.getLessons()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            diffLessonsCopy.addLesson(l);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(diffLessons, diffLessonsCopy);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 114,
      "DigiPie": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private final UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        UserPrefs userPrefDiff \u003d new UserPrefs(userPref);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        UserPrefs userPrefsCopy \u003d new UserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(userPrefs.equals(userPrefsCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(userPrefs.equals(userPrefs));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(userPrefs \u003d\u003d null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(userPrefs.equals(5));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        userPrefDiff.setLessonsFolderPath(Paths.get(\"test_different\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(userPref.equals(userPrefDiff));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        UserPrefs userPrefsCopy \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        userPrefsCopy.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        UserPrefs userPrefsDiff \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        userPrefsDiff.setGuiSettings(new GuiSettings(1, 2, 3, 5));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(userPrefs.hashCode(), userPrefsDiff.hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonImportExportFilePath_nullLessonImportExportFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setLessonImportExportFilePath(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonsFolderPath_nullLessonsFolderPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setLessonsFolderPath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 13,
      "halcyoneee": 38,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/CardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_BELGIUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN_CORE1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN_CORE2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN_OPT1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Tests the {@code Card} object (100% coverage)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class CardTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void createCards() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card newCard \u003d new Card(CARD_BELGIUM.getCores());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card anotherCard \u003d new Card(CARD_BELGIUM.getCores(), CARD_BELGIUM.getOptionals());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newCard.getCores(), anotherCard.getCores());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(newCard, anotherCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Different type of object -\u003e return false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(CARD_BELGIUM.equals(new Object()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(CARD_BELGIUM.equals(CARD_BELGIUM));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Different object -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(CARD_BELGIUM.equals(CARD_JAPAN));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Same cores and optionals -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card belgiumCopy \u003d new CardBuilder(CARD_BELGIUM).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(CARD_BELGIUM.equals(belgiumCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Same cores with modified optionals -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card modifiedCopy \u003d new CardBuilder(CARD_JAPAN).withOptionals(\"Same characters as Kyoto\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(CARD_JAPAN.equals(modifiedCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Modify existing card to have same cores and optionals as another card -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modifiedCopy \u003d new CardBuilder(CARD_BELGIUM)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .withCores(CARD_JAPAN_CORE1, CARD_JAPAN_CORE2)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .withOptionals(CARD_JAPAN_OPT1).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(CARD_JAPAN.equals(modifiedCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Same cores and optionals but different order for cores -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modifiedCopy \u003d new CardBuilder(CARD_JAPAN).withCores(CARD_JAPAN_CORE2, CARD_JAPAN_CORE1).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(CARD_JAPAN.equals(modifiedCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setAndGetCoresAndOptionals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card belgiumCopy \u003d new CardBuilder(CARD_BELGIUM).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card japanCopy \u003d new CardBuilder(CARD_JAPAN).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // These two cards have different cores and optionals and should not be equal."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(belgiumCopy, japanCopy);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        belgiumCopy.setCores(japanCopy.getCores());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Despite having the same cores, the two cards still have different optionals."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(belgiumCopy, japanCopy);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        belgiumCopy.setOptionals(japanCopy.getOptionals());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Both cards have the same cores and optionals, and should be treated as equivalents."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(belgiumCopy, japanCopy);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setAndGetCoreAndOptional() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card belgiumCopy \u003d new CardBuilder(CARD_BELGIUM).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card japanCopy \u003d new CardBuilder(CARD_JAPAN).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(belgiumCopy, japanCopy);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        belgiumCopy.setCore(0, japanCopy.getCore(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(belgiumCopy.getCore(0), japanCopy.getCore(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        belgiumCopy.setOptional(0, japanCopy.getOptional(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(belgiumCopy.getOptional(0), japanCopy.getOptional(0));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void cardToString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card belgiumCopy \u003d new CardBuilder(CARD_BELGIUM).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card newCard \u003d new Card(belgiumCopy.getCores(), belgiumCopy.getOptionals());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // newCard should be a copy of belgiumCopy"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(belgiumCopy, newCard);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // since both cards are identical, their string representation should be the same"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(belgiumCopy.toString(), newCard.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 7,
      "halcyoneee": 5,
      "DigiPie": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/LessonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_DOG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_DOG_CORE1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_DOG_CORE2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN_CORE1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN_CORE2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN_OPT1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_MULTI;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.LESSON_DEFAULT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.LESSON_TRUE_FALSE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class LessonTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new LessonBuilder(LESSON_DEFAULT).withName(\"\").build());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new LessonBuilder(LESSON_DEFAULT).withName(null).build());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void constructor_invalidCoreCount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new LessonBuilder(LESSON_DEFAULT).withCoreHeaders(\"City\").build());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void constructor_invalidFields_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new Lesson(LESSON_DEFAULT.getName(), 1,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        List.of(\"City\", \"Capital\", \"Country Code\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void createLessons() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        headers.addAll(LESSON_DEFAULT.getCoreHeaders());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int noOfCoreHeaders \u003d headers.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        headers.addAll(LESSON_DEFAULT.getOptionalHeaders());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d new Lesson(LESSON_DEFAULT.getName(), noOfCoreHeaders, headers);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.getName(), LESSON_DEFAULT.getName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.getCoreHeaderSize(), noOfCoreHeaders);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Different type of object -\u003e return false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(LESSON_DEFAULT.equals(new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(LESSON_DEFAULT.equals(LESSON_DEFAULT));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Different object -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(LESSON_DEFAULT.equals(LESSON_TRUE_FALSE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Same cores and optionals -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d new LessonBuilder(LESSON_DEFAULT).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.setName(\"Different name\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(LESSON_DEFAULT.equals(newLesson)); // Should be considered equivalent"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setQuestionAnswerIndices() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d new LessonBuilder(LESSON_DEFAULT).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.setQuestionAnswerIndices(0, 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setQuestionAnswerIndices(-1, 1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setQuestionAnswerIndices(2, 1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setQuestionAnswerIndices(0, -1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setQuestionAnswerIndices(0, 2));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.setAnswerCoreIndex(0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setQuestionCoreIndex(-1));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setQuestionCoreIndex(2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.setAnswerCoreIndex(1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setAnswerCoreIndex(-1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setAnswerCoreIndex(2));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setAndGetIsVisibleOptionals() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(LESSON_DEFAULT.getCoreHeaderSize(), LessonBuilder.DEFAULT_CORE_HEADERS.size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d new LessonBuilder(LESSON_DEFAULT).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        boolean[] isVisibleOptionals \u003d newLesson.getIsVisibleOptionals();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.getIsVisibleOptionals(), isVisibleOptionals);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        boolean isFirstOptionalShown \u003d newLesson.getIsVisibleOptional(0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Not shown by default"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(false, isFirstOptionalShown);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setIsVisibleOptional(-1, true));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.setIsVisibleOptional(0, true);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        isFirstOptionalShown \u003d newLesson.getIsVisibleOptional(0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(true, isFirstOptionalShown);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCards() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d new LessonBuilder(LESSON_DEFAULT)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .withCards(new CardBuilder().build(), new CardBuilder(CARD_DOG).build())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                LESSON_DEFAULT.addCard(CARD_MULTI));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                LESSON_DEFAULT.addCard(CARD_EMPTY));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.addCard(List.of(CARD_JAPAN_CORE1, CARD_JAPAN_CORE2, CARD_JAPAN_OPT1));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson \u003d new LessonBuilder(LESSON_TRUE_FALSE).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.addCard(List.of(CARD_DOG_CORE1, CARD_DOG_CORE2));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void cardGetters() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d new Lesson(\"Sample lesson\", LESSON_DEFAULT.getCoreHeaders(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                LESSON_DEFAULT.getOptionalHeaders());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Should not have cards yet"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.hasCards(), false);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.getCardCount(), 0);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.addCard(CARD_JAPAN);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Should now have 1 card"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.hasCards(), true);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.getCardCount(), 1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.getCards(), List.of(CARD_JAPAN));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void cardToString() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d new LessonBuilder(LESSON_DEFAULT).build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // since both lessons are identical, their string representation should be the same"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.toString(), LESSON_DEFAULT.toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 45,
      "halcyoneee": 3,
      "DigiPie": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/model/modelmanager/management/ManagementModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.model.modelmanager.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.Lessons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ManagementModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModelManager modelManager \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private void addTestLesson() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.addLesson(getTestLesson());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Lesson getTestLesson() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        ArrayList\u003cString\u003e testFields \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        testFields.add(\"test 1\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        testFields.add(\"test 2\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lesson lesson \u003d new Lesson(\"test\", 2, testFields);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lesson;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(new Lessons().getLessons(), modelManager.getLessons());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void getLessons_lessonsNotNull_getsLessonsList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNotNull(modelManager.getLessons());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void getLesson_indexOutOfBounds_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.getLesson(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.getLesson(-1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.getLesson(999);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void getLesson_validLesson_getsLesson() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        addTestLesson();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Assert.assertEquals(getTestLesson(), modelManager.getLesson(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void addLesson_validLesson_addsLesson() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        addTestLesson();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(1, modelManager.getLessons().size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void addLesson_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.addLesson(null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLesson_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        addTestLesson();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.setLesson(0, null);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLesson_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.setLesson(0, getTestLesson());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setLesson_validData_updatesLesson() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        addTestLesson();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lesson newLesson \u003d getTestLesson();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        newLesson.addCard(Arrays.asList(\"test1\", \"test2\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNotEquals(newLesson, getTestLesson());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.setLesson(0, newLesson);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson, modelManager.getLesson(0));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteLesson_invalidIndex_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.deleteLesson(0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.deleteLesson(-1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.deleteLesson(1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void deleteLesson_validIndex_deletesLesson() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        addTestLesson();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(1, modelManager.getLessons().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(getTestLesson(), modelManager.getLesson(0));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.deleteLesson(0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(0, modelManager.getLessons().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.getLesson(0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons lessons \u003d new Lessons();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager \u003d new ManagementModelManager(userPrefs, lessons);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModelManager modelManagerCopy \u003d new ManagementModelManager(userPrefs, lessons);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(modelManager \u003d\u003d null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 87,
      "halcyoneee": 68,
      "DigiPie": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/modelmanager/quiz/QuizCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.model.modelmanager.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizCardTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String QUESTION \u003d \"Japan\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String ANSWER \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final Quiz.Mode MODE \u003d Quiz.Mode.PREVIEW;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final List\u003cString\u003e FIELDS_OPTIONALS \u003d Arrays.asList(\"JP\", \"Asia\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final List\u003cString\u003e FIELDS_OPTIONALS_EMPTY \u003d Arrays.asList(\"\", \"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final QuizCard VALID_QUIZCARD_NO_OPT \u003d new QuizCard(QUESTION, ANSWER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final QuizCard VALID_QUIZCARD \u003d new QuizCard(QUESTION, ANSWER, FIELDS_OPTIONALS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final QuizCard VALID_QUIZCARD_INDEX \u003d new QuizCard(1, QUESTION, ANSWER, Quiz.Mode.PREVIEW);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(null, null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(QUESTION, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(null, null, null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(QUESTION, null, FIELDS_OPTIONALS));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(QUESTION, ANSWER, null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(0, null, null, MODE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(0, QUESTION, null, MODE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void constructor_invalidQuizCard_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String invalidQn \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String invalidAns \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(invalidQn, invalidAns));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(\"     \", ANSWER));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(invalidQn, ANSWER));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(invalidQn, invalidAns, FIELDS_OPTIONALS_EMPTY));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(invalidQn, ANSWER, FIELDS_OPTIONALS_EMPTY));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(\"     \", invalidAns, FIELDS_OPTIONALS_EMPTY));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(QUESTION, invalidAns, FIELDS_OPTIONALS_EMPTY));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(0, invalidQn, invalidAns, MODE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(1, \"     \", ANSWER, MODE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(2, invalidQn, ANSWER, MODE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getQuestion() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(QUESTION, VALID_QUIZCARD.getQuestion());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(QUESTION, VALID_QUIZCARD_NO_OPT.getQuestion());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(QUESTION, VALID_QUIZCARD_INDEX.getQuestion());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getAnswer() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(ANSWER, VALID_QUIZCARD.getAnswer());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(ANSWER, VALID_QUIZCARD_NO_OPT.getAnswer());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(ANSWER, VALID_QUIZCARD_INDEX.getAnswer());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getOpt() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(FIELDS_OPTIONALS, VALID_QUIZCARD.getOpt());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(null, VALID_QUIZCARD_NO_OPT.getOpt());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(null, VALID_QUIZCARD_INDEX.getOpt());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getIndex() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(1, VALID_QUIZCARD_INDEX.getIndex());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getIndex_invalidIndex_throwsAssertionError() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // do not contain actual index."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            VALID_QUIZCARD.getIndex());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getQuizMode_invalidQuizMode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            VALID_QUIZCARD.getQuizMode());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getQuizMode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(MODE, VALID_QUIZCARD_INDEX.getQuizMode());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void isCorrect() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(VALID_QUIZCARD.isCorrect(ANSWER));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(VALID_QUIZCARD.isCorrect(\" not answer\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(VALID_QUIZCARD.isCorrect(\"       \"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            VALID_QUIZCARD.isCorrect(null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void isWrongTwice() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        VALID_QUIZCARD.isCorrect(\"wronganswer\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(VALID_QUIZCARD.isWrongTwice());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        VALID_QUIZCARD.isCorrect(\"wrongansweragain\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(VALID_QUIZCARD.isWrongTwice());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void updateTotalAttemptsAndStreak() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard quizCardWithIndex \u003d VALID_QUIZCARD;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizCardWithIndex.updateTotalAttemptsAndStreak(true);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(1, quizCardWithIndex.getTotalAttempts());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(1, quizCardWithIndex.getStreak());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizCardWithIndex.updateTotalAttemptsAndStreak(true);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(2, quizCardWithIndex.getTotalAttempts());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(2, quizCardWithIndex.getStreak());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizCardWithIndex.updateTotalAttemptsAndStreak(false);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(3, quizCardWithIndex.getTotalAttempts());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(0, quizCardWithIndex.getStreak());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard anotherValidQuizCard \u003d new QuizCard(QUESTION, ANSWER);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard quizCardWithAb \u003d new QuizCard(\"A\", \"B\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard cardWithIndex \u003d new QuizCard(0, QUESTION, ANSWER, MODE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(VALID_QUIZCARD.equals(VALID_QUIZCARD));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same value"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(VALID_QUIZCARD_NO_OPT.equals(anotherValidQuizCard));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different obj"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(VALID_QUIZCARD.equals(new Quiz(Arrays.asList(VALID_QUIZCARD, VALID_QUIZCARD), Quiz.Mode.LEARN)));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different types"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(\"random things\".equals(VALID_QUIZCARD));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different values"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(VALID_QUIZCARD.equals(quizCardWithAb));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same value but contains index"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(VALID_QUIZCARD.equals(cardWithIndex));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard anotherValidQuizCard \u003d new QuizCard(QUESTION, ANSWER);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard quizCardWithAb \u003d new QuizCard(\"A\", \"B\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard cardWithIndex \u003d new QuizCard(0, QUESTION, ANSWER, MODE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same value"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(VALID_QUIZCARD_NO_OPT.hashCode(), anotherValidQuizCard.hashCode());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different values"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(VALID_QUIZCARD.hashCode(), quizCardWithAb.hashCode());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same value but contains index"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(VALID_QUIZCARD.hashCode(), cardWithIndex);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void quizCardToString() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard anotherValidQuizCard \u003d new QuizCard(QUESTION, ANSWER);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard quizCardWithAb \u003d new QuizCard(\"A\", \"B\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(VALID_QUIZCARD_NO_OPT.toString(), anotherValidQuizCard.toString());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(VALID_QUIZCARD_NO_OPT.toString(), quizCardWithAb.toString());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 226
    }
  },
  {
    "path": "src/test/java/seedu/address/model/modelmanager/quiz/QuizManagementModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.model.modelmanager.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class QuizManagementModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final Quiz.Mode MODE \u003d Quiz.Mode.PREVIEW;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private static final QuizCard QUIZCARD_1 \u003d new QuizCard(\"Japan\", \"Tokyo\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            Arrays.asList(\"JP\", \"Asia\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final QuizCard QUIZCARD_2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final List\u003cQuizCard\u003e VALID_QUIZCARD \u003d Arrays.asList(QUIZCARD_1, QUIZCARD_2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final Quiz QUIZ \u003d new Quiz(VALID_QUIZCARD, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModelManager modelManager \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getNextCard_notInitialised_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            modelManager.getNextCard());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void getSessionFields() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Quiz quiz \u003d QUIZ;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Session session \u003d new SessionBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        modelManager.initWithSession(quiz, session);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(\"01-01-Learn\", modelManager.getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(1, modelManager.getCount());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(Quiz.Mode.LEARN, modelManager.getMode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getNextCard() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d QUIZ;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(quiz);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // get first card"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(new QuizCard(0, QUIZCARD_1.getQuestion(), QUIZCARD_1.getAnswer(), MODE),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            modelManager.getNextCard());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // get the rest"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.hasCardLeft());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // no cards left"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(modelManager.hasCardLeft());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getCurrentProgress() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card1 \u003d new QuizCard(\"Japan\", \"Tokyo\", Arrays.asList(\"JP\", \"Asia\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(new Quiz(quizCards, Quiz.Mode.LEARN));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"0/6\", modelManager.getCurrentProgress());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"1/6\", modelManager.getCurrentProgress());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"6/6\", modelManager.getCurrentProgress());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getCurrentQuizCard() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card1 \u003d new QuizCard(\"Japan\", \"Tokyo\", Arrays.asList(\"JP\", \"Asia\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(new Quiz(quizCards, Quiz.Mode.LEARN));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard expected \u003d modelManager.getNextCard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(new QuizCard(0, \"Japan\", \"Tokyo\", MODE), modelManager.getCurrentQuizCard());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, modelManager.getCurrentQuizCard());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void isDone() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.isQuizDone());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(QUIZ);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(modelManager.isQuizDone());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.end();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.isQuizDone());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void end() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card1 \u003d new QuizCard(\"Japan\", \"Tokyo\", Arrays.asList(\"JP\", \"Asia\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final Quiz quiz \u003d new Quiz(quizCards, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(quiz);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.hasCardLeft());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // before doing any question"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cList\u003cInteger\u003e\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected.add(Arrays.asList(0, 0, 0));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected.add(Arrays.asList(1, 0, 0));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, modelManager.end());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // after quiz end still can ask for next card, keeps track of previous entry"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.hasCardLeft());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // preview questions and answer"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // start the actual quiz"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.updateTotalAttemptsAndStreak(0, \"Tokyo\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.updateTotalAttemptsAndStreak(1, \"Budapest\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.updateTotalAttemptsAndStreak(0, \"Japan\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.updateTotalAttemptsAndStreak(1, \"Hungary\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected.add(Arrays.asList(0, 2, 2));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected.add(Arrays.asList(1, 2, 2));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, modelManager.end());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(4, modelManager.getQuizTotalAttempts());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(4, modelManager.getQuizTotalCorrectQuestions());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(VALID_QUIZCARD, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(quiz);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelManager modelManagerCopy \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManagerCopy.init(quiz);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(modelManager \u003d\u003d null);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 161,
      "lallanachang": 14,
      "DigiPie": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/modelmanager/quiz/QuizTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.model.modelmanager.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final QuizCard QUIZCARD_1 \u003d new QuizCard(\"Japan\", \"Tokyo\", Arrays.asList(\"JP\", \"Asia\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final QuizCard QUIZCARD_2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final List\u003cQuizCard\u003e VALID_QUIZCARD \u003d Arrays.asList(QUIZCARD_1, QUIZCARD_2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final int VALID_QUIZCARD_SIZE \u003d VALID_QUIZCARD.size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new Quiz(null, Quiz.Mode.LEARN));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void constructor_invalidQuizCard_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new Quiz(VALID_QUIZCARD, null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new Quiz(Arrays.asList(new QuizCard(\"\", \"\")), Quiz.Mode.LEARN));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void generate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e expectedPreview \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e expectedReview \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e expectedLearn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard expectedCurrentCard;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c VALID_QUIZCARD_SIZE; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedCurrentCard \u003d VALID_QUIZCARD.get(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedPreview.add(new QuizCard(i, expectedCurrentCard.getQuestion(), expectedCurrentCard.getAnswer(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                Quiz.Mode.PREVIEW));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c VALID_QUIZCARD_SIZE; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedCurrentCard \u003d VALID_QUIZCARD.get(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedReview.add(new QuizCard(i, expectedCurrentCard.getQuestion(), expectedCurrentCard.getAnswer(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                Quiz.Mode.REVIEW));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c VALID_QUIZCARD_SIZE; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedCurrentCard \u003d VALID_QUIZCARD.get(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedReview.add(new QuizCard(i, expectedCurrentCard.getAnswer(), expectedCurrentCard.getQuestion(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                Quiz.Mode.REVIEW));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedLearn.addAll(expectedPreview);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedLearn.addAll(expectedReview);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // learn"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e actualLearn \u003d new Quiz(VALID_QUIZCARD, Quiz.Mode.LEARN).generate();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(6, actualLearn.size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedLearn, actualLearn);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // review"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e actualReview \u003d new Quiz(VALID_QUIZCARD, Quiz.Mode.REVIEW).generate();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(4, actualReview.size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedReview, actualReview);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // preview"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e actualPreview \u003d new Quiz(VALID_QUIZCARD, Quiz.Mode.PREVIEW).generate();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(2, actualPreview.size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedPreview, actualPreview);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void isNextCard() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(VALID_QUIZCARD, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quiz.hasCardLeft());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // get all cards"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // no cards left"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(quiz.hasCardLeft());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getNextCard() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // ------- learn -------"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(VALID_QUIZCARD, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // normal"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e generated \u003d quiz.generate();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c VALID_QUIZCARD_SIZE * 3; i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(generated.get(i), quiz.getNextCard());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals((i + 1) + \"/\" + VALID_QUIZCARD_SIZE * 3, quiz.getCurrentProgress());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // no more cards"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quiz.getNextCard());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // ------- review -------"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizReview \u003d new Quiz(VALID_QUIZCARD, Quiz.Mode.REVIEW);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // normal"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e generatedReview \u003d quizReview.generate();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c VALID_QUIZCARD_SIZE * 2; i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(generatedReview.get(i), quizReview.getNextCard());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals((i + 1) + \"/\" + VALID_QUIZCARD_SIZE * 2, quizReview.getCurrentProgress());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // no more cards"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quizReview.getNextCard());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // ------- preview -------"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizPreview \u003d new Quiz(VALID_QUIZCARD, Quiz.Mode.PREVIEW);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // normal"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e generatedPreview \u003d quizPreview.generate();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(generatedPreview.get(0), quizPreview.getNextCard());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(generatedPreview.get(1), quizPreview.getNextCard());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(2 + \"/\" + VALID_QUIZCARD_SIZE, quizPreview.getCurrentProgress());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // no more cards"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quizPreview.getNextCard());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getCurrentQuizCard_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(VALID_QUIZCARD, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quiz.getCurrentQuizCard());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getCurrentQuizCard() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(VALID_QUIZCARD, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard expected \u003d quiz.getNextCard();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(new QuizCard(0, \"Japan\", \"Tokyo\", Quiz.Mode.PREVIEW), quiz.getCurrentQuizCard());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, quiz.getCurrentQuizCard());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void updateTotalAttemptsAndStreak() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final int index \u003d 0;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String correctAnswer \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String wrongAnswer \u003d \"wrong answer\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card1 \u003d new QuizCard(\"Japan\", \"Tokyo\", Arrays.asList(\"JP\", \"Asia\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // ------- learn -------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e expected \u003d quizCards;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard expectedCard1 \u003d expected.get(index);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedCard1.updateTotalAttemptsAndStreak(expectedCard1.isCorrect(correctAnswer));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(quizCards, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quiz.updateTotalAttemptsAndStreak(index, correctAnswer));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, quiz.getCurrentSession());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(1, quiz.getQuizTotalAttempts());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(1, quiz.getQuizTotalCorrectQuestions());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // test wrong answer"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedCard1.updateTotalAttemptsAndStreak(expectedCard1.isCorrect(wrongAnswer));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(quiz.updateTotalAttemptsAndStreak(index, wrongAnswer));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, quiz.getCurrentSession());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(2, quiz.getQuizTotalAttempts());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(1, quiz.getQuizTotalCorrectQuestions());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // ------- Review -------"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizReview \u003d new Quiz(quizCards, Quiz.Mode.REVIEW);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizReview.getNextCard();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizReview.updateTotalAttemptsAndStreak(index, correctAnswer);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, quizReview.getCurrentSession());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // ------- Preview -------"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizPreview \u003d new Quiz(quizCards, Quiz.Mode.REVIEW);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizPreview.getNextCard();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizPreview.updateTotalAttemptsAndStreak(index, correctAnswer);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, quizPreview.getCurrentSession());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void end() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cList\u003cInteger\u003e\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected.add(Arrays.asList(0, 1, 1));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected.add(Arrays.asList(1, 1, 0));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // quiz just started"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(VALID_QUIZCARD, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(quiz.isQuizDone());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // test 2 question"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.updateTotalAttemptsAndStreak(0, \"Tokyo\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.updateTotalAttemptsAndStreak(1, \"wrong answer\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, quiz.end());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quiz.isQuizDone());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(VALID_QUIZCARD, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizCopy \u003d new Quiz(VALID_QUIZCARD, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quiz.equals(quizCopy));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quiz.equals(quiz));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(quiz \u003d\u003d null);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(quiz.equals(5));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void completeFlow() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cList\u003cInteger\u003e\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected.add(Arrays.asList(0, 2, 2));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected.add(Arrays.asList(1, 2, 1));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card1 \u003d new QuizCard(\"Japan\", \"Tokyo\", Arrays.asList(\"JP\", \"Asia\"));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard card2 \u003d new QuizCard(\"Hungary\", \"Budapest\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e(Arrays.asList(card1, card2));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(quizCards, Quiz.Mode.LEARN);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // Preview questions and answers"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quiz.getNextCard().isCorrect(\"Tokyo\"));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.updateTotalAttemptsAndStreak(0, \"Tokyo\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(quiz.getNextCard().isCorrect(\"wrong answer\"));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.updateTotalAttemptsAndStreak(1, \"wrong answer\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quiz.getNextCard().isCorrect(\"Japan\"));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.updateTotalAttemptsAndStreak(0, \"Japan\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quiz.getNextCard().isCorrect(\"Hungary\"));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.updateTotalAttemptsAndStreak(1, \"Hungary\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, quiz.end());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 271
    }
  },
  {
    "path": "src/test/java/seedu/address/model/session/SessionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_BELGIUM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.SrsCardBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class SessionTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build()).withName(\"\").build());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build_without_srsCards())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        .withName(\"\").build_without_srsCards());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build_without_count()).withName(\"\").build_without_count());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void constructor_invalidMode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build()).withMode(null).build());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build_without_srsCards())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        .withMode(null).build_without_srsCards());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build_without_count()).withMode(null).build_without_count());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void constructor_invalidCount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build()).withCount(0).build());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build_without_srsCards())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        .withCount(0).build_without_srsCards());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void generateSession() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCard currentSrsCard \u003d new SrsCardBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Session newSession \u003d new Session(\"01-01-Learn\", 1, Quiz.Mode.LEARN, List.of(currentSrsCard));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cQuizCard\u003e quizCards \u003d newSession.generateSession();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(quizCards.get(0).getQuestion(), CARD_BELGIUM.getCore(0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(quizCards.get(0).getAnswer(), CARD_BELGIUM.getCore(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 55,
      "DigiPie": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/session/SrsCardsManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.SrsCardBuilder.DEFAULT_CARDSRSDATA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_BELGIUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_CAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_DOG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_DOGCAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_MULTI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.SrsCardBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class SrsCardsManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private HashMap\u003cInteger, CardSrsData\u003e cardData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private List\u003cList\u003cInteger\u003e\u003e quizInformation \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private List\u003cSrsCard\u003e srsCards \u003d List.of(new SrsCardBuilder().build(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            new SrsCardBuilder(new SrsCard(CARD_JAPAN, new CardSrsData(CARD_JAPAN.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    Instant.now().plus(Duration.ofHours(20))), lesson)).build(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            new SrsCardBuilder(new SrsCard(CARD_CAT, new CardSrsData(CARD_CAT.hashCode(), 1,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    1, Instant.now().plus(Duration.ofHours(7))), lesson)).build(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            new SrsCardBuilder(new SrsCard(CARD_DOG, new CardSrsData(CARD_DOG.hashCode(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    1, 1, Instant.now().plus(Duration.ofHours(3))), lesson)).build(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            new SrsCardBuilder(new SrsCard(CARD_DOGCAT, new CardSrsData(CARD_DOGCAT.hashCode(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    1, 0, Instant.now().plus(Duration.ofHours((long) 0.5))), lesson)).build(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            new SrsCardBuilder(new SrsCard(CARD_MULTI, new CardSrsData(CARD_MULTI.hashCode(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    1, 1, Instant.now().plus(Duration.ofHours((long) 0.5))), lesson)).build());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void constructor_sort_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData.put(CARD_BELGIUM.hashCode(), DEFAULT_CARDSRSDATA);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCardsManager(lesson, null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCardsManager(null, cardData));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void constructor_update_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Instant currentDate \u003d Instant.now();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCardsManager(null, quizInformation, currentDate));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCardsManager(srsCards, null, currentDate));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void checkSort() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData.put(CARD_BELGIUM.hashCode(), DEFAULT_CARDSRSDATA);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CardSrsData cardSrsDataJapan \u003d new CardSrsData(CARD_JAPAN.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                Instant.ofEpochMilli(1233));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData.put(CARD_JAPAN.hashCode(), cardSrsDataJapan);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCardsManager currentManager \u003d new SrsCardsManager(lesson, cardData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e srsCards \u003d currentManager.sort();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new SrsCardBuilder().build());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new SrsCard(CARD_JAPAN, cardSrsDataJapan, lesson));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expected, srsCards);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void checkSortReverse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData.put(CARD_BELGIUM.hashCode(), DEFAULT_CARDSRSDATA);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CardSrsData cardSrsDataJapan \u003d new CardSrsData(CARD_JAPAN.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                Instant.ofEpochMilli(1233));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData.put(CARD_JAPAN.hashCode(), cardSrsDataJapan);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCardsManager currentManager \u003d new SrsCardsManager(new LessonBuilder("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new Lesson(\"Capitals\", List.of(\"Country\", \"Capital\"), List.of(\"Hint\"), 0,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        1, List.of(CARD_JAPAN, CARD_BELGIUM))).build(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        cardData);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e srsCards \u003d currentManager.sort();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new SrsCardBuilder().build());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new SrsCard(CARD_JAPAN, cardSrsDataJapan, lesson));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expected, srsCards);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void checkUpdate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Instant currentDate \u003d Instant.now();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizInformation.add(List.of(0, 1, 1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizInformation.add(List.of(1, 1, 1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizInformation.add(List.of(2, 1, 1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizInformation.add(List.of(3, 1, 1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizInformation.add(List.of(4, 1, 0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizInformation.add(List.of(5, 1, 1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCardsManager currentManager \u003d new SrsCardsManager(srsCards, quizInformation, currentDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cCardSrsData\u003e cardData \u003d currentManager.updateCardData();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cCardSrsData\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new CardSrsData(CARD_BELGIUM.hashCode(), 2, 2, currentDate"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                .plus(Duration.ofHours(5))));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new CardSrsData(CARD_JAPAN.hashCode(), 2, 2, currentDate"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                .plus(Duration.ofHours(48))));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new CardSrsData(CARD_CAT.hashCode(), 2, 2, currentDate"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                .plus(Duration.ofHours(48))));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new CardSrsData(CARD_DOG.hashCode(), 2, 2, currentDate"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                .plus(Duration.ofHours(24))));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new CardSrsData(CARD_DOGCAT.hashCode(), 2, 1, currentDate"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                .plus(Duration.ofHours(1))));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new CardSrsData(CARD_MULTI.hashCode(), 2, 2, currentDate"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                .plus(Duration.ofHours(12))));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expected, cardData);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        for (int i \u003d 0; i \u003c quizInformation.size(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            assertEquals(expected.get(i).getSrsDueDate(), cardData.get(i).getSrsDueDate());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/model/srscard/SrsCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.model.srscard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.SrsCardBuilder.DEFAULT_CARDSRSDATA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_BELGIUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.SrsCardBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class SrsCardTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private static final Card card \u003d CARD_BELGIUM;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private static final CardSrsData cardData \u003d DEFAULT_CARDSRSDATA;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private static final Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void constructor_invalidInput_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCard(null, null, null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCard(card, null, null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCard(null, null, lesson));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCard(card, null, lesson));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCard(null, cardData, null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCard(card, cardData, null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCard(null, cardData, lesson));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void fieldsGetter() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCard currentSrsCard \u003d new SrsCardBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(CARD_BELGIUM, currentSrsCard.getCard());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(DEFAULT_CARDSRSDATA, currentSrsCard.getCardData());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(new LessonBuilder().build(), currentSrsCard.getLesson());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void checkCardData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCard currentSrsCard \u003d new SrsCardBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(CARD_BELGIUM.hashCode(), currentSrsCard.getHashcode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(1, currentSrsCard.getNumOfAttempts());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(1, currentSrsCard.getStreak());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(Instant.ofEpochMilli(123), currentSrsCard.getSrsDueDate());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/CardDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public class CardDataTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private Instant instant \u003d Instant.ofEpochMilli(123);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private CardSrsData cardData \u003d new CardSrsData(1, 1, 1, instant);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        //Different type of object -\u003e returns false"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertFalse(cardData.equals(new Object()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        //Same type of object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertTrue(cardData.equals(cardData));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/UserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "package braintrain.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public class UserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        //Different type of List -\u003e returns false"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        //assertFalse(CardData.equals()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/CsvLessonsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.Lessons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class CsvLessonsStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path EMPTY_LESSON_FILE_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvLessonsStorageTest\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"emptyLessonFile\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path INVALID_CORE_CHAR_FIELD_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"CsvLessonsStorageTest\", \"invalidCoreCharInField\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path INVALID_CORE_COUNT_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvLessonsStorageTest\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"invalidCoreCount\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path INVALID_VALUES_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"CsvLessonsStorageTest\", \"invalidValues\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path MISSING_CORE_VALUE_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"CsvLessonsStorageTest\", \"missingCoreValues\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path MULTIPLE_FILES_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"CsvLessonsStorageTest\", \"multipleFiles\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path NO_VALID_FILES_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvLessonsStorageTest\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"noValidFiles\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path NON_DEFAULT_QUESTION_ANSWER_INDEX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"CsvLessonsStorageTest\", \"nonDefaultQuestionAnswerIndex\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path READ_ONLY_FILE_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvLessonsStorageTest\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"readOnlyFile\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path SINGLE_TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"CsvLessonsStorageTest\", \"singleTestLessons\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvLessonsStorageTest\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Optional\u003cLessons\u003e readLessons(Path lessonsInTestDataFolder) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return new CsvLessonsStorage(lessonsInTestDataFolder).readLessons(lessonsInTestDataFolder);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private void saveLessons(Path folderPath, Lessons lessons) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonsStorage cls \u003d new CsvLessonsStorage(folderPath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        cls.saveLessons(lessons);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String lessonsInTestDataFolder) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonsInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(lessonsInTestDataFolder)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Lessons getTestLessons() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons lessons \u003d new Lessons();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons.addLesson(getTestLesson());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Lesson getTestLesson() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        ArrayList\u003cString\u003e testFields \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        testFields.add(\"test 1\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        testFields.add(\"test 2\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lesson lesson \u003d new Lesson(\"test\", 2, testFields);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lesson;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void getLessonsFolderPath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonsStorage csvLessonsStorage \u003d new CsvLessonsStorage(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(TEST_DATA_FOLDER, csvLessonsStorage.getLessonsFolderPath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonsFolderPath_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonsStorage csvLessonsStorage \u003d new CsvLessonsStorage(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        csvLessonsStorage.setLessonsFolderPath(null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonsFolderPath_validFilePath_folderSet() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonsStorage csvLessonsStorage \u003d new CsvLessonsStorage(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        csvLessonsStorage.setLessonsFolderPath(NO_VALID_FILES_FOLDER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(NO_VALID_FILES_FOLDER, csvLessonsStorage.getLessonsFolderPath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessons_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        readLessons(null);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessons_invalidCoreCharInFields_escapeCharInFieldOfLesson() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        ArrayList\u003cString\u003e testFields \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        testFields.add(\"test 1\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        testFields.add(\"test 2\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        testFields.add(\"not core\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        testFields.add(\"*not core with escape\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lesson lesson \u003d new Lesson(\"test-invalid-core-char-in-field\", 2, testFields);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons actual \u003d readLessons(INVALID_CORE_CHAR_FIELD_DATA_FOLDER).get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(lesson, actual.getLesson(0));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessons_invalidCoreCountLesson_emptyLessons() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons actual \u003d readLessons(INVALID_CORE_COUNT_FOLDER).get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(new Lessons(), actual);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessons_emptyFolder_emptyResult() throws IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons actual \u003d readLessons(testFolder.newFolder().toPath()).get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(new Lessons(), actual);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessons_invalidData_cardIgnored() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons lessons \u003d readLessons(INVALID_VALUES_FOLDER).get();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(1, lessons.getLesson(0).getCards().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessons_missingData_cardIgnored() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons lessons \u003d readLessons(MISSING_CORE_VALUE_FOLDER).get();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(0, lessons.getLesson(0).getCards().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessons_nonDefaultQuestionAnswerIndex_successIndexSet() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons actual \u003d readLessons(NON_DEFAULT_QUESTION_ANSWER_INDEX_FOLDER).get();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNotEquals(Lesson.DEFAULT_INDEX_QUESTION, actual.getLesson(0).getQuestionCoreIndex());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNotEquals(Lesson.DEFAULT_INDEX_ANSWER, actual.getLesson(0).getAnswerCoreIndex());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessons_validFile_successfullyRead() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons expected \u003d getTestLessons();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons actual \u003d readLessons(SINGLE_TEST_DATA_FOLDER).get();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessons_validMultipleFiles_successfullyRead() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonsStorage csvLessonsStorage \u003d new CsvLessonsStorage(MULTIPLE_FILES_FOLDER);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons lessons \u003d csvLessonsStorage.readLessons().get();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertTrue(lessons.getLessons().size() \u003e 1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessons_noValidFiles_emptyLessons() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons actual \u003d readLessons(NO_VALID_FILES_FOLDER).get();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(new Lessons(), actual);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessons_emptyLessonFile_emptyLessons() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons actual \u003d readLessons(EMPTY_LESSON_FILE_FOLDER).get();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(new Lessons(), actual);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void saveLessons_validLessonsAndPath_successfullySaved() throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonsStorage csvLessonsStorage \u003d new CsvLessonsStorage(testFolder.newFolder().toPath());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons lessons \u003d csvLessonsStorage.readLessons(MULTIPLE_FILES_FOLDER).get();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(3, csvLessonsStorage.saveLessons(lessons));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void saveLessons_readOnlyFile_catchesIoException() throws IOException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonsStorage csvLessonsStorage \u003d new CsvLessonsStorage(READ_ONLY_FILE_FOLDER);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Files.walk(READ_ONLY_FILE_FOLDER).forEach(path -\u003e {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            File f \u003d new File(path.toString());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            f.setReadOnly();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons lessons \u003d csvLessonsStorage.readLessons().get();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(0, csvLessonsStorage.saveLessons(lessons));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void saveLessons_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        saveLessons(null, new Lessons());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void saveLessons_nullLessons_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        saveLessons(testFolder.newFolder().toPath(), null);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 209,
      "DigiPie": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.Lessons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path NO_VALID_FILES_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"CsvLessonsStorageTest\", \"noValidFiles\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonsStorage lessonsStorage \u003d new CsvLessonsStorage(getTempFilePath(\"data\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonImportExport lessonImportExport \u003d new CsvLessonImportExport(getTempFilePath(\"import_export\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storageManager \u003d new StorageManager(userPrefsStorage, lessonsStorage, lessonImportExport);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        JsonUserPrefsStorage expected \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected.getUserPrefsFilePath(), storageManager.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void lessonsReadSave() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         * {@link CsvLessonsStorage} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link CsvLessonsStorage} class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons original \u003d new Lessons();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storageManager.setLessonsFolderPath(NO_VALID_FILES_FOLDER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lessons retrieved \u003d storageManager.readLessons().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        retrieved \u003d storageManager.readLessons(NO_VALID_FILES_FOLDER).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(0, storageManager.saveLessons(retrieved));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(0, storageManager.saveLessons(retrieved, NO_VALID_FILES_FOLDER));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void getLessonsFolderPath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonsStorage expected \u003d new CsvLessonsStorage(getTempFilePath(\"data\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(expected.getLessonsFolderPath(), storageManager.getLessonsFolderPath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 23,
      "halcyoneee": 5,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CardBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A utility class to help with building {@code Card} objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class CardBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_CORE \u003d List.of(\"Belgium\", \"Brussels\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_OPTIONAL \u003d List.of(\"B\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static final int DEFAULT_HASHCODE \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private List\u003cString\u003e cores;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private List\u003cString\u003e optionals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CardBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        optionals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cores.addAll(DEFAULT_CORE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        optionals.addAll(DEFAULT_OPTIONAL);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Initializes the CardBuilder with the data of {@code cardToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CardBuilder(Card cardToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cores \u003d cardToCopy.getCores();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        optionals \u003d cardToCopy.getOptionals();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the {@code cores} into a {@code List\u003ccores\u003e} and set it to the {@code Card} which we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CardBuilder withCores(String ... cores) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cores \u003d Arrays.asList(cores);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the {@code optionals} into a {@code List\u003coptionals\u003e} and set it to the {@code Card} which we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CardBuilder withOptionals(String ... optionals) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionals \u003d Arrays.asList(optionals);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Builds and returns a {@link Card}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return a {@link Card}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Card build() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (optionals.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new Card(cores);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new Card(cores, optionals);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "lallanachang": 1,
      "DigiPie": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LessonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_BELGIUM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A utility class to help with building {@code Lesson} objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class LessonBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Capitals\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String DEFAULT_CORE_HEADER_1 \u003d \"Country\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String DEFAULT_CORE_HEADER_2 \u003d \"Capital\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String DEFAULT_OPT_HEADER_1 \u003d \"Hint\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_CORE_HEADERS \u003d List.of(DEFAULT_CORE_HEADER_1, DEFAULT_CORE_HEADER_2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_OPT_HEADERS \u003d List.of(DEFAULT_OPT_HEADER_1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final int DEFAULT_QUESTION_CORE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final int DEFAULT_ANSWER_CORE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cCard\u003e DEFAULT_CARDS \u003d List.of(CARD_BELGIUM, CARD_JAPAN);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private List\u003cString\u003e coreHeaders;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private List\u003cString\u003e optionalHeaders;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private int questionCoreIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private int answerCoreIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private List\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        coreHeaders \u003d DEFAULT_CORE_HEADERS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        optionalHeaders \u003d DEFAULT_OPT_HEADERS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        questionCoreIndex \u003d DEFAULT_QUESTION_CORE_INDEX;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        answerCoreIndex \u003d DEFAULT_ANSWER_CORE_INDEX;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cards \u003d DEFAULT_CARDS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Initializes the LessonBuilder with the data of {@code lessonToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder(Lesson lessonToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        name \u003d lessonToCopy.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        coreHeaders \u003d lessonToCopy.getCoreHeaders();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        optionalHeaders \u003d lessonToCopy.getOptionalHeaders();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        questionCoreIndex \u003d lessonToCopy.getQuestionCoreIndex();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        answerCoreIndex \u003d lessonToCopy.getAnswerCoreIndex();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cards \u003d lessonToCopy.getCards();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the {@code Lesson}\u0027s name."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the {@code coreHeaders} into a {@code List\u003cCards\u003e} and set it to the {@code Lesson}\u0027s"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link #coreHeaders}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withCoreHeaders(String ... coreHeaders) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.coreHeaders \u003d Arrays.asList(coreHeaders);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the {@code optionalHeaders} into a {@code List\u003cCards\u003e} and set it to the {@code Lesson}\u0027s"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link #optionalHeaders}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withOptionalHeaders(String ... optionalHeaders) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionalHeaders \u003d Arrays.asList(optionalHeaders);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Removes all optional headers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withNoOptionalHeaders() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionalHeaders \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the {@code cards} into a {@code List\u003cCards\u003e} and set it to the {@code Lesson}\u0027s {@link #cards}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withCards(Card ... cards) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cards \u003d Arrays.asList(cards);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the {@code Lesson} to have no {@code Cards} in {@link #cards}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withNoCards() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the question in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withQuestionCoreIndex(int index) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        questionCoreIndex \u003d index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the answer in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withAnswerCoreIndex(int index) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        answerCoreIndex \u003d index;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Builds and returns a lesson."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return a lesson"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Lesson build() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new Lesson(name, coreHeaders, optionalHeaders, questionCoreIndex, answerCoreIndex, cards);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 3,
      "DigiPie": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SessionBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.Quiz;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * A utility class to help with building {@code Session} objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class SessionBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"01-01-Learn\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static final int DEFAULT_COUNT \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static final Quiz.Mode DEFAULT_MODE \u003d Quiz.Mode.LEARN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static final List\u003cSrsCard\u003e DEFAULT_SRSCARDS \u003d List.of();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private int count;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Quiz.Mode mode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private List\u003cSrsCard\u003e srsCards;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SessionBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        count \u003d DEFAULT_COUNT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        mode \u003d DEFAULT_MODE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        srsCards \u003d DEFAULT_SRSCARDS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Initializes the SessionBuilder."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SessionBuilder(Session currentSession) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        name \u003d currentSession.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        count \u003d currentSession.getCount();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        mode \u003d currentSession.getMode();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        srsCards \u003d currentSession.getSrsCards();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Sets the {@code Sessionn}\u0027s name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SessionBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Sets the {@code Sessionn}\u0027s mode."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SessionBuilder withMode(Quiz.Mode mode) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Sets the {@code Sessionn}\u0027s cardCount."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SessionBuilder withCount(int count) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.count \u003d count;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Builds and returns a session."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return a session"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Session build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return new Session(name, count, mode, srsCards);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Session build_without_count() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return new Session(name, mode, srsCards);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Session build_without_srsCards() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return new Session(name, count, mode);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 78,
      "DigiPie": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SrsCardBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_BELGIUM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * A utility class to help with building {@code SrsCard} objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class SrsCardBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static final CardSrsData DEFAULT_CARDSRSDATA \u003d new CardSrsData(CARD_BELGIUM.hashCode(),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            1, 1, Instant.ofEpochMilli(123));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Card card;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private CardSrsData cardData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Lesson lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Empty constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SrsCardBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        card \u003d CARD_BELGIUM;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData \u003d DEFAULT_CARDSRSDATA;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Initializes the SessionBuilder."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SrsCardBuilder(SrsCard currentSrsCard) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        card \u003d currentSrsCard.getCard();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData \u003d currentSrsCard.getCardData();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        lesson \u003d currentSrsCard.getLesson();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Builds and returns a SrsCard."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return a SrsCard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SrsCard build() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return new SrsCard(card, cardData, lesson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCards.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A utility class containing a list of {@code Card} objects used for {@code Card} testing."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class TypicalCards {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card CARD_BELGIUM \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_JAPAN_CORE1 \u003d \"Japan\"; // First core"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_JAPAN_CORE2 \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_JAPAN_OPT1 \u003d \"T\"; // First optional"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card CARD_JAPAN \u003d new CardBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCores(CARD_JAPAN_CORE1, CARD_JAPAN_CORE2)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withOptionals(CARD_JAPAN_OPT1).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_CAT_CORE1 \u003d \"Cats have 9 lives.\"; // First core"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_CAT_CORE2 \u003d \"No\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card CARD_CAT \u003d new CardBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCores(CARD_CAT_CORE1, CARD_CAT_CORE2).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_DOG_CORE1 \u003d \"Dogs can eat chocolate.\"; // First core"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_DOG_CORE2 \u003d \"No\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card CARD_DOG \u003d new CardBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCores(CARD_DOG_CORE1, CARD_DOG_CORE2).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_DOGCAT_CORE1 \u003d \"Dogs are better than cats.\"; // First core"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_DOGCAT_CORE2 \u003d \"Yes\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card CARD_DOGCAT \u003d new CardBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCores(CARD_DOGCAT_CORE1, CARD_DOGCAT_CORE2).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_MULTI_CORE1 \u003d \"Japan.\"; // First core"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_MULTI_CORE2 \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_MULTI_CORE3 \u003d \"Japanese\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card CARD_MULTI \u003d new CardBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCores(CARD_MULTI_CORE1, CARD_MULTI_CORE2, CARD_MULTI_CORE3).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_EMPTY_CORE1 \u003d \"Japan.\"; // First core"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_EMPTY_CORE2 \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card CARD_EMPTY \u003d new CardBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCores(CARD_EMPTY_CORE1, CARD_EMPTY_CORE2).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private TypicalCards() {} // Prevents instantiation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static List\u003cCard\u003e getTypicalCards() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CARD_BELGIUM, CARD_JAPAN));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "DigiPie": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndices.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A utility class containing a list of {@link Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class TypicalIndices {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Index INDEX_FIRST_LESSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Index INDEX_SECOND_LESSON \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalLessons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_CAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_DOG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_DOGCAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A utility class containing a list of {@code Card} objects used for {@code Card} testing."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class TypicalLessons {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Lesson LESSON_DEFAULT \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Lesson LESSON_TRUE_FALSE \u003d new LessonBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withName(\"True and False Trivia\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCoreHeaders(\"Proposition\", \"Truth value\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withOptionalHeaders(\"\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withQuestionCoreIndex(0)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withAnswerCoreIndex(1)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCards(CARD_CAT, CARD_DOG, CARD_DOGCAT)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private TypicalLessons() {} // Prevents instantiation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static List\u003cLesson\u003e getTypicalLessons() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(LESSON_DEFAULT, LESSON_TRUE_FALSE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "DigiPie": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizStartCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d QuizStartCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String thirdCommand \u003d \"start\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 4,
      "-": 156,
      "DigiPie": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI unit test class for AddressBook."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(firstPointer \u003d\u003d null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "-": 174
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.management.ManagementModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.quiz.QuizModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ManagementModelManager(), new QuizModelManager()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 1,
      "-": 92,
      "DigiPie": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/QuizResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import guitests.guihandles.QuizResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizResultDisplay quizResultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizResultDisplayHandle quizResultDisplayHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizResultDisplay \u003d new QuizResultDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        uiPartRule.setUiPart(quizResultDisplay);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizResultDisplayHandle \u003d new QuizResultDisplayHandle(getChildNode(quizResultDisplay.getRoot(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            QuizResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"\", quizResultDisplayHandle.getText());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        guiRobot.interact(() -\u003e quizResultDisplay.setFeedbackToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", quizResultDisplayHandle.getText());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // only question"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        guiRobot.interact(() -\u003e quizResultDisplay.setFeedbackToUser(\"Question: Japan\\n\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"Question: Japan\\nType the answer for the question above and press Enter:\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quizResultDisplayHandle.getText());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "-": 29
    }
  }
]
