[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "\u003d QuickDocs"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-W09-4/main[image:https://travis-ci.org/CS2103-AY1819S2-W09-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-W09-4[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W09-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* This is a desktop clinic management application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* It is a Java application intended for doctors operating in a family clinic in Singapore."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* Quickdocs allow the doctors to not only manage patient data and appointments, but also help to keep track of the clinic\u0027s medical inventory as well."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* QuickDocs is developed using the base code of https://github.com/nus-cs2103-AY1819S2/addressbook-level4/blob/master/README.adoc[AddressBook Level 4] provided by by the https://github.com/se-edu[se-edu team]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "bentwj": 3,
      "simjiazhi": 5,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        \u0027site-name\u0027: \u0027QuickDocs\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "bentwj": 1,
      "-": 236
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Quickdocs was developed by the W09-4 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Sim Jia Zhi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "image::simjiazhi.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "{empty}[https://github.com/simjiazhi[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Role: Team Lead and deliverables +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Responsibilities: Patient Management"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "\u003d\u003d\u003d Tan Wenjian"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "image::bentwj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "{empty}[http://github.com/bentwj[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Role: Code Quality and Documentation +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "Responsibilities: Administrative Features"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Ong You Sheng Aaron"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::ongaaron96.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/ongaaron96[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Role: Testing and Integration +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Responsibilities: Appointment and Reminder Features"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Xue Chenyang"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "image::xue-chenyang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "{empty}[http://github.com/Xue-Chenyang[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Role: Scheduling and Tracking +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Responsibilities: Inventory Management"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "bentwj": 3,
      "simjiazhi": 15,
      "Xue-Chenyang": 1,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S2-W09-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Email us* : You can also reach us at `e0177123 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 1,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d Quickdocs - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W09-4/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "By: `W09-4`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ". Run the `w09.quickdocs.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `padd ...` (values are not added for brevity)."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ".Component interactions for `padd ...` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "image::SDforAddPatient.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[[Design-Ui]]0."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "image::QDUiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "The UI consists of a `rootLayoutController` composed of a `Display`, `UserInput`, `InputFeedBack` and `ReminderListPanel` controls. +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "image::uioverview.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "1. `Display` will reflect the results of the command entered"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "2. `userInput` is where the user can enter their commands"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "3. should the command fail due to erroneous command input, instructions to rectify the command will be displayed on the `InputFeedback`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "4. Appointments and Reminders are displayed on the `ReminderListPanel`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "The `UI` component uses JavaFx UI framework. RootLayout is defined in the matching `.fxml` file that are in link:{repoURL}/src/main/resources/view[src/main/resources/view] folder."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `Logic` component will return results or issues encountered pertaining to the execution of the command."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* These information will be reflected on the `Display` and `InputFeedback` respectively."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Consultation feature"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "The consultation process comprises of four stages:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "1. starting the consultation with a selected patient"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "2. entering the symptoms, assessment of the patient\u0027s current condition"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "3. entering the medicine to be prescribed"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "4. ending the consultation"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "The consultation process is facilitated by the ConsultationManager class."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "The consultationManager class holds the current consultation session and a list of past"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "consultation records for all the patients."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Methods in the ConsultationManager comprises of:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `createConsultation(Patient)` -- Starts a consultation session with the current selected patient"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `diagnosePatient(Diagnosis)` -- Record symptoms patient mentioned and the assessment of the current condition."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `prescribeMedicine(List of Prescriptions)` -- Prescribe the medicine and the quantities to be administered."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `endConsultation()` -- Ends the consultation session. No further edits can be made to both prescription and diagnosis."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Both `diagnosePatient` and `prescribeMedicine` are repeatable. The values entered during the repeated command will simply replace"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "the existing diagnosis / prescription."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "QuickDocs only permit one ongoing consultation. During diagnosis and prescription, changes are only made to the current consultation"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "session. The previous consultations should not be edited to prevent falsification of medical records. The current consultation session"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "can only end after both the diagnosis and prescription are finalized."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Given below is an example usage scenario:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "image::dg-consultation/consultation1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Step 1. A previously registered patient arrives and the doctor starts the session by"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "entering the consult command in this manner: `consult r/NRIC of the patient`. A message to indicate"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "the start of the consultation will be shown in the results display."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* if the patient is new and his or her details are not recorded in QuickDocs, the command will not be executed and the doctor will be alerted"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "that the consultation cannot continue since no patient records with the entered Nric can be found. An invalid nric entered will also prompt the"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "same response"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "image::dg-consultation/consultation2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Step 2. The patient will tell the doctor what are his / her ailments. The doctor will record the symptoms"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "down. The doctor will then make the assessment of the illness the patient is having and execute the command by clicking"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "on the `Enter` on the keyboard."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* The symptoms and assessment have to be prepended by the `s/` and `a/` prefix respectively"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* The command entered by the doctor will look something like this: `diagnose s/constant coughing s/sore throat a/throat infection`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "image::dg-consultation/consultation3.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Step 3. Should the patient inform the doctor of additional symptoms after the diagnosis is given, the doctor can simply press"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "the up and down key to display the previously entered command on the userInput area. The doctor can then add the new symptom in and"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "press `Enter`, replacing the previously recorded diagnosis."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "image::dg-consultation/consultation4.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Step 4. The doctor will then add the medicine to the prescription list, followed by the quantities. Medicine are prepended by the `m/` prefix while"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "quantities are prefixed by `q/`.The order of the quantity entered corresponds with the order the medicine is added in the command:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `prescribe m/Dextromethorphan m/ibuprofen q/1 q/2` In this case q/1 represents one unit of Dextromethorphan cough syrup is issued while"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "2 units of ibuprofen (inflammatory tablets) are issued to the patient"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* Alternatively, the doctor can enter the quantity right after the medicine: `prescribe m/Dextromethorphan q/1 m/ibuprofen q/2`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "If any of the medicine issued are insufficient to complete the prescription, or is simply not in the inventory, a message will be displayed in"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "the inputFeedback area. The command will not be executed and remains in the userInput text field. The doctor can then make the changes to the command."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "image::dg-consultation/consultation5.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Step 5. Just like the diagnosis command, prescription can be replaced by reentering the command."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Step 6. After explaining the medicine intake to the patient, the doctor can then end the consultation session on QuickDocs by using the command"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "`endconsult`. No further changes to the consultation records can be made from this point on."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "The following sequence diagram summarizes what happens when a user executes the Consultation command:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "image::dg-consultation/consultationSD1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "1. In a neighbourhood clinic setting, doctors usually tend to only one patient at a time. This is why QuickDocs only allow a single"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "ongoing session in the consultation process."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "2. In Singapore, every person is given a unique NRIC / FIN number regardless of their citizenship statuses. As such the NRIC is used to"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "search for the patient records to start the consultation session."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "3. The prescription and diagnosis commands are made to override their previous states to ease the modification of consultation data."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Doctors can simply use the command history to navigate to the previous command entered, make the changes and then execute the command. This"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "allow them to simply add a few words to change consultation data rather than re-entering the entire command line."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "4. Prescription can actually be added before the diagnosis is recorded. The doctor could be expecting a patient for regular checkup and prepare the"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "prescription before the patient enters the room. If the condition remains the same as before, the doctor can simply enter the diagnosis to complete the"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "consultation session, cutting down the time spent on the consultation session."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d\u003d Alternatives considered"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Prior to the current implementation, a few options for the overall consultation process was considered:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[cols\u003d\"1,2a,1, 1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|Alternative |Description |Pros | Cons"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "// row 1"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|*Consultation as one single command*"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|Doctor enter `consult` followed by all the symptoms, assessment, prescriptions"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " and then execute"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "| Consultation is now restricted to just one class"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "The consultation creation will truly be one-shot"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "| Input will be verbose"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Harder to navigate to the erroneous part to make changes"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "// row 2"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|*Iterative consultation creation*"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|Doctor enter `consult`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Doctor get prompted to enter symptoms and assessment."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Doctor get prompted to enter prescription."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Doctor ends consultation"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "| Less likely to enter erroneous data as consultation is now broken down to different stages"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "| Implementation will not be one-shot"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Doctor is unable to perform other related actions (such as listing past records) while conducting the current consultation"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "// row 3"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|*Separate edit commands for diagnosis and prescriptions*"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "| Separate commands to edit diagnosis and prescription details"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "| Not feasible because both classes feature a list of symptoms and medicine respectively."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Unable to differentiate between editing an existing value and adding a new value"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|`* * *` |doctor |allocate appointments for patients |Prevent clashes in schedules"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|`* * *` |doctor |view patient’s contact details |Call and follow up on them"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|`* * *` |doctor |record and view patients past medical records |diagnose them better for current and subsequent consultations"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|`* * *` |doctor |lock the application |Prevent unauthorised accesses to the application"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|`* * *` |doctor |view monthly statistics about patients, finances and inventory|have better control over my clinical operations"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|`* * *`|forgetful or busy doctor |get reminders of when I am expecting patients|prepare to diagnose them"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|`* *` |forgetful doctor |keep track of my medical license duration |renew it on time"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|`* *` |doctor |view my patients’ appointment details |send reminders to them"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|`* *` |doctor |export patient diagnosis and details |facilitate external providers’ medical care"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|`* *` |doctor handling patients with chronic illnesses|view detailed information about medicine in my storage|give out prescription that tackles the patients’ symptoms better"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "|`*` |newly trained doctor | search for details of a medical condition |explain to my patients better"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "(For all use cases below, the *System* is `Quickdocs` and the *Actor* is the `doctor`, unless specified otherwise)"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Use case: Consultation"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "1. User enter consultation command followed by NRIC"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "2. Quickdocs show prompt that indicates to user that consultation for that patient started"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "3. User enter diagnosis command with symptoms and assessment"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "4. Quickdocs indicate to user that the symptoms and assessment are recorded"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "5. User enter prescription command with medicine and quantity"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "6. Quickdocs indicate to user the medicine and quantity to be administered for current patient"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "7. User enter end consultation command"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "8. Quickdocs indicate that consultation for current patient ended"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* 1a. User enter invalid NRIC"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "** 1a1. Quickdocs alert user that no patient with entered NRIC exist to start a consultation session with"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "+"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Use case ends here."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* 3a. User left out symptoms or assessment when diagnosis patient"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "** 3a1. Quickdocs alert user that some details are left out and prompt user to modify command"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "+"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Use case resumes from step 3."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* 5a. User left out quantities for certain medicine"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "** 5a1.  Quickdocs alert user that some medicine do not have quantities and prompt them to reenter command"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "+"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Use case resumes from step 5."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "+"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* 5b. User left out quantities for certain medicine"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "** 5b1.  Quickdocs alert user that additional quantities are provided and prompt user to reenter command"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "+"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Use case resumes from step 5."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "+"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* 7a. User end consultation when diagnosis is not completed"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "** 7a1.  Quickdocs alert user that the session is missing a diagnosis"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "** 7a2.  User will resume perform step 3 and 4 since they were skipped"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "+"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Use case ends here."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "+"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* 7b. User end consultation when prescription is not given"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "** 7b1.  Quickdocs alert user that the session is missing a prescription"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "** 7b2.  User will resume perform step 5 and 6 since they were skipped"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "+"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Use case ends here."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Use case: View patient medical record"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "1. User enter command to view patient history with search criteria"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "2. Quickdocs show list of patient’s consultation records"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "3. Quickdocs prompt user to enter index"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "4. User enter index of record he or she wants to see"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "5. Quickdocs show selected patient record"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "6. User enters end to stop looking at record"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "7. Use case repeat from case 2 until user enters “end” again after step 6"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "8. Quickdocs shows message to inform user he or she is no longer looking at patient records"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* 1a. User enter invalid index"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "** 1a1. Quickdocs alert user that the index is invalid"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "** 1a2. Quickdocs exit view patients record"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Use case ends here."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* 1b. No patient record created yet"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "** 1b2. Quickdocs alert user that no patient is created yet, suggest to create a new patient record first"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* 1c. User enter a patient’s name that is unique in the storage"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Use case resumes from step 1."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* 1d. User enter a non unique patient’s name"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "** 1d1.  Quickdocs show list of patients with the same name, and prompt index"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "** 1d2. User refine search criteria, either by entering index or full name of the patient"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Use case resumes from step 1."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* 4a. User enter invalid medical record index"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "** 4a1. Quickdocs alert user that index entered was invalid"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Use case resumes from step 3."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* 6a. User enter command apart from “end”"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "** Quickdocs prompt user that command was invalid and inform them that “end” will exit view"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes from step 5."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Allocating an appointment slot"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "1. User enter command to list all free slots, specifying the date and viewing format"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "2. User discusses and agrees on an appointment slot with patient"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "3. User search for patient’s NRIC by viewing patient records with search criteria"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "4. User enter command to add appointment slot, specifying patient\u0027s NRIC, date, start and end time"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "5. Quickdocs displays a successful message, showing the details of the newly created appointment slot"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. User enters invalid keyword when specifying date or format"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. Quickdocs displays an error message"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes from step 1."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "* 1b. User does not enter any keywords"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "** 1b1. Quickdocs displays all free slots for the current week"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "* 4a. User enters invalid NRIC, date or time"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "** 4a1. Quickdocs displays an error message"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "* 5a. Quickdocs displays an error message, showing clashes in timing with another appointment slot"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends here."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "* 5b. Patient wants to change appointment slot timing"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "** 5b1. User enter command to delete appointment slot, specifying date and start time"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "** 5b2. Appointment specified deleted"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes from step 1."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "bentwj"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Viewing clinic statistics"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "bentwj"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "bentwj"
        },
        "content": "1. User requests to view statistics"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "bentwj"
        },
        "content": "2. Quickdocs prompts the user for the topic"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "bentwj"
        },
        "content": "3. User enters the topic"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "bentwj"
        },
        "content": "4. Quickdocs prompts the user for the range of month and year"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "bentwj"
        },
        "content": "5. User enters the months and years"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "bentwj"
        },
        "content": "6. Quickdocs prompts the user whether the user wants it in graphical form (Y/N)"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "bentwj"
        },
        "content": "7. User enters his preference"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "bentwj"
        },
        "content": "8. Quickdocs displays the statistics"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "bentwj"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "bentwj"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "bentwj"
        },
        "content": "* 1a. User requests to view statistics with valid optional arguments."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "bentwj"
        },
        "content": "Use case resumes at step 8."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "bentwj"
        },
        "content": "* 1b. User requests to view statistics with invalid optional arguments."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "bentwj"
        },
        "content": "** 1b1. Quickdocs shows an error message."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "bentwj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "bentwj"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "bentwj"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "bentwj"
        },
        "content": "* 3a. User enters invalid topics."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "bentwj"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "bentwj"
        },
        "content": "** 3a1. Quickdocs shows an error message."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "bentwj"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "bentwj"
        },
        "content": "* 5a. User enters invalid range of months or years."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "bentwj"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "bentwj"
        },
        "content": "** 5a1. Quickdocs shows an error message."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "bentwj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "bentwj"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "bentwj"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "bentwj"
        },
        "content": "* 5b. User enters only range of months."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "bentwj"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "bentwj"
        },
        "content": "** 5b1. Quickdocs defaults and displays year to current year."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "bentwj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "bentwj"
        },
        "content": "Use case resumes at step 6."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "bentwj"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "bentwj"
        },
        "content": "* 5c. User enters only range of years."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "bentwj"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "bentwj"
        },
        "content": "** 5c1. Quickdocs defaults and displays month to current month."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "bentwj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "bentwj"
        },
        "content": "Use case resumes at step 6."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "bentwj"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "bentwj"
        },
        "content": "* 7a. User enters invalid response (not Y or N)."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "bentwj"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "bentwj"
        },
        "content": "** 7a1. Quickdocs shows an error message."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "bentwj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "bentwj"
        },
        "content": "Use case resumes at step 6."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "\u003d\u003d\u003d Use case: Inquire about medicine storage"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "1. User request to view medicine storage"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "2. QuickDocs show the list of general categories of medicine"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "3. QuickDocs prompts users to enter index"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "4. User enters index"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "5. QuickDocs shows the list of sub-categories and individual medicine under the chosen category"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "6. QuickDocs prompts users to enter index"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "7. User enters index"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "8. Repeat step 5-8 until user’s input index corresponds to a specific medicine"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "9. QuickDocs displays the storage amount for the selected medicine"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "* 4a. User request to view storage information about all medicine under all categories"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "** 4a1. QuickDocs display the list of all medicine storage information"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "Use case ends here."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "* 4b. User types an illegal index"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "** 4b1. QuickDocs sends warning and allows the user to retype the index"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "Use case resume at step 4."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "* 7a. User request to view storage information about all medicine under the selected category"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "** 7a1. QuickDocs display the list of all medicine storage information under the selected category"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "Use case ends here."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "* 7b. User types an illegal index"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "** 7b1. QuickDocs sends warning and allows the user to retype the index"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "Use case resumes at step 7."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Use case: Record purchase of medicine"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "1. User request to record purchase of medicine"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "2. QuickDocs shows the list of all general categories of medicine"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "3. QuickDocs prompt the user to either select one category"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "4. User inputs index"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "5. QuickDocs display the list of all categories under the selected category"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "6. QuickDocs prompt the user to either select one category"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "7. User inputs index"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "8. Repeat from step 5 to 8 until the user indicate a specific medicine"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "9. QuickDocs remind the user to type in purchased quantity"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "10. User types in the quantity"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "11. QuickDocs update the quantity accordingly"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "* 4a./7a. User could request to establish new categories"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "** 4a1./7a1. Quickdocs prompts the user to type in name for the new category"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "**\t4a2./7a2. User input new name"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "**\t4a3./7a3. QuickDocs establish new category and direct into the new category"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "Use case resumes at step 5."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "* 4b./7b. User could request to establish a new medicine under the directory"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "**\t4b1./7b1. QuickDocs prompts the user to type in name for the new medicine"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "**\t4b2./7b2. User input the name"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "**\t4b3./7b3. QuickDocs creates new medicine"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "Use case resumes at step 9."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ".  Response time for commands should be below 3 seconds so that consultations can be expedited"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ".  Commands should be easy to pick up for novice users, and convenient for expert users."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ".  Data stored can be easily transferred to another device installed with Quickdocs for operation continuation."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ".  Data stored, especially patient records and particulars, need to be encrypted to prevent unauthorised access and misuse."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "bentwj": 50,
      "simjiazhi": 232,
      "Xue-Chenyang": 79,
      "-": 944
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d Quickdocs - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W09-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "By: `W09-4`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Quickdocs is a program that is catered for doctors practicing in small family clinics in Singapore. It integrates the patient, appointment and stock management into a single application. Doctors can better manage their clinics while still maintaining a small manpower size."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ".  Download the jar file and put it into a directory you desire."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ".  Launch the application and set a password"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ".  Type command into command box and press enter to execute it"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ".  Click on the buttons if you want to use the GUI to perform the actions instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "*Quickdocs features command sequences to perform actions, in the following format:*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "command VALUE prefix/VALUE [OPTIONAL_VALUE]..."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* Commands are in lowercase, you can view all of them using the help command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bentwj"
        },
        "content": "* Some commands have an alias, which can be used to execute the same command e.g. `statistics` can be replace by `stats`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* Values are the user input, which the user intend to store or manipulate data with"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* Prefix are used to complement certain commands such as adding or editing of records"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* Optional values can be placed after the command, and can be added multiple times after the command, value and prefix"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Patient Management - adding patient: `padd`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Add a patient into quickdocs’ patient records. The order of input does not matter. +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Tags can be added to a patient record to ease searching. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Format: `padd n/NAME r/NRIC e/EMAIL a/ADDRESS g/GENDER d/DOB  c/CONTACT  t/[tag]...`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `padd n/Gary Goh r/S7332803I g/Male d/01-04-1973 a/20 Upper Changi Road c/92347654 e/ggoh@gmail.com t/highbloodpressure t/diabetes`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `padd n/Chan Mei Hua r/S8865281I d/09-05-1988 g/Female c/92341221 a/2 Simei Street e/cmh@gmail.com`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "//\u003d\u003d\u003d Patient Management - deleting patient `pdelete`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "//Delete a patient record into quickdocs. A confirmation have to be made before record is deleted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "//Format: `pdelete INDEX` +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "//Example: `pdelete 1`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Patient Management - editing patient `pedit`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Edit patient detail +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Format: `pedit INDEX [n/NAME] [a/Address] …`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `pedit 21 [n/Tan Ah Kow] [p/92256711] [e/tanahkow@gmail.com]` +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `pedit 4 [p/90691717] [g/Female]` +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Patient Management - list patient details : `plist`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "List patient details, can be filtered using name and tags +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Format: `plist [PREFIX / KEYWORD] …`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `plist`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "   List up to 50 patient detail entries (name, nric, gender and date of birth)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `plist n/a`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "   List all the patient detail entries whose name starts with a"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `plist r/S91`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "   List all the patient detail entries whose nric starts with S91"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `plist t/diabetes`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "   List all diabetic patients"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Consultation Management - consultation: `consult`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Start a consultation session. Diagnosis and prescription can be added for the patient subsequently. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Format: `consult r/NRIC`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `consult r/S9737162C` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "  Start a consultation session for patient with NRIC: S9737162C"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Consultation Management - diagnosis: `diagnose`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Record the patient\u0027s symptom and the assessment for the illness to the current consultation session. You can enter the command again to override the current existing diagnosis. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "A minimum of one assessment and one symptom is required to record the diagnosis. +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Format: `diagnose s/SYMPTOM [s/SYMPTOM] ... a/ASSESSMENT`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `diagnose s/runny nose s/sore throat a/flu`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "   Assessment of patient\u0027s illness to be flu, and the symptoms are runny nose and sore throat."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Consultation Management - prescription: `prescribe`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Record the medicine administered to the patient and its quantity. You can reenter the command to override current prescription. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "A minimum of one medicine and one quantity is required to record a prescription entry. The order of quantity entered corresponds to the order of the medicine entered. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "`prescribe m/MEDICINE [m/MEDICINE] ... q/QUANTITY [q/QUANTITY]` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "`prescribe m/MEDICINE q/QUANTITY [m/MEDICINE] [q/QUANTITY] ...`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `prescribe m/penicillin q/1 m/Afrin spray q/1 m/ibuprofen q/2`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "   Prescription now consist of 1 unit of antibiotics, 1 unit of nasal decongestant and 2 units of inflammation."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `prescribe m/penicillin m/Afrin spray m/ibuprofen q/1 q/1 q/2`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "   Same as above example, quantity ordered based on medicine order."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Consultation Management - end consultation: `endconsult`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "End the current consultation session, no further changes to diagnosis and prescription will be permitted. +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Format: `endconsult` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Consultation Management - list consultation: `listconsult`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "List consultation records belonging to a single patient, or display the details of"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "a single consultation record through its index. +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Format: `listconsult INDEX` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "or +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "`listconsult r/NRIC`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `listconsult 33` Searches for record #33, display time of the consultation,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "diagnosis and prescription given to the patient"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `listconsult r/S7534436H` Display a list of consultation records belonging"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "to patient with NRIC S7534436H, along with their index which can be used to display"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "actual consultation details"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Patient Management - view past patient records: [coming in v1.2]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "View the past consultation records of each patient +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Patient Management - generate invoice: [coming in v2.0]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Generates the invoice for a given prescription. After selecting the patient, select the consultation to view in detail and then select the desired prescription."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Appointment and reminders - adding appointments: `appadd`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Create an appointment with a patient to add to your schedule. A reminder will be automatically created."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `appadd r/NRIC d/DATE s/START e/END c/COMMENT`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* `appadd r/S9123456A d/2019-10-23 s/16:00 e/17:00 c/Weekly checkup` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Appointment and reminders - listing appointments: `applist`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Displays a list of appointments made, ordered by time and date. Can be filtered using dates or by patient\u0027s NRIC. Format can be day, week or month."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "`applist f/FORMAT d/DATE` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "or"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "`applist r/NRIC` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `applist` Lists all appointments on the current day (by default with no tags). +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* `applist f/day d/2019-07-19` Lists all appointments on 23rd July 2019. +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* `applist f/month d/2019-07-19` Lists all appointments in the month of the given date, July 2019. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* `applist r/S9123456A` Lists all appointments made with patient with NRIC S9123456A. +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Appointment and reminders - deleting appointments: `appdelete`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Delete an appointment previously created."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `appdelete d/DATE s/START`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* `appdelete d/2019-10-23 s/16:00` Deletes appointment created on 23rd July 2019, at 4pm."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Appointment and reminders - list free appointment slots: `appfree`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Displays a list of free slots, ordered by time and date. Can be filtered using dates and tags. Format can be day, week or month."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `appfree f/FORMAT d/DATE`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* `appfree` Lists all free slots in the current week. (By default without any tags) +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* `appfree f/day d/2019-07-23` Lists all free slots on 23rd July 2019. +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* `appfree f/month d/2019-07-23` Lists all free slots in the month of the given date, July 2019."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Appointment and reminders - adding reminders: `remadd`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "Create a reminder to add to your reminder sidebar. End time and comments are optional."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remadd t/TITLE d/DATE s/START e/END c/COMMENT`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* `remadd t/Purchase Medicine ABC d/2019-5-20 s/12:00 e/13:00 c/Urgent` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Appointment and reminders - listing reminders: `remlist`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Displays a list of reminders made, ordered by time and date. Can be filtered using dates. Format can be day, week or month."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remlist f/FORMAT d/DATE`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* `remlist` Lists all reminders on the current day (by default with no tags). +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `remlist f/day d/2019-07-19` Lists all reminders on 23rd July 2019. +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `remlist f/month d/2019-07-19` Lists all reminders in the month of the given date, July 2019. +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Appointment and reminders - deleting reminders: `remdelete`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Delete a reminder previously created."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remdelete i/INDEX`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* `remdelete i/3` Deletes the third reminder listed."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Appointment and reminders - timing of notification: `ntime`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Adjust how long before the actual reminder start time to receive the notification, in minutes."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `ntime t/TIME`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* `ntime t/30` Receives notifications 30 minutes before the actual reminder start time."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Appointment and reminders - sending email reminders to patients: [coming in v2.0]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Sends an auto-generated email reminder to patients regarding an approaching appointment date."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bentwj"
        },
        "content": "\u003d\u003d\u003d Administration - viewing statistics: `statistics`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bentwj"
        },
        "content": "Views the statistics of the clinic. +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bentwj"
        },
        "content": "Alias: `stats` +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bentwj"
        },
        "content": "Format: `statistics TOPIC FROM_MONTHYEAR [TO_MONTHYEAR]`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bentwj"
        },
        "content": "* Views the statistics of the topic specified at `TOPIC`. Allowed arguments: `consultations`, `finances`, `all`.  +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bentwj"
        },
        "content": "* If `TO_MONTHYEAR` is not specified, it will be defaulted to be equal to `FROM_MONTHYEAR`. +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bentwj"
        },
        "content": "* `statistics all 0119` +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bentwj"
        },
        "content": "View all the statistics for the January 2019. +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "bentwj"
        },
        "content": "* `stats finances 0119 0219` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bentwj"
        },
        "content": "View the financial statistics from January 2019 to February 2019. +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "bentwj"
        },
        "content": "\u003d\u003d\u003d Administration - setting consultation fee: `setconsultfee`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "bentwj"
        },
        "content": "Sets the consultation fee to the specified amount. +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bentwj"
        },
        "content": "Format: `setconsultfee [AMOUNT]`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bentwj"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bentwj"
        },
        "content": "* `setconsultfee 30` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bentwj"
        },
        "content": "Sets the consultation fee to $30.00. +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "bentwj"
        },
        "content": "* `setconsultfee 32.50` +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "bentwj"
        },
        "content": "Sets the consultation fee to $32.50. +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Administration - generate medical certificate: [coming in V2.0]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Generates a custom MC"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "\u003d\u003d\u003d Inventory - add medicine into storage: `addMed`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "Add a new medicine under directory specified by the path. +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "Format: `addMed [Path] [Medicine_Name] (Optional)[Quantity]`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "* `addMed root\\TCM healroot 50` Add a new medicine with name \"healroot\" and quantity 50 at directory root\\TCM"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "\u003d\u003d\u003d Inventory - view medicine storage: `viewMed`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "view the specific information about the directory or medicine specified by the path +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "Format: `medstorage [Path]`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "* `medstorage root\\TCM` Shows the sub-directories and medicines stored under the directory root\\TCM"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Inventory - setting notification for low stock: `setalert`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "An automatic notification will pop up when the storage of any medicine fall below the specific alert value set by the user"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Format: `setalert [MEDICINE] [AMOUNT]`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "* `setalert panadol 50` the alert level of panadol storage is set to 50. A notification will appear when panadol storage falls below 50."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "\u003d\u003d\u003d Inventory - recording purchases of medicine: `buyMed`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Purchase of medicine can be recorded and the storage amount will be consequently updated +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "Format: `buyMed [MEDICINE_NAME] [AMOUNT] [EXPENDITURE]` +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "Alternative Format: `buyMed [PATH_OF_MEDICINE] [AMOUNT] [EXPENDITURE]`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "* `buyMed panadol 10 400`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "* `buyMed root\\panadol 10 400`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Inventory - view past record of medicine purchase: `purchaserecord`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "View the past record of medicine purchase +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Format: purchaseRecord +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Example: `purchaseRecord panadol`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Inventory - View the detailed information about any medicine: [coming in V2.0]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "Using external APIs, the users could view more detailed information about any medicine."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003d\u003d\u003d Inventory - Automatic information of medicine supply after prescription: [coming in V2.0]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "After each prescription, if the medicine in storage is insufficient for the prescription, a warning will appear and the prescription will not be record."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "After each successful prescription, the updated storage amount of affected medicine will automatically be reflected."
      }
    ],
    "authorContributionMap": {
      "bentwj": 22,
      "simjiazhi": 143,
      "Xue-Chenyang": 17,
      "-": 167
    }
  },
  {
    "path": "src/main/java/quickdocs/RootLayoutController.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package quickdocs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.ui.ListElementPointer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.ReminderListPanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * This class handles user interaction with the root layout"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class RootLayoutController {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static int currentInputPointer \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Logic logicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ReminderListPanel reminderListPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private List\u003cString\u003e history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private TextArea display;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private TextArea inputFeedback;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane reminderList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void setLogicManager(Logic logicManager) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.logicManager \u003d logicManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.history \u003d this.logicManager.getHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * This method will pass the command into the parser whenever the user presses enter"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @param event Event associated with the user pressing enter to confirm a command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void enterInput(KeyEvent event) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        switch (event.getCode()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            event.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            event.consume();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case ENTER:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                inputFeedback.setText(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                CommandResult result \u003d logicManager.execute(userInput.getText());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                display.appendText(\"\u003e\" + userInput.getText() + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                display.appendText(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                display.appendText(\"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                // move display to the end to show result of last entered command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                display.selectPositionCaret(display.getText().length());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                // history handling"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                initHistory();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                historySnapshot.next();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                userInput.setText(\"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                inputFeedback.setText(e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * This method will check if the parameters entered into the command text field is valid"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * by calling the various checkers across the module"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @param event Event associated with the user pressing space bar between parameters"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void checkInput(KeyEvent event) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (event.getCode() \u003d\u003d KeyCode.SPACE) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            inputFeedback.setText(\"space entered\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void fillReminderList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        reminderListPanel \u003d new ReminderListPanel(logicManager.getFilteredReminderList(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                logicManager.selectedReminderProperty(), logicManager::setSelectedReminder);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        reminderList.getChildren().add(reminderListPanel.getRoot());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * This method allow other modules to tap on the display to show the output"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * of different commands"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @return the reference to the display textArea for other modules"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public TextArea getDisplay() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.display;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // history handling"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        userInput.setText(text);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        userInput.positionCaret(userInput.getText().length());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 152,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import quickdocs.RootLayoutController;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.QuickDocs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // seedu.address.quickdocs attributes"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private AnchorPane rootLayout;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        QuickDocs initialQuickDocs \u003d new QuickDocs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Optional\u003cQuickDocs\u003e quickDocs;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            quickDocs \u003d storage.readQuickDocs();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (!quickDocs.isPresent()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a empty quickdocs\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            initialQuickDocs \u003d quickDocs.orElse(initialQuickDocs);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty QuickDocs\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty QuickDocs\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new ModelManager(initialData, initialQuickDocs, userPrefs);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //    logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //    ui.start(primaryStage);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // Quickdocs codes"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.primaryStage.setTitle(\"QuickDocs\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.primaryStage.setMinWidth(400);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.primaryStage.setMinHeight(300);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        initRootLayout();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Display the root layout when application is launched"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void initRootLayout() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            // Load root layout from fxml file."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            //this will work when the rootlayout fxml file is in the resources folder but cannot link to controller"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            rootLayout \u003d loader.load(getClass().getClassLoader().getResourceAsStream(\"view/RootLayout.fxml\"));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            RootLayoutController rootLayoutController \u003d loader.getController();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            rootLayoutController.setLogicManager(logic);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            // Show the scene containing the root layout."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Scene scene \u003d new Scene(rootLayout);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            primaryStage.show();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            rootLayoutController.fillReminderList();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 65,
      "Xue-Chenyang": 3,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * A supporting function to find an element with the special key in a sorted arraylist"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param list the list to search the element with the key in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param test a function that gives -1 if the operand\u0027s field of interest is less than the key;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     *            0 if equal; 1 if larger than"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param \u003cT\u003e the type of the element of the list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return if the element with key exists in the list, return Optional.of that element; else return Optional.empty()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e binarySearch(ArrayList\u003cT\u003e list, Function\u003cT, Integer\u003e test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        int left \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        int right \u003d list.size() - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            if (left \u003e right) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            if (left \u003d\u003d right) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                if (test.apply(list.get(left)) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    return Optional.of(list.get(left));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    return Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            int mid \u003d (left + right) / 2;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            int testResult \u003d test.apply(list.get(mid));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            if (testResult \u003c 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                left \u003d mid + 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            } else if (testResult \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                return Optional.of(list.get(mid));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                right \u003d mid - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 38,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Convert path to a String to display to User"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param path the path field"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return A string representation of the path"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static String fromPathToString(String[] path) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        for (int i \u003d 0; i \u003c path.length - 1; i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            sb.append(path[i] + \"\\\\\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        sb.append(path[path.length - 1]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 14,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (model.getQuickDocs().isModified()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            logger.info(\"QuickDocs modified, saving to file.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                storage.saveQuickDocs(model.getQuickDocs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                model.getQuickDocs().indicateModification(false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(person);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredReminderList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cReminder\u003e selectedReminderProperty() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedReminderProperty();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedReminder(reminder);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 11,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddDirectoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.util.StringUtil.fromPathToString;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * A command to add new directory"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class AddDirectoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addDirec\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new directory to the directory specified. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"[path of directory separated by \\\\] \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"[name of new directory]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"root\\\\TCM Herbs\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New directory with name \\\"%1$s\\\" added to %2$s\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private final String[] path;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public AddDirectoryCommand(String[] path, String directoryName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.name \u003d directoryName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Add a new directory with the given name to a given directory"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param commandHistory {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return A commandresult showing the result"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            model.addDirectory(name, path);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            model.commitAddressBook();;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, name, fromPathToString(path)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new CommandException(ex.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Checks whether other equals this"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param other the object to check against"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return if they are equal"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                || (other instanceof AddDirectoryCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 Arrays.equals(this.path, ((AddDirectoryCommand) other).path))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 this.name.equals(((AddDirectoryCommand) other).name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddMedicineCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.util.StringUtil.fromPathToString;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.medicine.Directory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * An command to add Medicine to the path specified. If no Medicine with same name yet exists, new medicine is added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * If medicine with same name exists and quantity is not specified, add the existing medicine to desire directory."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class AddMedicineCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addMed\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a medicine to the specified directory.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"If no quantity specified and medicine with the same name already exists in the storage, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"add this medicine to the directory specified.\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"[Directory path separated by \\\\] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"[Name of Medicine] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"[Price of Medicine] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"[(Optional)Amount of Medicine]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"root\\\\TCM\\\\herbs \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Healroot \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"3.41 50\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS_NEW_MED \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            \"New Medicine added: %1$s with quantity at %2$d and price at %3$s\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS_EXISTING_MED \u003d \"Existing %1$s, added to %2$s\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String MESSAGE_SETPRICE_IGNORED \u003d \"Warning: Overriding of price is ignored.\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private final int quantity;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private final String[] path;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private boolean possibleExisting;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private BigDecimal price;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public AddMedicineCommand(String[] path, String medicineName, BigDecimal price) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this(path, medicineName, 0, price, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public AddMedicineCommand(String[] path, String medicineName, int quantity, BigDecimal price) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this(path, medicineName, quantity, price, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public AddMedicineCommand(String[] path, String medicineName, int quantity,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                              BigDecimal price, boolean possibleExisting) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.name \u003d medicineName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.possibleExisting \u003d possibleExisting;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * If the command suggests there is a possiblity that medicine with same name already exists,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * check whether it is true."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * If medicine with same name already exists, add the medicine to desired directory"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Else, create new medicine to be place under the desired directory"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return A commandresult showing what is done"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Optional\u003cDirectory\u003e findDirectory \u003d model.findDirectory(path);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            if (!findDirectory.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                throw new CommandException(\"No Directory found at given path\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Optional\u003cMedicine\u003e findMedicine \u003d model.findMedicine(name);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            if (possibleExisting) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                if (findMedicine.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    findDirectory.get().addMedicine(findMedicine.get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    model.commitAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    String feedback \u003d String.format(MESSAGE_SUCCESS_EXISTING_MED,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                            findMedicine.get().toString(), fromPathToString(path));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    if (!findMedicine.get().getPrice().equals(price)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                        feedback +\u003d MESSAGE_SETPRICE_IGNORED;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    return new CommandResult(feedback);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            model.addMedicine(name, quantity, path, price);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_NEW_MED, name, quantity, price.toString()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new CommandException(ex.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                || (other instanceof AddMedicineCommand"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 name.equals(((AddMedicineCommand) other).name)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 quantity \u003d\u003d ((AddMedicineCommand) other).quantity"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 Arrays.equals(path, ((AddMedicineCommand) other).path)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 possibleExisting \u003d\u003d ((AddMedicineCommand) other).possibleExisting);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddPatientCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Command to add a patient record into QuickDocs"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class AddPatientCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"padd\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Patient toAdd;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public AddPatientCommand(Patient patient) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        toAdd \u003d patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (model.duplicatePatient(toAdd)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new CommandException(\"Patient with same NRIC already exist\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        model.addPatient(toAdd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Patient Added:\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(toAdd.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        CommandResult result \u003d new CommandResult(sb.toString(), false, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Patient getToAdd() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof AddPatientCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPatientCommand) other).getToAdd()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AlarmCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.medicine.Directory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * An Command setting alarm level for directory/medicine given by the path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class AlarmCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"alarm\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \": set the alarm level for a specific medicine / every medicine under a directory. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Medicine / directory path separated by \\\\ \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Alarm level\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"root\\\\TCM 30\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Alarm level is set to %1$d for:\\n%2$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private String[] path;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private int alarmLevel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public AlarmCommand(String[] path, int alarmLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.alarmLevel \u003d alarmLevel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Set the alarm level to the quantity specifies by the user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return A CommandResult showing the operation done"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Optional\u003cDirectory\u003e directory \u003d model.findDirectory(path);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            if (!directory.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                Optional\u003cMedicine\u003e medicine \u003d model.findMedicine(path);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                if (!medicine.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    throw new CommandException(\"No medicine/directory found at the given path\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                medicine.get().setThreshold(alarmLevel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, alarmLevel, medicine.get().toString()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                directory.get().setThresholdForAll(alarmLevel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, alarmLevel, directory.get().toString()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new CommandException(ex.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return other \u003d\u003d this || ("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                other instanceof AlarmCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 Arrays.equals(this.path, ((AlarmCommand) other).path)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 this.alarmLevel \u003d\u003d ((AlarmCommand) other).alarmLevel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ConsultationCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Creates a consultation session for the current patient"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class ConsultationCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"consult\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // current consultations can only be created by nric searches"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // will explore into other consultation creation (i.e. name, index) in future builds"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ConsultationCommand(String nric) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient \u003d model.getPatientByNric(nric);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new CommandException(\"No patient found to start consultation\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        model.createConsultation(patient);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String consultationResult \u003d \"Consultation session for: \" + nric + \" started\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new CommandResult(consultationResult);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof ConsultationCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 nric.equals(((ConsultationCommand) other).getNric()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DiagnosePatientCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Diagnosis;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Adds or replace diagnosis of current consultation session"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class DiagnosePatientCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"diagnose\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Diagnosis patientDiagnosis;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public DiagnosePatientCommand(Diagnosis diagnosis) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patientDiagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        model.diagnosePatient(patientDiagnosis);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new CommandResult(patientDiagnosis.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Diagnosis getPatientDiagnosis() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return patientDiagnosis;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof DiagnosePatientCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 patientDiagnosis.equals(((DiagnosePatientCommand) other).getPatientDiagnosis()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditPatientCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.PatientEditedFields;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Logic will execute this command to edit a patient\u0027s fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * based on what is entered by user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class EditPatientCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pedit\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private PatientEditedFields editedFields;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public EditPatientCommand(int index, PatientEditedFields editedFields) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.editedFields \u003d editedFields;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (model.isPatientListEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new CommandException(\"No patients records found to edit\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!model.checkValidIndex(index)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new CommandException(\"Invalid index for editing\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient \u003d model.getPatientAtIndex(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient editedPatient \u003d createEditedPatient(patient, editedFields);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (model.checkDuplicatePatientAfterEdit(index, editedPatient)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new CommandException(\"Edited NRIC will conflict with another existing entry\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        model.replacePatient(index, editedPatient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Patient edited:\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(editedPatient.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new CommandResult(sb.toString(), false, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public PatientEditedFields getEditedFields() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return editedFields;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Create a new patient object with the updated fields"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Patient createEditedPatient(Patient patient, PatientEditedFields editedFields) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d editedFields.getName().orElse(patient.getName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d editedFields.getNric().orElse(patient.getNric());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d editedFields.getEmail().orElse(patient.getEmail());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d editedFields.getAddress().orElse(patient.getAddress());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d editedFields.getContact().orElse(patient.getContact());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d editedFields.getGender().orElse(patient.getGender());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d editedFields.getDob().orElse(patient.getDob());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d editedFields.getTagList().orElse(patient.getTagList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof EditPatientCommand"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 index \u003d\u003d (((EditPatientCommand) other).getIndex())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 editedFields.equals(((EditPatientCommand) other).getEditedFields()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EndConsultationCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Prescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.record.ConsultationRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * End the current consultation session and store the details"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class EndConsultationCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"endconsult\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String NO_CONSULT_EXCEPTION \u003d \"There is no ongoing consultation\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String DIAGNOSIS_EXCEPTION \u003d \"No diagnosis given for current consultation yet\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String PRESCRIPTION_EXCEPTION \u003d \"No prescription given for current consultation yet\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String END_CONSULT_FEEDBACK \u003d \"Consultation for %s ended\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Consultation currentConsultation \u003d model.getCurrentConsultation();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (currentConsultation \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new CommandException(NO_CONSULT_EXCEPTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (currentConsultation.getDiagnosis() \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new CommandException(DIAGNOSIS_EXCEPTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (currentConsultation.getPrescriptions() \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new CommandException(PRESCRIPTION_EXCEPTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (Prescription prescription : currentConsultation.getPrescriptions()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            prescription.getMedicine().subtractQuantity(prescription.getQuantity());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            ConsultationRecord record \u003d new ConsultationRecord(prescription);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            model.addRecord(record, Clock.systemDefaultZone());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric patientNric \u003d currentConsultation.getPatient().getNric();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        model.endConsultation();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new CommandResult(String.format(END_CONSULT_FEEDBACK, patientNric.getNric()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListConsultationCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * List previous consultation sessions of a single patient"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class ListConsultationCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listconsult\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String ALIAS_WORD \u003d \"lc\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String NO_RECORDS \u003d \"No past consultation records found.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String INVALID_INDEX \u003d \"Index entered is invalid.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private int constructedBy;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ListConsultationCommand(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        constructedBy \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ListConsultationCommand(String value) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.nric \u003d value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        constructedBy \u003d 2;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (constructedBy \u003d\u003d 1 \u0026\u0026 (index \u003e model.getConsultationList().size() || index \u003c 1)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new CommandException(INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (constructedBy \u003d\u003d 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new CommandResult(model.listConsultation(index).toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cConsultation\u003e consultations \u003d model.listConsultation(nric);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String result \u003d listingConsultations(consultations);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new CommandResult(result);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * List past consultation records of a patient in text form"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String listingConsultations(ArrayList\u003cConsultation\u003e consultations) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Listing consultation records\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (consultations.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(NO_RECORDS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (Consultation con : consultations) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(1 + con.getIndex() + \") \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\" visit for \" + con.getDiagnosis().getAssessment() + \" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\" on \" + con.getSession().format(formatter));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof ListConsultationCommand"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 (getIndex() \u003d\u003d ((ListConsultationCommand) other).getIndex())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || getNric().equals(((ListConsultationCommand) other).getNric()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListPatientCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Logic will execute this command to display either"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * a specific patient\u0027s record or a list of patients"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * with the similar names, nric or tags"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class ListPatientCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"plist\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // to indicate which constructor was used to create this command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private int constructedBy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private int index \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ListPatientCommand(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        constructedBy \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ListPatientCommand(String search, boolean byName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (byName \u003d\u003d true) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            name \u003d search;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            constructedBy \u003d 2;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            nric \u003d search;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            constructedBy \u003d 3;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ListPatientCommand(Tag tag) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        constructedBy \u003d 4;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ListPatientCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        constructedBy \u003d 5;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (model.isPatientListEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new CommandException(\"No medical records to list\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (constructedBy \u003d\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (!model.checkValidIndex(index)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                throw new CommandException(\"Invalid index to find patient records\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Patient patient \u003d model.getPatientAtIndex(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return constructResult(patient.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (constructedBy \u003d\u003d 2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            String result \u003d model.findPatientsByName(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (result.equals(\"No patient record found\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                throw new CommandException(\"Invalid index to find patient records\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return constructResult(result);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (constructedBy \u003d\u003d 3) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            String result \u003d model.findPatientsByNric(nric);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (result.equals(\"No patient record found\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                throw new CommandException(\"Invalid index to find patient records\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return constructResult(result);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (constructedBy \u003d\u003d 4) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            String result \u003d model.findPatientsByTag(tag);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return constructResult(result);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String result \u003d model.listFiftyPatients();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return constructResult(result);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * format the list of patients or single patient record to a commandresult for display"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public CommandResult constructResult(String result) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Listing patients:\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(result);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new CommandResult(sb.toString(), false, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public int getConstructedBy() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return constructedBy;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof ListPatientCommand"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 checkAttributes((ListPatientCommand) other));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Check the attributes (name, nric, tag search sequences)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * of two ListPatientCommand object and see if they are the same"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean checkAttributes(ListPatientCommand other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        switch (other.getConstructedBy()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return index \u003d\u003d other.getIndex();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return name.equals(other.getName());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return nric.equals(other.getNric());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return tag.equals(other.getTag());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PrescriptionCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Prescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * This command allows the patient to administer the medicine and its quantity to the patient"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * during the consultation session"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class PrescriptionCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"prescribe\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String MEDICINE_NOT_FOUND \u003d \"Medicine: %s not found\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String INSUFFICIENT_MEDICINE \u003d \"Insufficient %s to prescribe\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ArrayList\u003cString\u003e medicineList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ArrayList\u003cInteger\u003e quantityList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public PrescriptionCommand(ArrayList\u003cString\u003e medicineList, ArrayList\u003cInteger\u003e quantityList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.medicineList \u003d medicineList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.quantityList \u003d quantityList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ArrayList\u003cString\u003e getMedicineList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return medicineList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ArrayList\u003cInteger\u003e getQuantityList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return quantityList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // check if there is a current consultation session"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (model.checkConsultation() \u003d\u003d false) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new CommandException(\"There is no ongoing consultation to prescribe medicine to\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cPrescription\u003e prescriptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (int i \u003d 0; i \u003c medicineList.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Optional\u003cMedicine\u003e foundMedicine \u003d model.findMedicine(medicineList.get(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (!foundMedicine.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                throw new CommandException(String.format(MEDICINE_NOT_FOUND, medicineList.get(i)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (quantityList.get(i) \u003e foundMedicine.get().getQuantity()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                throw new CommandException(String.format(INSUFFICIENT_MEDICINE, medicineList.get(i)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            prescriptions.add(new Prescription(foundMedicine.get(), quantityList.get(i)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        //for (int i \u003d 0; i \u003c medicineList.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        //    prescriptions.add(new Prescription(medicineList.get(i), quantityList.get(i)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        model.prescribeMedicine(prescriptions);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // model will call the addPrescription method in consultationmanager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"prescription:\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (Prescription prescription : prescriptions) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(prescription.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // for testing"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this || (other instanceof PrescriptionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 checkAttributes((PrescriptionCommand) other));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Check whether the content of medicine list and quantity list is the same for two"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * prescription commands"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean checkAttributes(PrescriptionCommand other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return Arrays.equals(getMedicineList().toArray(), other.getMedicineList().toArray())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 getQuantityList().equals(other.getQuantityList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PurchaseMedicineCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * An abstract command to purchase medicine"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public abstract class PurchaseMedicineCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"buyMed\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \": Purchases an existing medicine for certain quantity with certain cost. \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Medicine path separated by \\\\ \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Quantity of the purchase \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Cost of the purchase\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"root\\\\TCM\\\\Herbs\\\\herb1 50 600\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Or\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Medicine name \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Quantity of the purchase \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Cost of the purchase\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"herb1 50 600\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Purchase successful.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PurchaseMedicineViaPathCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.record.MedicinePurchaseRecord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * A command to record purchase of a medicine into the model"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class PurchaseMedicineViaPathCommand extends PurchaseMedicineCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private final String[] path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private final int quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private final BigDecimal cost;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public PurchaseMedicineViaPathCommand(String[] path, int quantity, BigDecimal cost) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Optional\u003cMedicine\u003e medicine \u003d model.findMedicine(path);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (!medicine.isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new CommandException(\"No such medicine found.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            medicine.get().addQuantity(quantity);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new CommandException(ex.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        model.addRecord(new MedicinePurchaseRecord(medicine.get(), quantity, cost), Clock.systemDefaultZone());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return other \u003d\u003d this || ("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                other instanceof PurchaseMedicineViaPathCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 Arrays.equals(path, ((PurchaseMedicineViaPathCommand) other).path)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 quantity \u003d\u003d ((PurchaseMedicineViaPathCommand) other).quantity"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 cost.equals(((PurchaseMedicineViaPathCommand) other).cost));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 1,
      "Xue-Chenyang": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PurchaseMedicineWoPathCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.record.MedicinePurchaseRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * A command to record purchase of a medicine without a path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class PurchaseMedicineWoPathCommand extends PurchaseMedicineCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private final String medicineName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private final int quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private final BigDecimal cost;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public PurchaseMedicineWoPathCommand(String medicineName, int quantity, BigDecimal cost) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.medicineName \u003d medicineName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Optional\u003cMedicine\u003e medicine \u003d model.findMedicine(medicineName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (!medicine.isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new CommandException(\"No such medicine found.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            medicine.get().addQuantity(quantity);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new CommandException(ex.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        model.addRecord(new MedicinePurchaseRecord(medicine.get(), quantity, cost), Clock.systemDefaultZone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return other \u003d\u003d this || ("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                other instanceof PurchaseMedicineWoPathCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 medicineName.equals(((PurchaseMedicineWoPathCommand) other).medicineName)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 quantity \u003d\u003d ((PurchaseMedicineWoPathCommand) other).quantity"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 cost.equals(((PurchaseMedicineWoPathCommand) other).cost));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 1,
      "Xue-Chenyang": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetConsultationFeeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.record.Statistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": " * Sets the consultation fee of the clinic."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "public class SetConsultationFeeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setconsultfee\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"setfee\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": sets the consultation fee to the desired value.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            + \"Parameters: FEE\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 30.00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public final BigDecimal fee;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public SetConsultationFeeCommand(BigDecimal fee) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        requireNonNull(fee);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.fee \u003d fee;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            model.setConsultationFee(fee);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            sb.append(\"Consultation fee has been successfully changed to $\" + Statistics.currencyFormat(fee));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            sb.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            throw new CommandException(ex.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (!(other instanceof SetConsultationFeeCommand)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        SetConsultationFeeCommand sc \u003d (SetConsultationFeeCommand) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return this.fee.compareTo(sc.fee) \u003d\u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StatisticsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.record.Statistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": " * Gets the Statistics of the  clinic."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "public class StatisticsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"statistics\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"stats\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": displays the statistics of the queried topic from the\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            + \"given date range.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            + \"Parameters: TOPIC MMYY [MMYY]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            + \"List of TOPICS: finances, consultations, all\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" all 0119\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private final String topic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private final YearMonth fromYearMonth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private final YearMonth toYearMonth;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public StatisticsCommand(String topic, YearMonth from, YearMonth to) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        requireNonNull(topic);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        requireNonNull(from);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        requireNonNull(to);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.topic \u003d topic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.fromYearMonth \u003d from;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.toYearMonth \u003d to;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Statistics stats \u003d model.getStatistics(this.topic, this.fromYearMonth, this.toYearMonth);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        sb.append(\"Displaying result for \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(this.topic)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\" from \")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(this.fromYearMonth.toString())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\" to \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(this.toYearMonth.toString())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\".\\n\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(stats.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (!(other instanceof StatisticsCommand)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        StatisticsCommand sc \u003d (StatisticsCommand) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return this.topic.equals(sc.topic)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                \u0026\u0026 this.toYearMonth.equals(sc.toYearMonth)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                \u0026\u0026 this.fromYearMonth.equals(sc.fromYearMonth);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewStorageCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.util.StringUtil.fromPathToString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.medicine.Directory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * A Command to view the detail of directory/medicine at the given path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class ViewStorageCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewMed\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Display the information of the directory/medicine \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"given by the path \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Directory/Medicine separated by \\\\\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            + \"root\\\\TCM\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS_DIRECTORY \u003d \"Directory found at %1$s\\n%2$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS_MEDICINE \u003d \"Medicine found at %1$s\\n%2$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private String[] path;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public ViewStorageCommand(String[] path) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Execute the command and return a CommandResult showing the detail"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param commandHistory the history of commands to record on"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return The CommandResult including the details of directory/medicine"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Optional\u003cDirectory\u003e directory \u003d model.findDirectory(path);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (!directory.isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Optional\u003cMedicine\u003e medicine \u003d model.findMedicine(path);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            if (!medicine.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                return new CommandResult(\"No directory/medicine found at the given path\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_MEDICINE, fromPathToString(path),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    medicine.get().viewDetail() + \"\\n\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS_DIRECTORY, fromPathToString(path),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                directory.get().viewDetail()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                || (other instanceof ViewStorageCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 Arrays.equals(this.path, ((ViewStorageCommand) other).path));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddDirectoryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.AddDirectoryCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * A parser to parse User input into AddDirectory Command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class AddDirectoryCommandParser implements Parser\u003cAddDirectoryCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static final Pattern AddDirectoryCommand_Argument_Format \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Pattern.compile(\"(?\u003crawPath\u003e\\\\S+)(?:\\\\s+)(?\u003cname\u003e[^\\\\s^\\\\\\\\]+)\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Parse user input into an AddDirectory Command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param args user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return A corresponding AddDirectory Command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public AddDirectoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDirectoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Matcher matcher \u003d AddDirectoryCommand_Argument_Format.matcher(trimmedArgs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDirectoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String rawPath \u003d matcher.group(\"rawPath\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String name \u003d matcher.group(\"name\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String[] path \u003d rawPath.split(\"\\\\\\\\\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return new AddDirectoryCommand(path, name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddMedicineCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.AddMedicineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * Parses input argument and returns an AddMedicineCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class AddMedicineCommandParser implements Parser\u003cAddMedicineCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static final Pattern AddMedicineCommand_Argument_Format \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Pattern.compile(\"(?\u003crawPath\u003e\\\\S+)(?:\\\\s+)(?\u003cmedicineInformation\u003e\\\\S.+)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static final Pattern MedicineInformation_Format \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e\\\\S+)(?:\\\\s+)(?\u003cprice\u003e\\\\d+\\\\.?\\\\d*)(?:\\\\s*)(?\u003cquantity\u003e\\\\d*)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * parse the given input to produce a AddMedicineCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param args the input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return An AddMedicineCommand for execution"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @throws ParseException if the user input does not conform the format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public AddMedicineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMedicineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        final Matcher pathMedicine \u003d AddMedicineCommand_Argument_Format.matcher(trimmedArgs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (!pathMedicine.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMedicineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        final String rawPath \u003d pathMedicine.group(\"rawPath\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        final String medicineInfo \u003d pathMedicine.group(\"medicineInformation\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String[] path \u003d rawPath.split(\"\\\\\\\\\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        final Matcher nameQuantity \u003d MedicineInformation_Format.matcher(medicineInfo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (!nameQuantity.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMedicineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String medicineName \u003d nameQuantity.group(\"name\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String quantity \u003d nameQuantity.group(\"quantity\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String price \u003d nameQuantity.group(\"price\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (quantity.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            return new AddMedicineCommand(path, medicineName, new BigDecimal(price));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            return new AddMedicineCommand(path, medicineName, Integer.parseInt(quantity), new BigDecimal(price));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddPatientParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.AddPatientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * parse arguments to create AddPatientCommand for logic to execute"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class AddPatientParser implements Parser\u003cAddPatientCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_DOB \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_CONTACT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Parse arguments to create an AddPatientCommand to be executed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @throws ParseException if input is not in the right format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public AddPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_DOB, PREFIX_ADDRESS, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                        PREFIX_CONTACT, PREFIX_GENDER, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        boolean prefixesPresent \u003d arePrefixesPresent(argMultimap, PREFIX_NAME,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                PREFIX_NRIC, PREFIX_DOB, PREFIX_ADDRESS, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                PREFIX_CONTACT, PREFIX_GENDER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        boolean preamblePresent \u003d argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!prefixesPresent || !preamblePresent) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new ParseException(\"Some details are left out, please retype the command\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(argMultimap.getValue(PREFIX_NAME).get().trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(argMultimap.getValue(PREFIX_NRIC).get().trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(argMultimap.getValue(PREFIX_EMAIL).get().trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(argMultimap.getValue(PREFIX_ADDRESS).get().trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(argMultimap.getValue(PREFIX_CONTACT).get().trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(argMultimap.getValue(PREFIX_GENDER).get().trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(argMultimap.getValue(PREFIX_DOB).get().trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            patient \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (IllegalArgumentException Iae) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new ParseException(Iae.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new AddPatientCommand(patient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * parse the list of tags entered into a list of tags to create the patient record with"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static ArrayList\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        final ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            tagList.add(parseTag(tagName));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return tagList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * returns a tag created from the command argument"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static Tag parseTag(String tag) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddAppCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.AddDirectoryCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.AddMedicineCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.AddPatientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddRemCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.AlarmCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.ConsultationCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.DiagnosePatientCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.EditPatientCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.EndConsultationCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListAppCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.ListConsultationCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.ListPatientCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListRemCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.PrescriptionCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.PurchaseMedicineCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.commands.SetConsultationFeeCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.ViewStorageCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case AddPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new AddPatientParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddAppCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddAppCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListAppCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListAppCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddRemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddRemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListRemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListRemCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case EditPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new EditPatientParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case ListPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new ListPatientParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case ConsultationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new ConsultationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case DiagnosePatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new DiagnosePatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        case StatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        case StatisticsCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            return new StatisticsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        case SetConsultationFeeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        case SetConsultationFeeCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            return new SetConsultationFeeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case PrescriptionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new PrescriptionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case EndConsultationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new EndConsultationCommand();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case ListConsultationCommand.ALIAS_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case ListConsultationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new ListConsultationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case AddMedicineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new AddMedicineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        case ViewStorageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new ViewStorageCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        case AlarmCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            return new AlarmCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        case AddDirectoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            return new AddDirectoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        case PurchaseMedicineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            return new PurchaseMedicineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 10,
      "simjiazhi": 41,
      "Xue-Chenyang": 12,
      "-": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AlarmCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.AlarmCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * A parser to parse user input to AlarmCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class AlarmCommandParser implements Parser\u003cAlarmCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static final Pattern AlarmCommand_Argument_Format \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Pattern.compile(\"(?\u003crawPath\u003e\\\\S+)(?:\\\\s+)(?\u003cthreshold\u003e\\\\d+)\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * To parse user input to AlarmCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param args the user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return A corresponding AlarmCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public AlarmCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AlarmCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        final Matcher matcher \u003d AlarmCommand_Argument_Format.matcher(trimmedArgs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AlarmCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String rawPath \u003d matcher.group(\"rawPath\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String threshold \u003d matcher.group(\"threshold\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String[] path \u003d rawPath.split(\"\\\\\\\\\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return new AlarmCommand(path, Integer.parseInt(threshold));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     *      *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ConsultationCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.ConsultationCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Parses the arguments to search for a patient to start consultation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class ConsultationCommandParser implements Parser\u003cConsultationCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ConsultationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NRIC);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new ParseException(\"Some details are left out, please retype the command\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new ConsultationCommand(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // parsing methods"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DiagnosePatientCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.DiagnosePatientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Assessment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Diagnosis;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Symptom;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Parse symptoms and assessment added by user to create a diagnosis for the patient"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class DiagnosePatientCommandParser implements Parser\u003cDiagnosePatientCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_ASSESSMENT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_SYMPTOM \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public DiagnosePatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ASSESSMENT, PREFIX_SYMPTOM);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ASSESSMENT, PREFIX_SYMPTOM)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new ParseException(\"Some details are left out, please retype the command\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assessment assessment \u003d new Assessment(argMultimap.getValue(PREFIX_ASSESSMENT).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cSymptom\u003e symptoms \u003d parseSymptoms(argMultimap.getAllValues(PREFIX_SYMPTOM));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new DiagnosePatientCommand(new Diagnosis(assessment, symptoms));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // parsing methods"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * consolidate the list of symptoms entered by user into a single arraylist"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static ArrayList\u003cSymptom\u003e parseSymptoms(Collection\u003cString\u003e symptoms) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        final ArrayList\u003cSymptom\u003e symptomList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (String symptom : symptoms) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            symptomList.add(new Symptom(symptom));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return symptomList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditPatientParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.EditPatientCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.PatientEditedFields;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * parse arguments to create EditPatientCommand for logic to execute"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class EditPatientParser implements Parser\u003cEditPatientCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_DOB \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_CONTACT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public EditPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_DOB, PREFIX_ADDRESS, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                        PREFIX_CONTACT, PREFIX_GENDER, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new ParseException(\"Some details are left out, please retype the command\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!argMultimap.getPreamble().trim().matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new ParseException(\"Index should be numeric\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        int index \u003d Integer.valueOf(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        PatientEditedFields editedFields \u003d createEditedFields(argMultimap);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (editedFields.checkEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new ParseException(\"Nothing to edit\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new EditPatientCommand(index, editedFields);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Create a PatientEditedFields object with arguments supplied in by user"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @return patientEditedFields object consisting of the valid changes user intend to make"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static PatientEditedFields createEditedFields(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        PatientEditedFields editedFields \u003d new PatientEditedFields();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            editedFields.setName(new Name(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            editedFields.setNric(new Nric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DOB).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            editedFields.setDob(new Dob(argMultimap.getValue(PREFIX_DOB).get()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            editedFields.setAddress(new Address(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            editedFields.setEmail(new Email(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTACT).isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            editedFields.setContact(new Contact(argMultimap.getValue(PREFIX_CONTACT).get()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            editedFields.setGender(new Gender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            ArrayList\u003cTag\u003e tagList \u003d parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            editedFields.setTagList(tagList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return editedFields;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * parse the list of tags entered into a list of tags to create the patient record with"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static ArrayList\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        final ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            tagList.add(parseTag(tagName));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return tagList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * returns a tag created from the command argument"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static Tag parseTag(String tag) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListConsultationCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.ListConsultationCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Parses argument to produce a ListConsultationCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class ListConsultationCommandParser implements Parser\u003cListConsultationCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String NO_LIST_ARGUMENTS \u003d \"Search parameters are missing for the listing of consultation\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String INVALID_INDEX \u003d \"Index should be numeric\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ListConsultationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NRIC);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty() \u0026\u0026 !argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new ParseException(NO_LIST_ARGUMENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (!argMultimap.getPreamble().trim().matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                throw new ParseException(INVALID_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            int index \u003d Integer.valueOf(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new ListConsultationCommand(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String nric \u003d argMultimap.getValue(PREFIX_NRIC).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new ListConsultationCommand(nric);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListPatientParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.ListPatientCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Parses arguments entered by user into a ListPatientCommand to list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * single or a list of patient records"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class ListPatientParser implements Parser\u003cListPatientCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ListPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_TAG);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (!argMultimap.getPreamble().trim().matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                throw new ParseException(\"Index should be numeric\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            int index \u003d Integer.valueOf(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new ListPatientCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            // list patient by name, can get multiple records"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            String name \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new ListPatientCommand(name, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            // list patient by name, can get multiple records"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            String nric \u003d argMultimap.getValue(PREFIX_NRIC).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new ListPatientCommand(nric, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            // list all patients with the same tag"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return new ListPatientCommand(new Tag(argMultimap.getValue(PREFIX_TAG).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // if nothing is supplied, will try to list all the patients, maximum 50;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new ListPatientCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PrescriptionCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.PrescriptionCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * parse arguments from user entered command to prescribe a list of medicine"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * to tackle the patient\u0027s current symptoms and illness"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class PrescriptionCommandParser implements Parser\u003cPrescriptionCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_MEDICINE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public PrescriptionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MEDICINE, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MEDICINE, PREFIX_QUANTITY)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new ParseException(\"Some details are left out, please retype the command\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cString\u003e medList \u003d (ArrayList\u003cString\u003e) argMultimap.getAllValues(PREFIX_MEDICINE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cInteger\u003e qtyList \u003d (ArrayList\u003cInteger\u003e) argMultimap.getAllValues(PREFIX_QUANTITY).stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                .map(Integer::valueOf).collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (medList.size() \u003e qtyList.size()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new ParseException(\"Some medicine do not have assigned quantity, please reenter command\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (medList.size() \u003c qtyList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new ParseException(\"Additional quantities specified, please retype the command\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new PrescriptionCommand(medList, qtyList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // parsing methods"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PurchaseMedicineCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.PurchaseMedicineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.PurchaseMedicineViaPathCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.PurchaseMedicineWoPathCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * Parse input arguments and returns a PurchaseMedicineCommand if input is in correct format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class PurchaseMedicineCommandParser implements Parser\u003cPurchaseMedicineCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static final Pattern PurchaseMedicineViaPathCommand_Argument_Format \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Pattern.compile(\"(?\u003crawPath\u003e\\\\S+)(?:\\\\s+)(?\u003cpurchaseInformation\u003e\\\\d.+)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static final Pattern PurchaseMedicineWOPathCommand_Argument_Format \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Pattern.compile(\"(?\u003cmedicineName\u003e[^(\\\\s)(\\\\\\\\)]+)(?:\\\\s+)(?\u003cpurchaseInformation\u003e\\\\d.+)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static final Pattern PurchaseInformation_Format \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Pattern.compile(\"(?\u003cquantity\u003e\\\\d+)(?:\\\\s+)(?\u003ccost\u003e\\\\d+\\\\.?\\\\d*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Parse the input string to form a PurchaseMedicineCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param args the input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return A PurchaseMedicineCommand corresponding to the input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @throws ParseException if the user input does not conform to the format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public PurchaseMedicineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PurchaseMedicineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        final Matcher medicinePurchaseViaPath \u003d PurchaseMedicineViaPathCommand_Argument_Format.matcher(trimmedArgs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        final Matcher medicinePurchaseWoPath \u003d PurchaseMedicineWOPathCommand_Argument_Format.matcher(trimmedArgs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (medicinePurchaseWoPath.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            final String medicineName \u003d medicinePurchaseWoPath.group(\"medicineName\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            final String purchaseInfo \u003d medicinePurchaseWoPath.group(\"purchaseInformation\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            final Matcher quantityCost \u003d PurchaseInformation_Format.matcher(purchaseInfo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            if (!quantityCost.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, PurchaseMedicineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            String quantity \u003d quantityCost.group(\"quantity\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            String cost \u003d quantityCost.group(\"cost\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            return new PurchaseMedicineWoPathCommand(medicineName, Integer.parseInt(quantity), new BigDecimal(cost));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } else if (medicinePurchaseViaPath.matches()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            final String rawPath \u003d medicinePurchaseViaPath.group(\"rawPath\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            final String purchaseInfo \u003d medicinePurchaseViaPath.group(\"purchaseInformation\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            String[] path \u003d rawPath.split(\"\\\\\\\\\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            final Matcher quantityCost \u003d PurchaseInformation_Format.matcher(purchaseInfo);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            if (!quantityCost.matches()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, PurchaseMedicineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            String quantity \u003d quantityCost.group(\"quantity\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            String cost \u003d quantityCost.group(\"cost\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            return new PurchaseMedicineViaPathCommand(path, Integer.parseInt(quantity), new BigDecimal(cost));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PurchaseMedicineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetConsultationFeeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.commands.SetConsultationFeeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": " * Parses input argument and returns a SetConsultationFeeCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "public class SetConsultationFeeCommandParser implements Parser\u003cSetConsultationFeeCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private static final String REGEX \u003d \"^\\\\$?\\\\d+(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetConsultationFeeCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * and returns a SetConsultationFeeCommand object for execution"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public SetConsultationFeeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        final String[] tokens \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        // check that there is only 1 argument"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (tokens.length !\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetConsultationFeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (!tokens[0].matches(REGEX)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetConsultationFeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        String token \u003d tokens[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (token.charAt(0) \u003d\u003d \u0027$\u0027) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            token \u003d token.substring(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return new SetConsultationFeeCommand(new BigDecimal(token));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StatisticsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": " * Parses input argument and returns a StatisticsCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "public class StatisticsCommandParser implements Parser\u003cStatisticsCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private static final String[] TOPICS \u003d {\"finances\", \"consultations\", \"all\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private static final String MMYY_REGEX \u003d \"^(0[1-9]|1[0-2])(\\\\d{2})$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private static final DateTimeFormatter MMYY_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatisticsCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * and returns a StatisticsCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public StatisticsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        final String[] tokens \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        // check if there are at least 2 arguments"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (tokens.length \u003c 2) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        // check if the topic is valid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (Arrays.stream(TOPICS).noneMatch(tokens[0]::equalsIgnoreCase)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        // check if the FROM MMYY is valid"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        String topic \u003d tokens[0].toLowerCase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (!tokens[1].matches(MMYY_REGEX)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        YearMonth fromYearMonth \u003d YearMonth.parse(tokens[1], MMYY_FORMATTER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        YearMonth toYearMonth \u003d fromYearMonth;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        // if there is a TO MMYY, check if it is valid"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (tokens.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            if (!tokens[2].matches(MMYY_REGEX)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            toYearMonth \u003d YearMonth.parse(tokens[2], MMYY_FORMATTER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return new StatisticsCommand(topic, fromYearMonth, toYearMonth);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewStorageCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.ViewStorageCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * A parser to return a ViewStorageCommand from user input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class ViewStorageCommandParser implements Parser\u003cViewStorageCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static final Pattern ViewStorageCommand_Argument_Format \u003d Pattern.compile(\"(?\u003crawpath\u003e\\\\S+)\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * A parser to return a ViewStorageCommand from user input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public ViewStorageCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewStorageCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Matcher matcher \u003d ViewStorageCommand_Argument_Format.matcher(trimmedArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewStorageCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String[] path \u003d matcher.group(\"rawpath\").split(\"\\\\\\\\\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return new ViewStorageCommand(path);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // quickdocs data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private final ArrayList\u003cPatient\u003e patients;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patients \u003d new ArrayList\u003cPatient\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // quickdocs related methods of AddressBook"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // patient and consultation module"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ArrayList\u003cPatient\u003e getPatients() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return patients;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void addPatient(Patient p) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patients.add(p);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void replacePatient(int index, Patient editedPatient) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        requireNonNull(editedPatient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patients.set(index - 1, editedPatient);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Replaces the contents of the patient list with {@code patients}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * {@code patients} must not contain duplicate persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patients.addAll(patients);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // appointment and reminder module"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // medicine and storage module"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // record and statistics module"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        setPatients(newData.getPatients());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Removes {@code tag} from {@code person} in this {@code AddressBook}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private void removeTagFromPerson(Tag tag, Person person) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (!newTags.remove(tag)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Person newPerson \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), newTags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        setPerson(person, newPerson);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Removes {@code tag} from all persons in this {@code AddressBook}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void removeTag(Tag tag) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        persons.forEach(person -\u003e removeTagFromPerson(tag, person));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 patients.equals(((AddressBook) other).patients));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 44,
      "Xue-Chenyang": 25,
      "-": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Diagnosis;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Prescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.medicine.Directory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.record.Statistics;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cReminder\u003e getFilteredReminderList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cReminder\u003e selectedReminderProperty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedReminder(Reminder reminder);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected person in the filtered person list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    Person getSelectedPerson();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Removes the given {@code tag} from all {@code Person}s."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    void deleteTag(Tag tag);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dQuickdocs methods\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    void initQuickDocsSampleData();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    QuickDocs getQuickDocs();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dMedicine Storage \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    void addMedicine(String medicineName, String[] path, BigDecimal price);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    void addMedicine(String medicineName, int quantity, String[] path, BigDecimal price);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    void addDirectory(String directoryName, String[] path);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    Optional\u003cMedicine\u003e findMedicine(String medicineName);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    Optional\u003cMedicine\u003e findMedicine(String[] path);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    void purchaseMedicine(String[] path, int quantity);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    void purchaseMedicine(String medicineName, int quantity);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    Optional\u003cDirectory\u003e findDirectory(String[] path);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dPatient module operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    boolean duplicatePatient(Patient patient);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    void addPatient(Patient patient);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    boolean isPatientListEmpty();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    boolean checkValidIndex(int index);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    Patient getPatientAtIndex(int index);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    boolean checkDuplicatePatientAfterEdit(int index, Patient editedPatient);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    void replacePatient(int index, Patient editedPatient);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    String findPatientsByName(String searchSequence);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    String listFiftyPatients();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    String findPatientsByNric(String searchSequence);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    String findPatientsByTag(Tag tag);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    Patient getPatientByNric(String nric);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dConsultation methods\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    void createConsultation(Patient patient);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cPatient\u003e getPatientWithNric(Nric nric);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    void diagnosePatient(Diagnosis diagnosis);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    boolean checkConsultation();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    void prescribeMedicine(ArrayList\u003cPrescription\u003e prescriptions);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    Consultation getCurrentConsultation();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    ArrayList\u003cConsultation\u003e getConsultationList();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    void endConsultation();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    ArrayList\u003cConsultation\u003e listConsultation(String value);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    Consultation listConsultation(int index);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dAppointment module operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean duplicateApp(Appointment app);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    void addApp(Appointment app);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    String listApp();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dReminder module operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean duplicateRem(Reminder rem);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    void addRem(Reminder rem);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    String listRem();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dRecord module operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    Statistics getStatistics(String topic, YearMonth from, YearMonth to);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void addRecord(Record record, Clock clock);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void setConsultationFee(BigDecimal fee);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 10,
      "simjiazhi": 70,
      "Xue-Chenyang": 23,
      "-": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.appointment.AppointmentManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.ConsultationManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Diagnosis;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Prescription;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.medicine.Directory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.medicine.MedicineManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.PatientManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.record.RecordManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.record.Statistics;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.reminder.ReminderManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleAppUtil;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SamplePatientsUtil;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleRemUtil;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // to handle QuickDocs operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private final QuickDocs quickDocs;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cReminder\u003e selectedReminder \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private final MedicineManager medicineManager;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private final PatientManager patientManager;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private final ConsultationManager consultationManager;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppointmentManager appointmentManager;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReminderManager reminderManager;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private final RecordManager recordManager;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.medicineManager \u003d new MedicineManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patientManager \u003d new PatientManager(addressBook.getPatients());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.consultationManager \u003d new ConsultationManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appointmentManager \u003d new AppointmentManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.reminderManager \u003d new ReminderManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.recordManager \u003d new RecordManager();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        quickDocs \u003d new QuickDocs();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        iniQuickDocs();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Initializes a ModelManager with the given addressBook quickdocs and userPrefs."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, QuickDocs quickDocs, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.quickDocs \u003d quickDocs;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        filteredPersons.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.medicineManager \u003d new MedicineManager();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        //this.patientManager \u003d new PatientManager(addressBook.getPatients());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patientManager \u003d quickDocs.getPatientManager();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.consultationManager \u003d quickDocs.getConsultationManager();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.appointmentManager \u003d new AppointmentManager();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.reminderManager \u003d new ReminderManager();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.recordManager \u003d new RecordManager();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        iniQuickDocs();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialise quickdocs with sample patient data"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void iniQuickDocs() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient[] samplePatients \u003d SamplePatientsUtil.getSamplePatients();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        //for (Patient patient : samplePatients) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        //   addPatient(patient);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment[] sampleAppointments \u003d SampleAppUtil.getSampleAppointments(samplePatients);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Appointment app : sampleAppointments) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            addApp(app);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Reminder[] sampleReminders \u003d SampleRemUtil.getSampleReminders();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Reminder rem : sampleReminders) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            addRem(rem);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Initialise quickdocs with sample patient data for testing purposes"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void initQuickDocsSampleData() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient[] samplePatients \u003d SamplePatientsUtil.getSamplePatients();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (Patient patient : samplePatients) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            addPatient(patient);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Appointment[] sampleAppointments \u003d SampleAppUtil.getSampleAppointments(samplePatients);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (Appointment app : sampleAppointments) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            addApp(app);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Reminder[] sampleReminders \u003d SampleRemUtil.getSampleReminders();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (Reminder rem : sampleReminders) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            addRem(rem);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public QuickDocs getQuickDocs() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return quickDocs;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        versionedAddressBook.removeTag(tag);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MedicineManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addMedicine(String medicineName, String[] path, BigDecimal price) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        medicineManager.addMedicine(medicineName, path, price);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addMedicine(String medicineName, int quantity, String[] path, BigDecimal price) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        medicineManager.addMedicine(medicineName, quantity, path, price);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addDirectory(String directoryName, String[] path) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        medicineManager.addDirectory(directoryName, path);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public Optional\u003cMedicine\u003e findMedicine(String medicineName) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return medicineManager.findMedicine(medicineName);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public Optional\u003cMedicine\u003e findMedicine(String[] path) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return medicineManager.findMedicine(path);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void purchaseMedicine(String[] path, int quantity) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        medicineManager.purchaseMedicine(path, quantity);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void purchaseMedicine(String medicineName, int quantity) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        medicineManager.purchaseMedicine(medicineName, quantity);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public Optional\u003cDirectory\u003e findDirectory(String[] path) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return medicineManager.findDirectory(path);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(reminderManager.getReminderList());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cReminder\u003e selectedReminderProperty() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedReminder;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson.getValue();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !filteredPersons.contains(person)) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (reminder !\u003d null \u0026\u0026 !reminderManager.getReminderList().contains(reminder)) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedReminder.setValue(reminder);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Person\u003e change) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dPatient module\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // for adding"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean duplicatePatient(Patient patient) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.patientManager.duplicatePatient(patient);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Add a patient to the quickdocs"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patientManager.addPatient(patient);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        quickDocs.indicateModification(true);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // for editing"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean isPatientListEmpty() {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.patientManager.isPatientListEmpty();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean checkValidIndex(int index) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.patientManager.checkValidIndex(index);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Patient getPatientAtIndex(int index) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.patientManager.getPatientAtIndex(index);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean checkDuplicatePatientAfterEdit(int index, Patient editedPatient) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.patientManager.checkDuplicatePatientAfterEdit(index, editedPatient);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Replace the patient at index with the edited version"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void replacePatient(int index, Patient editedPatient) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patientManager.replacePatient(index, editedPatient);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        quickDocs.indicateModification(true);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // for listing"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String findPatientsByName(String searchSequence) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.patientManager.findPatientsByName(searchSequence);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String listFiftyPatients() {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.patientManager.listFiftyPatients();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String findPatientsByNric(String searchSequence) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.patientManager.findPatientsByNric(searchSequence);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String findPatientsByTag(Tag tag) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.patientManager.findPatientsByTag(tag);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Patient getPatientByNric(String nric) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.patientManager.getPatientByNric(nric);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dConsultation module\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void createConsultation(Patient patient) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.consultationManager.createConsultation(patient);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cPatient\u003e getPatientWithNric(Nric nric) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.patientManager.getPatientWithNric(nric);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void diagnosePatient(Diagnosis diagnosis) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.consultationManager.diagnosePatient(diagnosis);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean checkConsultation() {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.consultationManager.checkConsultation();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void prescribeMedicine(ArrayList\u003cPrescription\u003e prescriptions) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.consultationManager.prescribeMedicine(prescriptions);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * end the current consultation session, no further edits can be made"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void endConsultation() {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.consultationManager.endConsultation();"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        quickDocs.indicateModification(true);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Consultation getCurrentConsultation() {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.consultationManager.getCurrentConsultation();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ArrayList\u003cConsultation\u003e getConsultationList() {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.consultationManager.getConsultationList();"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ArrayList\u003cConsultation\u003e listConsultation(String value) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.consultationManager.listConsultation(value);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Consultation listConsultation(int index) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return this.consultationManager.listConsultation(index);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dAppointment module\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean duplicateApp(Appointment app) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "        return appointmentManager.duplicateApp(app);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds an {@code Appointment} and its {@code Reminder} to their corresponding managers"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param app the {@code Appointment} to add"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addApp(Appointment app) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "        appointmentManager.add(app);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        Reminder remToAdd \u003d new Reminder(app);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "        addRem((remToAdd));"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "    public String listApp() {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        return appointmentManager.list();"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dReminder module\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean duplicateRem(Reminder rem) {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "        return reminderManager.duplicateReminder(rem);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addRem(Reminder rem) {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "        reminderManager.addReminder(rem);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "    public String listRem() {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        return reminderManager.list();"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dRecord module\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public Statistics getStatistics(String topic, YearMonth from, YearMonth to) {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return recordManager.getStatistics(topic, from, to);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public void addRecord(Record record, Clock clock) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        recordManager.record(record, clock);"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public void setConsultationFee(BigDecimal fee) { recordManager.setConsultationFee(fee); }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 18,
      "simjiazhi": 172,
      "Xue-Chenyang": 52,
      "-": 322
    }
  },
  {
    "path": "src/main/java/seedu/address/model/QuickDocs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.ConsultationManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.PatientManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Manages all managers of QuickDocs"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class QuickDocs {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private PatientManager patientManager \u003d new PatientManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ConsultationManager consultationManager \u003d new ConsultationManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private boolean isModified \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public PatientManager getPatientManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return patientManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void setPatientManager(PatientManager patientManager) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patientManager \u003d patientManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ConsultationManager getConsultationManager() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return consultationManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // indicate modification of quickdocs data"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean isModified() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return isModified;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void indicateModification(boolean state) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        isModified \u003d state;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // quickdocs method to access data of AddressBook"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    ArrayList\u003cPatient\u003e getPatients();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 6,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/Assessment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Represents the assessment of the illness during a consultation session"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class Assessment {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String REGEX_SYMPTOMS \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String SYMPTOMS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            \"Assessment should only contain alphanumeric characters and spaces but not blank\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String assessment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Assessment() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Assessment(String assessment) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!assessment.matches(REGEX_SYMPTOMS)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(SYMPTOMS_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.assessment \u003d assessment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String getAssessment() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return assessment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return assessment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof Assessment // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 assessment.equals(((Assessment) other).getAssessment())); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/Consultation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Stores the consultation details of a single session - both diagnosis and prescribed drugs"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class Consultation {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // for listing multiple consultations belonging to a single patient"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // default value is -1 until the consultation details are confirmed and the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // consultation session is stored in the consultationManager\u0027s list of consultations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private LocalDateTime session;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Patient patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Diagnosis diagnosis;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ArrayList\u003cPrescription\u003e prescriptions;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // empty constructor is used, attributes are assigned later"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // when diagnosing a patient, the patient detail is set"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // after symptoms and assessments are parsed in, diagnosis is set"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // when drugs are prescribed, then prescriptions is set"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // once all the fields are not null, only then the consultation can be stored"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Consultation(Patient patient) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.index \u003d -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.session \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Consultation() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //for json records creation of consultation"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Consultation(int index, Patient patient, LocalDateTime session, Diagnosis diagnosis,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                        ArrayList\u003cPrescription\u003e prescriptions) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.session \u003d session;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.prescriptions.addAll(prescriptions);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void setIndex(int index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public LocalDateTime getSession() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return session;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void setSession(LocalDateTime session) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.session \u003d session;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Patient getPatient() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return patient;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Diagnosis getDiagnosis() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return diagnosis;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void setDiagnosis(Diagnosis diagnosis) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ArrayList\u003cPrescription\u003e getPrescriptions() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return prescriptions;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void setPrescriptions(ArrayList\u003cPrescription\u003e prescriptions) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.prescriptions \u003d prescriptions;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Consultation for: \" + getPatient().getNric().getNric()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" NRIC: \" + getPatient().getName().getName() + \"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(getDiagnosis());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"prescription:\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (Prescription prescription : prescriptions) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(prescription);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/ConsultationManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Handle all model operations concerning with consultations"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class ConsultationManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ArrayList\u003cConsultation\u003e consultationList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Consultation currentConsultation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ConsultationManager() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.consultationList \u003d new ArrayList\u003cConsultation\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // add diagnosis methods"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Check if there is an ongoing consultation session"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean checkConsultation() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return currentConsultation !\u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * For reading in consultation records from json file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void addConsultation(Consultation consultation) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.consultationList.add(consultation);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Create a consultation session with the patient indicated"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void createConsultation(Patient patient) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (currentConsultation !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(\"There is already an ongoing consultation session\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        currentConsultation \u003d new Consultation(patient);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Adds or replace diagnosis on current consultation session"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void diagnosePatient(Diagnosis diagnosis) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (currentConsultation \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(\"There is no ongoing consultation session\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        currentConsultation.setDiagnosis(diagnosis);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void prescribeMedicine(ArrayList\u003cPrescription\u003e prescriptions) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        currentConsultation.setPrescriptions(prescriptions);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Consultation getCurrentConsultation() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return currentConsultation;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ArrayList\u003cConsultation\u003e getConsultationList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return consultationList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * End the current consultation and store it into the list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void endConsultation() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        currentConsultation.setIndex(consultationList.size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        consultationList.add(currentConsultation);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        currentConsultation \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * List consultation by name or nric"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ArrayList\u003cConsultation\u003e listConsultation(String value) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cConsultation\u003e consultationsFound \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (Consultation consult : consultationList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (consult.getPatient().getNric().getNric().equals(value)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                consultationsFound.add(consult);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return consultationsFound;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * return consultation session based on index"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Consultation listConsultation(int index) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return consultationList.get(index - 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/Diagnosis.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Represents a diagnosis given to the patient during a consultation session"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class Diagnosis {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Assessment assessment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ArrayList\u003cSymptom\u003e symptoms;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Diagnosis() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Diagnosis(Assessment assessment, ArrayList\u003cSymptom\u003e symptoms) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (symptoms.size() \u003c 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(\"Each diagnosis must have symptoms\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.assessment \u003d assessment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.symptoms \u003d symptoms;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Assessment getAssessment() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return assessment;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ArrayList\u003cSymptom\u003e getSymptoms() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return symptoms;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Diagnosis\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Assessment: \" + assessment + \"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (int i \u003d 0; i \u003c symptoms.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(i + 1 + \") \" + symptoms.get(i).getSymptom() + \"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // for testing"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof Diagnosis // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 assessment.equals(((Diagnosis) other).getAssessment())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 Arrays.equals("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                symptoms.toArray(), ((Diagnosis) other).getSymptoms().toArray())); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/Prescription.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Indicate the drug and the quantity administered to the person"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class Prescription {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String MEDICINE_CONSTRAINTS \u003d \"Medicine name can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //public static final String MEDICINE_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Medicine medicine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Prescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Prescription(Medicine medicine, int quantity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        //if (!medicine.matches(MEDICINE_REGEX)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        //    throw new IllegalArgumentException(MEDICINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (quantity \u003c 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(\"Amount administered must be a non-zero positive number\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.medicine \u003d medicine;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Medicine getMedicine() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return medicine;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return \"Medicine: \" + getMedicine().name + \" quantity: \" + getQuantity() + \"\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof Prescription"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 getQuantity() \u003d\u003d ((Prescription) other).getQuantity()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 getMedicine().equals(((Prescription) other).getMedicine()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/Symptom.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Represents a single symptom of a patient\u0027s diagnosis"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class Symptom {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String REGEX_SYMPTOMS \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String SYMPTOMS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            \"Symptoms should only contain alphanumeric characters and spaces but not blank\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String symptom;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Symptom() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Symptom(String symptom) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!symptom.matches(REGEX_SYMPTOMS)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(SYMPTOMS_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.symptom \u003d symptom;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String getSymptom() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return symptom;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return symptom;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof Symptom // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 symptom.equals(((Symptom) other).getSymptom())); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/Directory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.binarySearch;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * A model representing a folder-like directory storing subdirectories and medicines"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class Directory {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Directory name can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private ArrayList\u003cMedicine\u003e listOfMedicine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private ArrayList\u003cDirectory\u003e listOfDirectory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private Optional\u003cInteger\u003e threshold;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public Directory(String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        checkArgument(isValidDirectory(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.listOfDirectory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.listOfMedicine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.threshold \u003d Optional.empty();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private boolean isValidDirectory(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Add a medicine to this directory"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param medicine the medicine to add"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addMedicine(Medicine medicine) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        requireNonNull(medicine);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        checkArgument(isValidMedicine(medicine), \"medicine with the same name already in directory\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (threshold.isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            medicine.setThreshold(threshold.get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        listOfMedicine.add(medicine);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        listOfMedicine.sort(Comparator.comparing((Medicine med) -\u003e (med.name)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Add a new sub-directory under this directory"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param name the name of the new directory"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addDirectory(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        checkArgument(isValidNewDirectory(name), \"Directory with the same name already exists\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Directory newDirectory \u003d new Directory(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (threshold.isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            newDirectory.setThresholdForAll(threshold.get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        listOfDirectory.add(newDirectory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        listOfDirectory.sort(Comparator.comparing((Directory directory) -\u003e (directory.name)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Check whether there is no medicine with identical name in the directory"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param med the medicine that needs checking"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return if there is no existing medicine with the identical name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private boolean isValidMedicine(Medicine med) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        for (Medicine medicine : listOfMedicine) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            if (medicine.name.equals(med.name)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Checks whether there is no existing directory with identical name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param directoryName the directory name that need checking"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return if there is no existing sub-directory with identical name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private boolean isValidNewDirectory(String directoryName) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        for (Directory directory : listOfDirectory) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            if (directory.name.equals(directoryName)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * To find a medicine given the path"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param path the path of the medicine in the form of String[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param pointer the pointer indicating the position of the current directory"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return if the medicine exists under the given path, return a optional object of that medicine;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * else return Optional.empty()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public Optional\u003cMedicine\u003e findMedicine(String[] path, int pointer) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!path[pointer].equals(this.name)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new IllegalStateException(\"Path not corresponding to current directory.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (path.length \u003d\u003d pointer + 2) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            return searchAmongMedicine(path[pointer + 1]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Optional\u003cDirectory\u003e directory \u003d searchAmongDirectory(path[pointer + 1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            if (!directory.isPresent()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            return directory.get().findMedicine(path, pointer + 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * To find a directory given the path"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param path the path of the medicine in the form of String[]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param pointer the pointer indicating the position of the current directory"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return if the directory exists under the given path, return a optional object of that directory;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * else return Optional.empty()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public Optional\u003cDirectory\u003e findDirectory(String[] path, int pointer) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!path[pointer].equals(this.name)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new IllegalStateException(\"Path not corresponding to current directory.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (path.length \u003d\u003d pointer + 1) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            return Optional.of(this);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Optional\u003cDirectory\u003e directory \u003d searchAmongDirectory(path[pointer + 1]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            if (!directory.isPresent()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                return directory.get().findDirectory(path, pointer + 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private Optional\u003cMedicine\u003e searchAmongMedicine(String name) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Comparator\u003cString\u003e comparator \u003d Comparator.naturalOrder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return binarySearch(listOfMedicine, (Medicine med) -\u003e (comparator.compare(med.name, name)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private Optional\u003cDirectory\u003e searchAmongDirectory(String name) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Comparator\u003cString\u003e comparator \u003d Comparator.naturalOrder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return binarySearch(listOfDirectory, (Directory directory) -\u003e (comparator.compare(directory.name, name)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return \"- \" + name;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Return a String representation of the content of the directory"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public String viewDetail() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (!listOfDirectory.isEmpty()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            sb.append(\"List of sub-directories: \\n\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            for (Directory directory : listOfDirectory) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                sb.append(directory.toString() + \"\\n\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (!listOfMedicine.isEmpty()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            sb.append(\"List of Medicine under this directory: \\n\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            for (Medicine medicine : listOfMedicine) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                sb.append(medicine.viewDetail() + \"\\n\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (listOfMedicine.isEmpty() \u0026\u0026 listOfDirectory.isEmpty()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            sb.append(\"Empty directory\\n\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * set a default alarm level for all medicine under this directory and all medicine under its sub-directories"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * and so on"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param thres the alarm level"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void setThresholdForAll(int thres) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.threshold \u003d Optional.of(thres);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        for (Medicine medicine : listOfMedicine) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            medicine.setThreshold(thres);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        for (Directory directory : listOfDirectory) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            directory.setThresholdForAll(thres);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 2,
      "Xue-Chenyang": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/Medicine.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * Represents the name and history of quantities of a particular medicine"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class Medicine {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Medicine name can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String TO_STRING \u003d \"Medicine: %1$s, Quantity: %2$d, Price: %3$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static int defaultThreshold \u003d 50;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private boolean thresholdIsDefault \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private int threshold;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private BigDecimal price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Medicine() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        name \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Constructs a medicine with given name and default quantity 0."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param name The name of medicine"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public Medicine(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this(name, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Constructs a medicine with given name and given quantity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param name The name of medicine"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param amount The amount of medicine"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public Medicine(String name, int amount) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        checkArgument(isValidMedicine(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        setQuantity(amount);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static boolean isValidMedicine(String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void setQuantity(int amount) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (amount \u003c 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new IllegalArgumentException(\"Quantity must be positive\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        quantity \u003d amount;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Add a given amount to the existing storage"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param change the amount to be added;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addQuantity(int change) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (change \u003c\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new IllegalArgumentException(\"Change amount must be positive\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        int current \u003d this.getQuantity();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        setQuantity(current + change);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Subtract a given amount to the existing storage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Constraint: the subtracted amount must not be larger than existing storage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param change the amount to be subtracted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void subtractQuantity(int change) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (change \u003c\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new IllegalArgumentException(\"Change amount must be positive\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (change \u003e this.getQuantity()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new IllegalArgumentException(\"Insufficient storage\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        int current \u003d this.getQuantity();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        setQuantity(current - change);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        checkIfSufficient();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Called after each subtraction to detect if the storage is running low"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private void checkIfSufficient() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        int current \u003d this.getQuantity();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (thresholdIsDefault) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            if (current \u003c\u003d defaultThreshold) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                //Throws a reminder"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            if (current \u003c\u003d threshold) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                //Throws a reminder"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public int getThreshold() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return threshold;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public boolean isThresholdIsDefault() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return thresholdIsDefault;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void setThreshold(int threshold) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (threshold \u003c 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new IllegalArgumentException(\"threshold must be non-negative\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        thresholdIsDefault \u003d false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return String.format(TO_STRING, name, quantity, price.toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public String viewDetail() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public BigDecimal getPrice() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void setPrice(BigDecimal price) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 4,
      "Xue-Chenyang": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/MedicineManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.binarySearch;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * An model for overall storage of medicine"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class MedicineManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private Directory root;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private ArrayList\u003cMedicine\u003e listOfMedicine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public MedicineManager() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        root \u003d new Directory(\"root\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        listOfMedicine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * To add a medicine into a directory. If medicine with same name already exist, add that medicine to the directory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * If no medicine with same name exists, add a new medicine"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param medicineName name of medicine"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param path path the madicine to be added to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addMedicine(String medicineName, String[] path, BigDecimal price) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.addMedicine(medicineName, 0, path, price);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * To add a medicine to the storage by specifying the name of medicine, quantity of it and the path"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param medicineName name of medicine"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param quantity quantity of medicine"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param path the path to store to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addMedicine(String medicineName, int quantity, String[] path, BigDecimal price) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Optional\u003cMedicine\u003e findMedicine \u003d findMedicine(medicineName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (findMedicine.isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new IllegalArgumentException(\"Medicine with same name has already existed\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Optional\u003cDirectory\u003e directory \u003d root.findDirectory(path, 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (!directory.isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid path\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Medicine medicine \u003d new Medicine(medicineName, quantity);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        medicine.setPrice(price);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        listOfMedicine.add(medicine);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        listOfMedicine.sort(Comparator.comparing((Medicine x) -\u003e (x.name)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        directory.get().addMedicine(medicine);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Add a new directory under a directory specified by the path"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param directoryName the name of the new directory"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param path the path of the destination directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addDirectory(String directoryName, String[] path) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Optional\u003cDirectory\u003e directory \u003d root.findDirectory(path, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (!directory.isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid path\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        directory.get().addDirectory(directoryName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * find a medicine by its name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param medicineName the medicine name to search for"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @return Optional.empty() if there is no medicine with the desired name;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     *         Optional.of(E) if E\u0027s name matches the key"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public Optional\u003cMedicine\u003e findMedicine(String medicineName) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Comparator comparator \u003d Comparator.naturalOrder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return binarySearch("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                listOfMedicine, (Medicine med)-\u003e(comparator.compare(med.name, medicineName)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public Optional\u003cMedicine\u003e findMedicine(String[] path) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return root.findMedicine(path, 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public Optional\u003cDirectory\u003e findDirectory(String[] path) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        return root.findDirectory(path, 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * record a purchase of medicine in the medicine storage"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param path the path leading to the medicine"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param quantity quantity of medicine purchased"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void purchaseMedicine(String[] path, int quantity) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Optional\u003cMedicine\u003e medicine \u003d findMedicine(path);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (!medicine.isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new IllegalArgumentException(\"No medicine found at the given path\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        medicine.get().addQuantity(quantity);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * record a purchase of medicine in the medicine storage"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param medicineName the name of the medicine"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * @param quantity quantity of medicine purchased"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void purchaseMedicine(String medicineName, int quantity) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Optional\u003cMedicine\u003e medicine \u003d findMedicine(medicineName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        if (!medicine.isPresent()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new IllegalArgumentException(\"No medicine with the given name\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        medicine.get().addQuantity(quantity);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Represents the address of the patient"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String REGEX_ADDRESS \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            \"Addresses should only contain alphanumeric characters and spaces but not blank\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Address() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!address.matches(REGEX_ADDRESS)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 address.equals(((Address) other).getAddress())); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Contact.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Represents the local phone number of the patient, without country code"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class Contact {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String REGEX_CONTACT \u003d \"[\\\\d]{8}\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String CONTACT_CONSTRAINTS \u003d \"Local phone number should be 8 digits only\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String contact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Contact() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Contact(String contact) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!contact.matches(REGEX_CONTACT)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(CONTACT_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String getContact() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return contact;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return contact;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof Contact // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 contact.equals(((Contact) other).getContact())); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Dob.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Represents the patient\u0027s date of birth"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class Dob {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //public static final String REGEX_DOB \u003d \"(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/[0-9]{4}\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String REGEX_DOB \u003d \"[0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String DOB_CONSTRAINTS \u003d \"Date of Birth should be in YYYY-MM-DD format\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String FEBURARY_CONSTRAINT \u003d \"Feburary only have 28 or 29 days\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String LEAPYEAR_CONSTRAINT \u003d \"Only leap years have 29 Feb\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String THIRTYFIRST_CONSTRAINT \u003d \"The month entered does not have a 31st day\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private LocalDate dob;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Dob() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Dob(String dob) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!dob.matches(REGEX_DOB)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(DOB_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String[] splittedDob \u003d dob.split(\"-\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        boolean isLeapYear \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String month \u003d splittedDob[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String day \u003d splittedDob[2];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        int year \u003d Integer.valueOf(splittedDob[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if ((year % 4 \u003d\u003d 0 \u0026\u0026 year % 100 !\u003d 0) || year % 400 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            isLeapYear \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!isLeapYear \u0026\u0026 month.equals(\"2\") \u0026\u0026 Integer.valueOf(day) \u003e 28) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(LEAPYEAR_CONSTRAINT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (Integer.valueOf(month) \u003d\u003d 2 \u0026\u0026 Integer.valueOf(day) \u003e 29) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(FEBURARY_CONSTRAINT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        List\u003cInteger\u003e monthsWith31Days \u003d Arrays.asList(1, 3, 5, 7, 8, 10, 12);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!monthsWith31Days.contains(Integer.valueOf(month)) \u0026\u0026 Integer.valueOf(day) \u003d\u003d 31) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(THIRTYFIRST_CONSTRAINT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.dob \u003d LocalDate.parse(dob);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public LocalDate getDob() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return dob;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return dob.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof Dob // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 dob.toString().equals(((Dob) other).getDob())); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Represents email of a particular patient"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String REGEX_EMAIL \u003d \"^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,6}$\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String EMAIL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            \"Emails should follow standard email convention: username@domain\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Email() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!Pattern.compile(REGEX_EMAIL, Pattern.CASE_INSENSITIVE).matcher(email).find()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 email.equals(((Email) other).getEmail())); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Gender.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Represent the gender of the patient"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String REGEX_GENDER \u003d \"[MF]\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String GENDER_CONSTRAINTS \u003d \"Only 2 gender, M or F allowed\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Gender() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Gender (String gender) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!gender.matches(REGEX_GENDER)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 gender.equals(((Gender) other).getGender())); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Represents the full name of the person in the patient record"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String REGEX_NAME \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces but not blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Name() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Name (String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!name.matches(REGEX_NAME)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).getName())); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Nric.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Represents NRIC of the patient record"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String REGEX_NRIC1 \u003d \"^[ST]\\\\d{7}[ABCDEFGHIZJ]\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String REGEX_NRIC2 \u003d \"^[FG]\\\\d{7}[KLMNPQRTUWX]$\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String NRIC_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            \"NRIC starts with S,T,U or G followed by 7 digits and ends with a letter\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String nric;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Nric() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Nric (String nric) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!nric.matches(REGEX_NRIC1) \u0026\u0026 !nric.matches(REGEX_NRIC2)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new IllegalArgumentException(NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                || (other instanceof Nric // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 nric.equals(((Nric) other).getNric())); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Patient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Represents a patient record in QuickDocs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Nric nric;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Contact contact;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Dob dob;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ArrayList\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Patient() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Patient(Name name, Nric nric, Email email, Address address, Contact contact,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                   Gender gender, Dob dob, ArrayList\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.dob \u003d dob;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.tagList \u003d tagList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Contact getContact() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return contact;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Dob getDob() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return dob;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ArrayList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return tagList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Checks another Patient object, and if both have same nric, then its the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * same person"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Every inhabitant of Singapore have a unique NRIC, despite similar names"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!(other instanceof Patient)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient otherPatient \u003d (Patient) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return otherPatient.getNric().equals(nric);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Patient details for: \" + nric + \"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Name: \" + name + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Date of Birth: \" + dob + \"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Gender: \" + gender + \"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Contact: \" + contact + \"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Email: \" + email + \"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Address: \" + address + \"\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Tags: \" + tagList.toString() + \"\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/PatientEditedFields.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Stores changes to patient records"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class PatientEditedFields {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Nric nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Contact contact;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Dob dob;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ArrayList\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void setAddress(Address address) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Optional\u003cContact\u003e getContact() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return Optional.ofNullable(contact);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void setContact(Contact contact) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Optional\u003cDob\u003e getDob() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return Optional.ofNullable(dob);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void setDob(Dob dob) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.dob \u003d dob;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Optional\u003cArrayList\u003cTag\u003e\u003e getTagList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return Optional.ofNullable(tagList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void setTagList(ArrayList\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.tagList \u003d tagList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Checks if PatientEditedFields is empty"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean checkEmpty() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return name \u003d\u003d null \u0026\u0026 nric \u003d\u003d null \u0026\u0026 email \u003d\u003d null \u0026\u0026 address \u003d\u003d null"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u0026\u0026 contact \u003d\u003d null \u0026\u0026 gender \u003d\u003d null \u0026\u0026 dob \u003d\u003d null \u0026\u0026 tagList \u003d\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!(other instanceof PatientEditedFields)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        PatientEditedFields otherPatient \u003d (PatientEditedFields) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return checkNonNullFields((PatientEditedFields) other);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Only check the non null fields, and see if they are the same for two"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * PatientEditedFields"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean checkNonNullFields(PatientEditedFields other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if ((name !\u003d null \u0026\u0026 other.getName().isPresent()) \u0026\u0026 name.equals(other.getName())) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if ((nric !\u003d null \u0026\u0026 other.getNric().isPresent()) \u0026\u0026 nric.equals(other.getNric())) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if ((email !\u003d null \u0026\u0026 other.getEmail().isPresent()) \u0026\u0026 email.equals(other.getEmail())) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if ((address !\u003d null \u0026\u0026 other.getAddress().isPresent()) \u0026\u0026 address.equals(other.getAddress())) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if ((contact !\u003d null \u0026\u0026 other.getContact().isPresent()) \u0026\u0026 contact.equals(other.getContact())) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if ((gender !\u003d null \u0026\u0026 other.getGender().isPresent()) \u0026\u0026 gender.equals(other.getGender())) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if ((dob !\u003d null \u0026\u0026 other.getDob().isPresent()) \u0026\u0026 dob.equals(other.getDob())) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (tagList !\u003d null \u0026\u0026 other.getTagList().isPresent()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (!Arrays.equals(tagList.toArray(), other.getTagList().get().toArray())) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/PatientManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Handle all operations involving the models of patient module"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class PatientManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ArrayList\u003cPatient\u003e patientList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public PatientManager() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patientList \u003d new ArrayList\u003cPatient\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public PatientManager(ArrayList\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patientList \u003d patients;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dPatient addition methods\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Checks whether current patient to add have an conflict Nric entry"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean duplicatePatient(Patient patient) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (int i \u003d 0; i \u003c patientList.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (patientList.get(i).getNric().equals(patient.getNric())) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientList.add(patient);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public ArrayList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return patientList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dPatient edit methods\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean isPatientListEmpty() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return patientList.size() \u003c 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Check if index entered to edit patient exceeds the bounds of the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * list of patients"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean checkValidIndex(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (index - 1 \u003e\u003d patientList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (index - 1 \u003c 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Patient getPatientAtIndex(int index) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // index for patientlist should be 1 based"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return patientList.get(index - 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Check for patient records with same nric as the newly edited patient"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public boolean checkDuplicatePatientAfterEdit(int index, Patient editedPatient) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (int i \u003d 0; i \u003c patientList.size(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (i \u003d\u003d index - 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (patientList.get(i).getNric().equals(editedPatient.getNric())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void replacePatient(int index, Patient editedPatient) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientList.set(index - 1, editedPatient);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // listing methods"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * find all patients stored in patientlist that fulfills search criteria"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String findPatientsByName(String searchSequence) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cPatient\u003e foundPatients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cInteger\u003e foundPatientsIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (int i \u003d 0; i \u003c patientList.size(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Patient patient \u003d patientList.get(i);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (patient.getName().toString().toLowerCase()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    .matches(\"^\" + searchSequence.toLowerCase() + \".*\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                foundPatients.add(patient);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                foundPatientsIndexes.add(i + 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (foundPatients.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return \"No patient record found\\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (foundPatients.size() \u003e 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return formatMultiplePatients(foundPatients, foundPatientsIndexes);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return foundPatients.get(0).toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * find all patients stored in patientlist that fulfills search criteria"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String findPatientsByNric(String searchSequence) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cPatient\u003e foundPatients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cInteger\u003e foundPatientsIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (int i \u003d 0; i \u003c patientList.size(); i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Patient patient \u003d patientList.get(i);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (patient.getNric().toString().toLowerCase()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    .matches(\"^\" + searchSequence.toLowerCase() + \".*\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                foundPatients.add(patient);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                foundPatientsIndexes.add(i + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (foundPatients.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return \"No patient record found\\n\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (foundPatients.size() \u003e 1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return formatMultiplePatients(foundPatients, foundPatientsIndexes);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return foundPatients.get(0).toString();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * for default list, try to list up to 50 patients"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String listFiftyPatients() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cPatient\u003e foundPatients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cInteger\u003e foundPatientsIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (int i \u003d 0; i \u003c 49; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (i \u003e\u003d patientList.size()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Patient patient \u003d patientList.get(i);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            foundPatients.add(patient);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            foundPatientsIndexes.add(i + 1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return formatMultiplePatients(foundPatients, foundPatientsIndexes);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * For multiple patient records, a list of their names, nric, gender and dob will be displayed instead"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @param patients       patient objects in modelmanager that fulfills the search criteria"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @param patientIndexes index where object is stored in patientlist"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @return formatted list to be displayed"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static String formatMultiplePatients(ArrayList\u003cPatient\u003e patients, ArrayList\u003cInteger\u003e patientIndexes) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (int i \u003d 0; i \u003c patients.size(); i++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Patient patient \u003d patients.get(i);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(patientIndexes.get(i) + \") \" + patient.getName()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + patient.getNric()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + patient.getGender()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + patient.getDob()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            );"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * find all patients stored in patientlist that have the same tag defined by the user"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public String findPatientsByTag(Tag tag) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cPatient\u003e foundPatients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cInteger\u003e foundPatientsIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (int i \u003d 0; i \u003c patientList.size(); i++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Patient currentPatient \u003d patientList.get(i);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (currentPatient.getTagList().contains(tag)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                foundPatients.add(currentPatient);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                foundPatientsIndexes.add(i + 1);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (foundPatients.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return \"No patient record found\\n\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (foundPatients.size() \u003e 1) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return formatMultiplePatients(foundPatients, foundPatientsIndexes);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return foundPatients.get(0).toString();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // for consultation"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Patient getPatientByNric(String nric) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (int i \u003d 0; i \u003c patientList.size(); i++) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (patientList.get(i).getNric().toString().equals(nric)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                return patientList.get(i);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cPatient\u003e getPatientWithNric(Nric nric) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Patient patient : patientList) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            if (patient.getNric().equals(nric)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                return Optional.of(patient);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 225,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/ConsultationRecord.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.consultation.Prescription;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": " * Record representation of a consultation"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "public class ConsultationRecord extends Record {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Prescription prescription;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public ConsultationRecord(Prescription prescription) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.prescription \u003d prescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public Statistics toStatistics() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        BigDecimal consultationFee \u003d Statistics.getConsultationFee();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        int quantity \u003d prescription.getQuantity();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        BigDecimal medicinePrice \u003d prescription.getMedicine().getPrice();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        BigDecimal prescriptionFee;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (medicinePrice \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            prescriptionFee \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            prescriptionFee \u003d medicinePrice.multiply(new BigDecimal(quantity));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        // BigDecimal prescriptionFee \u003d prescription.getMedicine().getPrice().multiply(new BigDecimal(quantity));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return new Statistics(1, consultationFee.add(prescriptionFee), BigDecimal.ZERO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/ConsultationStatistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": " * s"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": "public class ConsultationStatistics extends Statistics {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public ConsultationStatistics(Statistics stats) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        super(stats);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        sb.append(\"Number of consultations: \")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(getNoOfConsultations())"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\\n\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/FinancesStatistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": " * Subclass of Statistics for"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": "public class FinancesStatistics extends Statistics {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public FinancesStatistics(Statistics stats) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        super(stats);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        sb.append(\"Revenue: \")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(Statistics.currencyFormat(getRevenue()))"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"Expenditure: \")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(Statistics.currencyFormat(getExpenditure()))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"Profit: \")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(Statistics.currencyFormat(getProfit()))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/MedicinePurchaseRecord.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": " * Record representation of a MedicinePurchase"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "public class MedicinePurchaseRecord extends Record {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private final Medicine medicine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private final int quantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private final BigDecimal cost;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public MedicinePurchaseRecord(Medicine medicine, int quantity) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.medicine \u003d medicine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.cost \u003d medicine.getPrice();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public MedicinePurchaseRecord(Medicine medicine, int quantity, BigDecimal cost) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.medicine \u003d medicine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public Statistics toStatistics() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        BigDecimal totalCost \u003d cost.multiply(new BigDecimal(quantity));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return new Statistics(0, BigDecimal.ZERO , totalCost);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/MonthRecord.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": " * This class holds the records for a month, and the statistics relevant to it."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "public class MonthRecord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Statistics stats;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private YearMonth yearMonth;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private int recordPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private ArrayList\u003cRecord\u003e records;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public MonthRecord(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.stats \u003d new Statistics();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.yearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.recordPointer \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return this.stats;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * Updates the statistics of the current month to match the records in records."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private void updateStatistics() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (recordPointer \u003c records.size()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            Statistics subStats \u003d Statistics.fromRecordList(this.records.subList(recordPointer, records.size()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            this.stats \u003d this.stats.merge(subStats);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        recordPointer \u003d records.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * Adds a single record to the MonthRecord, and updates the statistics."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * @param record A single Record object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public void addRecord(Record record) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.records.add(record);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.updateStatistics();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public int getNoOfRecords() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return this.records.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Record.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": " * Abstract class for more specific record class to extend from."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": " * Ensures that subclasses can be recorded by implementing record()."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "public abstract class Record {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public abstract Statistics toStatistics();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/RecordManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": " * Manager for the Record objects, segmented in months"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "public class RecordManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private static final YearMonth START_DATE \u003d YearMonth.of(2019, 1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private List\u003cMonthRecord\u003e monthRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private int totalNoOfRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public RecordManager() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        monthRecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        totalNoOfRecords \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public RecordManager(RecordManager toBeCopied) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        monthRecords \u003d toBeCopied.copyRecords();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        totalNoOfRecords \u003d toBeCopied.getTotalNoOfRecords();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private List\u003cMonthRecord\u003e copyRecords() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return this.monthRecords;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * Records the record into the system records, according to months."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * @param record Record object for storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * @param clock Clock object to obtain the month and year of when the record is recorded."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public void record(Record record, Clock clock) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        int idx \u003d getYearMonthIndex(YearMonth.now(clock));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.updateListSize(clock);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        MonthRecord monthRecord \u003d monthRecords.get(idx);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        monthRecord.addRecord(record);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        totalNoOfRecords++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private int getYearMonthIndex(YearMonth now) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return ((now.getYear() - START_DATE.getYear()) * 12)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                + (now.getMonthValue() - START_DATE.getMonthValue());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public int getTotalNoOfRecords() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return totalNoOfRecords;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * Updates the ArrayList of MonthRecord to the proper size according to the current time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * @param clock Clock used to get the month and year from"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private void updateListSize(Clock clock) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        YearMonth now \u003d YearMonth.now(clock);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        int expectedSize \u003d getYearMonthIndex(now) + 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        int sizeDifference \u003d expectedSize - monthRecords.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (sizeDifference \u003e 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            for (int i \u003d sizeDifference - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                YearMonth toAdd \u003d now.minusMonths((long) 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                this.monthRecords.add(new MonthRecord(toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public Statistics getStatistics(String topic, YearMonth from, YearMonth to) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Statistics stats \u003d new Statistics();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        int fromIdx \u003d getYearMonthIndex(from);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        int toIdx \u003d getYearMonthIndex(to);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        for (int idx \u003d fromIdx; idx \u003c\u003d toIdx; idx++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            stats \u003d stats.merge(monthRecords.get(idx).getStatistics());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Statistics toReturn;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        switch (topic) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        case \"finances\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            toReturn \u003d new FinancesStatistics(stats);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        case \"consultations\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            toReturn \u003d new ConsultationStatistics(stats);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        case \"all\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            toReturn \u003d stats;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public void setConsultationFee(BigDecimal cost) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Statistics.setConsultationFee(cost);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Statistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.text.NumberFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": " * This class holds the statistics relevant to the private clinic\u0027s needs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": " * A Statistics object is immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private static BigDecimal consultationFee \u003d BigDecimal.valueOf(30.00);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private int noOfConsultations;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private BigDecimal revenue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private BigDecimal expenditure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private BigDecimal profit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.noOfConsultations \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.revenue \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.expenditure \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.profit \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public Statistics(int noOfConsultations, BigDecimal revenue, BigDecimal expenditure) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.noOfConsultations \u003d noOfConsultations;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.revenue \u003d revenue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.expenditure \u003d expenditure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.profit \u003d revenue.subtract(expenditure);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public Statistics(Statistics stats) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.noOfConsultations \u003d stats.getNoOfConsultations();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.revenue \u003d stats.getRevenue();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.expenditure \u003d stats.getExpenditure();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        this.profit \u003d stats.getProfit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public int getNoOfConsultations() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return noOfConsultations;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public BigDecimal getRevenue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return revenue;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public BigDecimal getExpenditure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return expenditure;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public BigDecimal getProfit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return profit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * Merges this Statistics object with another Statistic object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * @param other Statistics to merge with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * @return A new Statistics object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public Statistics merge(Statistics other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return new Statistics("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                this.getNoOfConsultations() + other.getNoOfConsultations(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                this.getRevenue().add(other.getRevenue()),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                this.getExpenditure().add(other.getExpenditure()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * Calculates the statistics of a list of records"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * @param records A list of Record objects"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * @return A new Statistics object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public static Statistics fromRecordList(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Statistics stats \u003d new Statistics();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        for (int i \u003d 0; i \u003c records.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            stats \u003d stats.merge(records.get(i).toStatistics());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return stats;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public static BigDecimal getConsultationFee() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return Statistics.consultationFee;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public static void setConsultationFee(BigDecimal cost) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Statistics.consultationFee \u003d cost;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * Function to format BigDecimal objects to the locale\u0027s currency format."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * @param money BigDecimal object representing any amount of money."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * @return A String representation of the money formatted to the locale\u0027s currency format."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public static String currencyFormat(BigDecimal money) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bentwj"
        },
        "content": "         * Adapted from https://stackoverflow.com/questions/3395825/how-to-print-formatted-bigdecimal-values/8581941"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bentwj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return NumberFormat.getCurrencyInstance().format(money);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        sb.append(\"Number of consultations: \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(getNoOfConsultations())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"Revenue: \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(Statistics.currencyFormat(getRevenue()))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"Expenditure: \")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(Statistics.currencyFormat(getExpenditure()))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"Profit: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(Statistics.currencyFormat(getProfit()))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        if (!(other instanceof Statistics)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Statistics stats \u003d (Statistics) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        return this.getNoOfConsultations() \u003d\u003d stats.getNoOfConsultations()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                \u0026\u0026 this.getRevenue().equals(stats.getRevenue())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                \u0026\u0026 this.getExpenditure().equals(stats.getExpenditure())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                \u0026\u0026 this.getProfit().equals(stats.getProfit());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Tag() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.tagName \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 4,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedConsultation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Diagnosis;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Prescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Jackson-friendly version of {@link Consultation}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class JsonAdaptedConsultation {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Consultation\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private LocalDateTime session;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Patient patient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Diagnosis diagnosis;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ArrayList\u003cPrescription\u003e prescriptions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public JsonAdaptedConsultation(@JsonProperty(\"index\") int index,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                                   @JsonProperty(\"session\") LocalDateTime session,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                                   @JsonProperty(\"patient\") Patient patient,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                                   @JsonProperty(\"diagnosis\") Diagnosis diagnosis,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                                   @JsonProperty(\"prescriptions\") List\u003cPrescription\u003e prescriptions) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.session \u003d session;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.prescriptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (prescriptions !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            this.prescriptions.addAll(prescriptions);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Converts a given {@code Consultation} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public JsonAdaptedConsultation(Consultation source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.index \u003d source.getIndex();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.session \u003d source.getSession();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patient \u003d source.getPatient();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.diagnosis \u003d source.getDiagnosis();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.prescriptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.prescriptions.addAll(source.getPrescriptions());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @throws IllegalValueException    if there were any data constraints violated in the tags."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @throws IllegalArgumentException if there were any data constraints violated for patient fields."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Consultation toModelType() throws IllegalValueException, IllegalArgumentException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        int modelIndex \u003d this.index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        LocalDateTime modelSession \u003d this.session;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient modelPatient \u003d this.patient;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Diagnosis modelDiagnosis \u003d this.diagnosis;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cPrescription\u003e prescriptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        prescriptions.addAll(this.prescriptions);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Consultation consultation \u003d new Consultation(modelPatient);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        consultation.setIndex(modelIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        consultation.setSession(modelSession);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        consultation.setDiagnosis(modelDiagnosis);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        consultation.setPrescriptions(prescriptions);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return consultation;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPatient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * Jackson-friendly version of {@link Patient}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class JsonAdaptedPatient {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String nric;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String contact;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String dob;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private List\u003cJsonAdaptedTag\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public JsonAdaptedPatient(@JsonProperty(\"name\") String name, @JsonProperty(\"nric\") String nric,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                              @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                              @JsonProperty(\"contact\") String contact, @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                              @JsonProperty(\"dob\") String dob,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.dob \u003d dob;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            this.tagList.addAll(tagged);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public JsonAdaptedPatient(Patient source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.name \u003d source.getName().getName();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.nric \u003d source.getNric().getNric();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.email \u003d source.getEmail().getEmail();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.address \u003d source.getAddress().getAddress();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.contact \u003d source.getContact().getContact();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.gender \u003d source.getGender().getGender();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.dob \u003d source.getDob().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        tagList.addAll(source.getTagList().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the tags."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @throws IllegalArgumentException if there were any data constraints violated for patient fields."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Patient toModelType() throws IllegalValueException, IllegalArgumentException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (JsonAdaptedTag tag : tagList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        final Contact modelContact \u003d new Contact(contact);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        final Dob modelDob \u003d new Dob(dob);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        final ArrayList\u003cTag\u003e modelTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (JsonAdaptedTag tag : tagList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            modelTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new Patient(modelName, modelNric, modelEmail, modelAddress, modelContact, modelGender,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                modelDob, modelTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonQuickDocsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.QuickDocs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * A class to access QuickDocs data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class JsonQuickDocsStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonQuickDocsStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Path filePath \u003d Paths.get(\"data\" , \"quickdocs.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Path getFilePath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Optional\u003cQuickDocs\u003e readQuickDocs() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Optional\u003cJsonSerializableQuickDocs\u003e jsonQuickDocs \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                filePath, JsonSerializableQuickDocs.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        if (!jsonQuickDocs.isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            return Optional.of(jsonQuickDocs.get().toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * save QuickDocs data to disk"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void saveQuickDocs(QuickDocs quickDocs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        requireNonNull(quickDocs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableQuickDocs(quickDocs), filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // quickdocs lists of items"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // for quickdocs, populate list here"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patients.addAll(source.getPatients().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @throws IllegalArgumentException if there were any data contraints violated for patient fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException, IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // Note: for quick docs, write a loop to change jsonadapted class object to normal object to add to ab"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            //if (addressBook.hasPerson(patient)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            //    throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            addressBook.addPatient(patient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 18,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableQuickDocs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.QuickDocs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.ConsultationManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.PatientManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * QuickDocs serializable to json format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class JsonSerializableQuickDocs {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patients list contains duplicate patient(s)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private final List\u003cJsonAdaptedPatient\u003e patientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private final List\u003cJsonAdaptedConsultation\u003e consultationList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public JsonSerializableQuickDocs(@JsonProperty(\"patientList\") List\u003cJsonAdaptedPatient\u003e patients) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patientList.addAll(patients);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Converts a given {@code QuickDocs} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public JsonSerializableQuickDocs(QuickDocs source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientList.addAll(source.getPatientManager().getPatientList()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                .stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        consultationList.addAll(source.getConsultationManager().getConsultationList()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                .stream().map(JsonAdaptedConsultation::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Converts this address book into the model\u0027s {@code QuickDocs} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @throws IllegalValueException    if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @throws IllegalArgumentException if there were any data contraints violated for patient fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public QuickDocs toModelType() throws IllegalValueException, IllegalArgumentException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        QuickDocs quickDocs \u003d new QuickDocs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        PatientManager patientManager \u003d quickDocs.getPatientManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (JsonAdaptedPatient jsonAdaptedPatient : patientList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            // handle duplicates"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            if (patientManager.duplicatePatient(patient)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            patientManager.addPatient(patient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ConsultationManager consultationManager \u003d quickDocs.getConsultationManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (JsonAdaptedConsultation jsonAdaptedConsultation : consultationList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Consultation consultation \u003d jsonAdaptedConsultation.toModelType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            consultationManager.addConsultation(consultation);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // loop for medicine, appointment, and records"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return quickDocs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.QuickDocs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": " * API of the MedicineManager component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // for quickdocs"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    Optional\u003cQuickDocs\u003e readQuickDocs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    void saveQuickDocs(QuickDocs quickDocs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 6,
      "Xue-Chenyang": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.QuickDocs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private JsonQuickDocsStorage quickDocsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.quickDocsStorage \u003d new JsonQuickDocsStorage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.backupAddressBook(addressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d QuickDocs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Read QuickDocs data file and retrieve data from json format"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public Optional\u003cQuickDocs\u003e readQuickDocs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + quickDocsStorage.getFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return quickDocsStorage.readQuickDocs();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void saveQuickDocs(QuickDocs quickDocs) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + quickDocsStorage.getFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        quickDocsStorage.saveQuickDocs(quickDocs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 25,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        { \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\" };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        initTags(person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Creates the tag labels for {@code person}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private void initTags(Person person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 24,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final String TOTAL_PERSONS \u003d \"Total person stored: %d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static ReadOnlyAddressBook addressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Label totalPersons;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        totalPersons.setText(String.format(TOTAL_PERSONS, addressBook.getPersonList().size()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        totalPersons.setText(String.format(TOTAL_PERSONS, addressBook.getPersonList().size()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 8,
      "-": 69
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "#tags .black {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 50,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/RootLayout.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"quickdocs.RootLayoutController\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        \u003cMenuBar layoutY\u003d\"2.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            \u003cmenus\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Close\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"About\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            \u003c/menus\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"14.0\" layoutY\u003d\"561.0\" onKeyPressed\u003d\"#enterInput\" onKeyReleased\u003d\"#checkInput\" promptText\u003d\"Enter command\" AnchorPane.bottomAnchor\u003d\"15.0\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        \u003cTextArea fx:id\u003d\"display\" layoutX\u003d\"15.0\" layoutY\u003d\"32.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"400.0\" wrapText\u003d\"true\" AnchorPane.bottomAnchor\u003d\"100.0\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"250.0\" AnchorPane.topAnchor\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"reminderList\" layoutX\u003d\"560.0\" layoutY\u003d\"50.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"225.0\" AnchorPane.bottomAnchor\u003d\"100.0\" AnchorPane.rightAnchor\u003d\"15.0\" AnchorPane.topAnchor\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        \u003cTextArea fx:id\u003d\"inputFeedback\" editable\u003d\"false\" layoutX\u003d\"14.0\" layoutY\u003d\"352.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"200.0\" wrapText\u003d\"true\" AnchorPane.bottomAnchor\u003d\"50.0\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 30,
      "-": 2
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "  \u003cLabel fx:id\u003d\"syncStatus\" GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "  \u003cLabel fx:id\u003d\"totalPersons\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 4,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/patientAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "  \"persons\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "  \"patients\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"name\" : \"Peter Tan\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"nric\" : \"S9123456A\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"email\" : \"ptan@gmail.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"address\" : \"1 Simei Road\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"contact\" : \"91234123\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"gender\" : \"M\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"dob\" : \"1993-02-01\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"tagList\" : [ \"diabetes\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"name\" : \"Piper Wright\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"nric\" : \"S9234568C\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"email\" : \"pwright@gmail.com\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"address\" : \"3 diamond city\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"contact\" : \"93333333\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"gender\" : \"F\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"dob\" : \"1995-03-03\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"tagList\" : [ \"highbloodpressure\" ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"name\" : \"Perry Ng\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"nric\" : \"S9234567B\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"email\" : \"ssh@gmail.com\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"address\" : \"2 Shenton Road\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"contact\" : \"92222222\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"gender\" : \"M\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"dob\" : \"1995-02-02\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    \"tagList\" : [ \"highbloodpressure\", \"diabetes\" ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 31
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPatientsAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "  \"persons\": [],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "  \"patients\": [{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"name\": \"A|ice\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"nric\": \"S1111111A\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"email\": \"alice@gmail.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"address\": \"1 Admiralty Road\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"contact\": \"91111111\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"gender\": \"F\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"dob\": \"1990-01-01\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"tagList\": ["
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        \"diabetes\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 15
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPatientsAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "  \"persons\": [],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "  \"patients\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"name\": \"Alice\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"nric\": \"S1111111A\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"email\": \"alice@gmail.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"address\": \"1 Admiralty Road\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"contact\": \"91111111\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"gender\": \"F\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"dob\": \"1990-01-01\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"tagList\": ["
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        \"diabetes\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    },"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"name\": \"Bob\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"nric\": \"S2222222A\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"email\": \"bob@gmail.com\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"address\": \"1 Bishan Road\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"contact\": \"92222222\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"gender\": \"M\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"dob\": \"1985-02-02\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"tagList\": ["
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        \"Gout\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    },"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"name\": \"Chuck\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"nric\": \"S3333333C\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"email\": \"chuck@gmail.com\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"address\": \"1 Clementi Road\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"contact\": \"93333333\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"gender\": \"M\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"dob\": \"1980-03-03\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      \"tagList\": ["
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        \"Highbloodpressure\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                jsonAddressBookStorage.saveAddressBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            throw new AssertionError(\"MedicineManager file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 1,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddAppCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddAppCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        model.initQuickDocsSampleData();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Nric nric \u003d new Nric(\"S9534568C\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2019-10-23\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"16:00\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"17:00\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String comment \u003d \"This is a comment\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPatient\u003e patientToAdd \u003d model.getPatientWithNric(nric);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment toAdd \u003d new Appointment(patientToAdd.get(), date, start, end, comment);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addApp(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeValidAddAppointment() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Nric nric \u003d new Nric(\"S9367777A\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2019-10-23\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"16:00\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"17:00\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String comment \u003d \"This is a comment\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddAppCommand(nric, date, start, end, comment)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .execute(model, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPatient\u003e patientToAdd \u003d model.getPatientWithNric(nric);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment toAdd \u003d new Appointment(patientToAdd.get(), date, start, end, comment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Appointment added:\\n\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(toAdd.toString() + \"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(sb.toString(), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeDuplicateAddAppointment() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Nric nric \u003d new Nric(\"S9534568C\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2019-10-23\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"16:00\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"17:00\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String comment \u003d \"This is a comment\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddAppCommand addAppCommand \u003d new AddAppCommand(nric, date, start, end, comment);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddAppCommand.MESSAGE_DUPLICATE_APP);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        addAppCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Nric nricA \u003d new Nric(\"S9534568C\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Nric nricB \u003d new Nric(\"S9367777A\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2019-10-23\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"16:00\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"17:00\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String comment \u003d \"This is a comment\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        AddAppCommand addAppA \u003d new AddAppCommand(nricA, date, start, end, comment);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        AddAppCommand addAppB \u003d new AddAppCommand(nricB, date, start, end, comment);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAppA.equals(addAppA));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddAppCommand addAppACopy \u003d new AddAppCommand(nricA, date, start, end, comment);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAppA.equals(addAppACopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAppA.equals(1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAppA.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAppA.equals(addAppB));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 3,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddDirectoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class AddDirectoryCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static final String[] typicalDirectoryName \u003d new String[] {\"TCM\", \"Herbs\", \"Cheap\", \"Outdated\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addValidDirectoryToValidPath_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new AddDirectoryCommand(new String[] {\"root\"}, typicalDirectoryName[0])"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                            .execute(model, commandHistory);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    commandResult.getFeedbackToUser(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    String.format(\"New directory with name \\\"%1$s\\\" added to %2$s\\n\", typicalDirectoryName[0], \"root\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertTrue(model.findDirectory(new String[] {\"root\", typicalDirectoryName[0]}).isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addValidDirectoryToInvalidPath_throwCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new AddDirectoryCommand(new String[] {\"rooot\"}, typicalDirectoryName[1])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                            .execute(model, commandHistory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(\"Path not corresponding to current directory.\" , ex.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addValidDirectoryToNonExistingDirectory_returnsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new AddDirectoryCommand(new String[] {\"root\", typicalDirectoryName[0]}, typicalDirectoryName[1])"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                        .execute(model, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(\"Invalid path\", ex.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addDuplicateDirectory_returnsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            addValidDirectoryToValidPath_success();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new AddDirectoryCommand(new String[] {\"root\"}, typicalDirectoryName[0])"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                            .execute(model, commandHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(\"Directory with the same name already exists\", ex.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddMedicineCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class AddMedicineCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private Model modelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private String medicineName \u003d \"panaddol\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private int quantity \u003d 50;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private String[] path \u003d new String[] {\"root\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private String[] invalidPath \u003d new String[] {\"root\", \"TCM\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private BigDecimal price \u003d BigDecimal.valueOf(37.9);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addValidMedicine() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new AddMedicineCommand(path, medicineName, quantity, price).execute(modelManager, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Medicine medicine \u003d new Medicine(medicineName, quantity);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            medicine.setPrice(price);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(String.format(AddMedicineCommand.MESSAGE_SUCCESS_NEW_MED,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                        medicineName, quantity, price.toString()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addValidMedicineWithInvalidPath_throwCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new AddMedicineCommand(invalidPath, medicineName, quantity, price).execute(modelManager, history);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(\"No Directory found at given path\", ex.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addDuplicateMedicine_throwCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        addValidMedicine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new AddMedicineCommand(path, medicineName, quantity, price).execute(modelManager, history);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(\"Medicine with same name has already existed\", ex.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addDuplicateMedicineWoQuanity_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        addValidMedicine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            modelManager.addDirectory(\"test\", new String[] {\"root\"});"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new AddMedicineCommand(new String[] {\"root\", \"test\"}, medicineName, price)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                            .execute(modelManager, history);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(\"Existing Medicine: \" + medicineName"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                            + \", Quantity: 50, Price: 37.9, added to root\\\\test\\n\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addDuplicateMedicineWoQuanityWithDiffPrice_successWithWarning() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        addValidMedicine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            modelManager.addDirectory(\"test\", new String[] {\"root\"});"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new AddMedicineCommand(new String[] {\"root\", \"test\"}, medicineName, BigDecimal.valueOf(22))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                            .execute(modelManager, history);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(\"Existing Medicine: \" + medicineName"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                            + \", Quantity: 50, Price: 37.9, added to root\\\\test\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                            + AddMedicineCommand.MESSAGE_SETPRICE_IGNORED,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddPatientCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class AddPatientCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private final CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.addPatient(patient1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void executeValidAddPatient() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456B\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            CommandResult commandResult \u003d new AddPatientCommand(patient1).execute(modelManager, history);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"Patient Added:\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(patient1.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertEquals(sb.toString(), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void executeDuplicateAddPatient() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            CommandResult commandResult \u003d new AddPatientCommand(patient1).execute(modelManager, history);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertEquals(ce.getMessage(), \"Patient with same NRIC already exist\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AlarmCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class AlarmCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        model.addDirectory(\"TCM\", new String[] {\"root\"});"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        model.addMedicine(\"testMed\", new String[] {\"root\", \"TCM\"}, BigDecimal.valueOf(37.0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void setAlarmForValidDirectory_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new AlarmCommand(new String[] {\"root\", \"TCM\"}, 20).execute(model, commandHistory);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(String.format(AlarmCommand.MESSAGE_SUCCESS, 20, \"- TCM\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void setAlarmForValidMedicine_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new AlarmCommand(new String[] {\"root\", \"TCM\", \"testMed\"}, 20).execute(model, commandHistory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(String.format(AlarmCommand.MESSAGE_SUCCESS, 20,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    String.format(Medicine.TO_STRING, \"testMed\", 0, 37.0)), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void setAlarmForNonExistingPath_throwCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new AlarmCommand(new String[] {\"root\", \"TCM\", \"medTest\"}, 40).execute(model, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(\"No medicine/directory found at the given path\", ex.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public static final String VALID_TAG_UNUSED \u003d \"unused\"; // do not use this tag when creating a person"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 1,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ConsultationCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class ConsultationCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private final CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.addPatient(patient1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void createConsultation() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.createConsultation(modelManager.getPatientAtIndex(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // command exception thrown when consultation is recreated with a ongoing session"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                modelManager.createConsultation(modelManager.getPatientAtIndex(1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void executeTest() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ConsultationCommand cr \u003d new ConsultationCommand(\"S9123456B\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(CommandException.class, ()-\u003ecr.execute(modelManager, history));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ConsultationCommand cr2 \u003d new ConsultationCommand(\"S9123456A\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            String consultationResult \u003d \"Consultation session for: \" + \"S9123456A\" + \" started\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.assertEquals(cr2.execute(modelManager, history).getFeedbackToUser(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    new CommandResult(consultationResult).getFeedbackToUser());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.fail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DiagnosePatientCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Assessment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Diagnosis;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Symptom;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class DiagnosePatientCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private final CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.addPatient(patient1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void diagnosePatient() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // no consultation session"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String input \u003d \" a/migrane s/constant headache s/blurred vision\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assessment assessment \u003d new Assessment(\"migrane\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cSymptom\u003e symptoms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        symptoms.add(new Symptom(\"constant headache\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        symptoms.add(new Symptom(\"blurred vision\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                modelManager.diagnosePatient(new Diagnosis(assessment, symptoms)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void executeTest() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \"diagnose a/migrane s/constant headache s/blurred vision\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assessment assessment \u003d new Assessment(\"migrane\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cSymptom\u003e symptoms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        symptoms.add(new Symptom(\"constant headache\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        symptoms.add(new Symptom(\"blurred vision\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Diagnosis diagnosis \u003d new Diagnosis(assessment, symptoms);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        DiagnosePatientCommand command \u003d new DiagnosePatientCommand(new Diagnosis(assessment, symptoms));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.createConsultation(modelManager.getPatientAtIndex(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            assertEquals(command.execute(modelManager, history).getFeedbackToUser(), diagnosis.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.fail();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPatientCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.PatientEditedFields;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class EditPatientCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private final CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d new Name(\"Bob Tan\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d new Email(\"btan@gmail.com\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.addPatient(patient1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void executeValidEditPatient() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d new Name(\"Bob Toh\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d new Email(\"btan@gmail.com\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        PatientEditedFields editedFields \u003d new PatientEditedFields();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        editedFields.setName(new Name(\"Bob Toh\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            CommandResult commandResult \u003d new EditPatientCommand(1, editedFields)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    .execute(modelManager, history);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"Patient edited:\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(patient1.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            assertEquals(sb.toString(), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void invalidEdit() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        PatientEditedFields peft \u003d new PatientEditedFields();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft.setName(new Name(\"Peter Tay\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            CommandResult result \u003d new EditPatientCommand(2, peft).execute(modelManager, history);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            assertEquals(ce.getMessage(), \"Invalid index for editing\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // edit current patient\u0027s nric to another patient\u0027s nric"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Perry Ng\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9523456B\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"png@gmail.com\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"2 Simei Road\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"92222222\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1995-05-05\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.addPatient(patient1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft.setNric(new Nric(\"S9523456B\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            CommandResult result \u003d new EditPatientCommand(2, peft).execute(modelManager, history);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            assertEquals(ce.getMessage(), \"Edited NRIC will conflict with another existing entry\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Check for invalid entries of editing command"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void noPatient() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        PatientEditedFields peft \u003d new PatientEditedFields();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            CommandResult result \u003d new EditPatientCommand(1, peft).execute(modelManager, history);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            assertEquals(ce.getMessage(), \"No patients records found to edit\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 114,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EndConsultationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Assessment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Diagnosis;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Prescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Symptom;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class EndConsultationTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private final CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.addPatient(patient1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void endConsultation() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.createConsultation(modelManager.getPatientAtIndex(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        EndConsultationCommand command \u003d new EndConsultationCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e command.execute(modelManager, history));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assessment assessment \u003d new Assessment(\"migrane\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cSymptom\u003e symptoms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        symptoms.add(new Symptom(\"constant headache\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.diagnosePatient(new Diagnosis(assessment, symptoms));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e command.execute(modelManager, history));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cPrescription\u003e prescriptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Medicine med1 \u003d new Medicine(\"migrane medicine\", 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        med1.setPrice(BigDecimal.valueOf(20.00));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        prescriptions.add(new Prescription(med1, 1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.prescribeMedicine(prescriptions);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.assertEquals(command.execute(modelManager, history).getFeedbackToUser(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    String.format(EndConsultationCommand.END_CONSULT_FEEDBACK,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                            modelManager.getPatientAtIndex(1).getNric()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.fail();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 3,
      "simjiazhi": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListConsultationCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Assessment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Diagnosis;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Prescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Symptom;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class ListConsultationCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private final CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void noRecords() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // nothing in consultation list yet"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ListConsultationCommand command \u003d new ListConsultationCommand(1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e command.execute(modelManager, history));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Listing consultation records\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(ListConsultationCommand.NO_RECORDS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ListConsultationCommand command2 \u003d new ListConsultationCommand(\"S9123456A\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.assertEquals(sb.toString(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    command2.execute(modelManager, history).getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void consultationsPresent() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"John Tan\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"jtan@gmail.com\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        tagList.add(new Tag(\"Diabetes\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cSymptom\u003e symptoms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        symptoms.add(new Symptom(\"symptom 1\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Diagnosis diagnosis \u003d new Diagnosis(new Assessment(\"assessment 1\"), symptoms);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cPrescription\u003e prescriptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        prescriptions.add(new Prescription(new Medicine(\"med1\"), 1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.createConsultation(patient1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.diagnosePatient(diagnosis);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.prescribeMedicine(prescriptions);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Consultation consultation \u003d modelManager.getCurrentConsultation();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.endConsultation();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Listing consultation records\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(1 + consultation.getIndex() + \") \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\" visit for \" + consultation.getDiagnosis().getAssessment() + \" \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\" on \" + consultation.getSession().format(formatter));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ListConsultationCommand command \u003d new ListConsultationCommand(\"S9123456A\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.assertEquals(sb.toString(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    command.execute(modelManager, history).getFeedbackToUser());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.fail();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // no consultation record by patient of different nric"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ListConsultationCommand command2 \u003d new ListConsultationCommand(\"S9123456B\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"Listing consultation records\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(ListConsultationCommand.NO_RECORDS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.assertEquals(sb.toString(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    command2.execute(modelManager, history).getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.fail();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        //index listing"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ListConsultationCommand command3 \u003d new ListConsultationCommand(1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(consultation);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.assertEquals(sb.toString(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    command3.execute(modelManager, history).getFeedbackToUser());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.fail();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListPatientCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class ListPatientCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private final CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"John Tan\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"jtan@gmail.com\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        tagList.add(new Tag(\"Diabetes\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name2 \u003d new Name(\"Jack Tan\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric2 \u003d new Nric(\"S9142356B\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList2 \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        tagList2.add(new Tag(\"Highbloodpressure\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient2 \u003d new Patient(name2, nric2, email, address, contact, gender, dob, tagList2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name3 \u003d new Name(\"Jeremy Toh\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric3 \u003d new Nric(\"S9132456C\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList3 \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        tagList3.add(new Tag(\"Highbloodpressure\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        tagList3.add(new Tag(\"Diabetes\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient3 \u003d new Patient(name3, nric3, email, address, contact, gender, dob, tagList3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.addPatient(patient1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.addPatient(patient2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.addPatient(patient3);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void noPatientsToList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            ListPatientCommand listcommand \u003d new ListPatientCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            //remove the three patients that were added in init"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            listcommand.execute(modelManager, history);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertEquals(ce.getMessage().toString(), \"No medical records to list\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void nameListing() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            ListPatientCommand listPatientCommand \u003d new ListPatientCommand(\"J\", true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"Listing patients:\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(1 + \") \" + \"John Tan\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"S9123456A\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"M\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"1991-01-01\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(2 + \") \" + \"Jack Tan\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"S9142356B\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"M\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"1991-01-01\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(3 + \") \" + \"Jeremy Toh\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"S9132456C\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"M\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"1991-01-01\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            // list all patients starting with j"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertEquals(listPatientCommand.execute(modelManager, history).getFeedbackToUser(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    sb.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            // list a single patient that fulfills the search criteria"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Name name \u003d new Name(\"John Tan\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Email email \u003d new Email(\"jtan@gmail.com\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            tagList.add(new Tag(\"Diabetes\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            listPatientCommand \u003d new ListPatientCommand(\"Jo\", true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"Listing patients:\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(patient1.toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertEquals(listPatientCommand.execute(modelManager, history).getFeedbackToUser(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    sb.toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            listPatientCommand \u003d new ListPatientCommand(\"Ba\", true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            listPatientCommand.execute(modelManager, history);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertEquals(ce.toString(), \"No patient record found\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void nricListing() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            ListPatientCommand listPatientCommand \u003d new ListPatientCommand(\"S91\", false);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"Listing patients:\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(1 + \") \" + \"John Tan\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"S9123456A\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"M\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"1991-01-01\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \"\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(2 + \") \" + \"Jack Tan\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"S9142356B\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"M\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"1991-01-01\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \"\\n\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(3 + \") \" + \"Jeremy Toh\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"S9132456C\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"M\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"1991-01-01\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \"\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            // list all patients whose nric starts with S91"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertEquals(listPatientCommand.execute(modelManager, history).getFeedbackToUser(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    sb.toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            // list a single patient that fulfills the search criteria"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Name name \u003d new Name(\"John Tan\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Email email \u003d new Email(\"jtan@gmail.com\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            tagList.add(new Tag(\"Diabetes\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            listPatientCommand \u003d new ListPatientCommand(\"S912\", false);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"Listing patients:\\n\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(patient1.toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertEquals(listPatientCommand.execute(modelManager, history).getFeedbackToUser(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    sb.toString());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            listPatientCommand \u003d new ListPatientCommand(\"S88\", true);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            listPatientCommand.execute(modelManager, history);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertEquals(ce.toString(), \"No patient record found\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void tagListing() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Tag tag \u003d new Tag(\"Diabetes\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            ListPatientCommand listPatientCommand \u003d new ListPatientCommand(tag);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"Listing patients:\\n\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(1 + \") \" + \"John Tan\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"S9123456A\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"M\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"1991-01-01\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \"\\n\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(3 + \") \" + \"Jeremy Toh\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"S9132456C\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"M\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"1991-01-01\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \"\\n\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertEquals(listPatientCommand.execute(modelManager, history).getFeedbackToUser(),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    sb.toString());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            tag \u003d new Tag(\"Gout\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            listPatientCommand \u003d new ListPatientCommand(tag);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            listPatientCommand.execute(modelManager, history);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertEquals(ce.toString(), \"No patient record found\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void listFiftyPatients() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"Listing patients:\\n\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(1 + \") \" + \"John Tan\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"S9123456A\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"M\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"1991-01-01\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \"\\n\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(2 + \") \" + \"Jack Tan\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"S9142356B\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"M\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"1991-01-01\""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \"\\n\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(3 + \") \" + \"Jeremy Toh\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"S9132456C\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"M\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \" \" + \"1991-01-01\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    + \"\\n\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            ListPatientCommand listPatientCommand \u003d new ListPatientCommand();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            CommandResult cr \u003d listPatientCommand.execute(modelManager, history);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertEquals(cr.getFeedbackToUser(), sb.toString());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 257
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PrescriptionCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Prescription;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class PrescriptionCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private final CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.addPatient(patient1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // to store medicine"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String[] paths \u003d {\"root\"};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        modelManager.addMedicine(\"antibiotics\", 2, paths, BigDecimal.valueOf(23.23));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void executeTest() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // no consultation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cString\u003e medList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cInteger\u003e qtyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        medList.add(\"antibiotics\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        qtyList.add(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        PrescriptionCommand prescriptionCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            prescriptionCommand \u003d new PrescriptionCommand(medList, qtyList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.assertEquals(ex.toString(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    \"There is no ongoing consultation to prescribe medicine to\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        modelManager.createConsultation(modelManager.getPatientAtIndex(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Medicine med \u003d new Medicine(\"antibiotics\", 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            prescriptionCommand \u003d new PrescriptionCommand(medList, qtyList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"prescription:\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            sb.append(new Prescription(med, qtyList.get(0)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.assertEquals(prescriptionCommand.execute(modelManager, history).getFeedbackToUser(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                    sb.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            org.junit.Assert.fail();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 79,
      "Xue-Chenyang": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PurchaseMedicineViaPathCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class PurchaseMedicineViaPathCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        model.addDirectory(\"TCM\", new String[] {\"root\"});"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        model.addMedicine(\"Panaddol\", 50, new String[] {\"root\", \"TCM\"}, BigDecimal.valueOf(34));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void purchaseValidMedicine() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new PurchaseMedicineViaPathCommand("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                            new String[] {\"root\", \"TCM\", \"Panaddol\"}, 50, BigDecimal.valueOf(500))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    .execute(model, commandHistory);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(PurchaseMedicineCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void invalidMedicinePath_throwCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new PurchaseMedicineViaPathCommand("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                            new String[] {\"root\", \"Panaddol\"}, 50, BigDecimal.valueOf(500))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    .execute(model, commandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(\"No such medicine found.\", ex.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void invalidChangeAmount_throwCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new PurchaseMedicineViaPathCommand("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                            new String[] {\"root\", \"TCM\", \"Panaddol\"}, -50, BigDecimal.valueOf(500))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    .execute(model, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(\"Change amount must be positive\", ex.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PurchaseMedicineWoPathCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class PurchaseMedicineWoPathCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        model.addDirectory(\"TCM\", new String[] {\"root\"});"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        model.addMedicine(\"Pannadol\", new String[] {\"root\", \"TCM\"}, BigDecimal.valueOf(233));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void purchaseValidMedicine() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new PurchaseMedicineWoPathCommand(\"Pannadol\", 50,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                            BigDecimal.valueOf(500)).execute(model, commandHistory);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(PurchaseMedicineCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void purchaseNonExistingMedicine_throwCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new PurchaseMedicineWoPathCommand(\"Pannadoll\", 50,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                            BigDecimal.valueOf(500)).execute(model, commandHistory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(\"No such medicine found.\", ex.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void purchaseNegativeQuantity_throwCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new PurchaseMedicineWoPathCommand(\"Pannadol\", -10,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                            BigDecimal.valueOf(500)).execute(model, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(\"Change amount must be positive\", ex.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetConsultationFeeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.record.Statistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": "class SetConsultationFeeCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private final CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private SetConsultationFeeCommand command1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private SetConsultationFeeCommand command2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private BigDecimal fee;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * Initializer for all the test cases"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        fee \u003d BigDecimal.valueOf(30.00);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        command1 \u003d new SetConsultationFeeCommand(fee);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        command2 \u003d new SetConsultationFeeCommand(fee);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            CommandResult commandResult \u003d command1.execute(modelManager, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            sb.append(\"Consultation fee has been successfully changed to $\" + Statistics.currencyFormat(fee));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            sb.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            Assert.assertEquals(commandResult.getFeedbackToUser(), sb.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Assert.assertTrue(command1.equals(command2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StatisticsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.consultation.Prescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.record.ConsultationRecord;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.record.MedicinePurchaseRecord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.record.Statistics;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "class StatisticsCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private final CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private YearMonth from \u003d YearMonth.of(2019, 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private YearMonth to \u003d YearMonth.of(2019, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private StatisticsCommand command1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private StatisticsCommand command2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Record record1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Record record2;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Clock clock;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * Initializer for all the test cases"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        String topic \u003d \"all\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Medicine medicine \u003d new Medicine(\"test\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        record1 \u003d new ConsultationRecord(new Prescription(medicine, 1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        record2 \u003d new MedicinePurchaseRecord(medicine, 1, BigDecimal.valueOf(10.00));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        command1 \u003d new StatisticsCommand(topic, from, to);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        command2 \u003d new StatisticsCommand(topic, from, to);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        clock \u003d Clock.fixed(Instant.parse(\"2019-01-01T10:15:30.00Z\"), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        modelManager.addRecord(record1, clock);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        clock \u003d Clock.offset(clock, Duration.ofDays((long) 32));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        modelManager.addRecord(record2, clock);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            CommandResult commandResult \u003d command1.execute(modelManager, history);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            sb.append(\"Displaying result for all from 2019-01 to 2019-02.\\n\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    .append(\"Number of consultations: \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    .append(1)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    .append(\"\\n\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    .append(\"Revenue: \")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    .append(Statistics.currencyFormat(BigDecimal.valueOf(30.00)))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    .append(\"\\n\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    .append(\"Expenditure: \")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    .append(Statistics.currencyFormat(BigDecimal.valueOf(10.00)))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    .append(\"\\n\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    .append(\"Profit: \")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    .append(Statistics.currencyFormat(BigDecimal.valueOf(20.00)))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                    .append(\"\\n\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            Assert.assertEquals(commandResult.getFeedbackToUser(), sb.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bentwj"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Assert.assertTrue(command1.equals(command2));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewStorageCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class ViewStorageCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        this.commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        model.addDirectory(\"TCM\", new String[]{\"root\"});"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        model.addDirectory(\"ECM\", new String[]{\"root\"});"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        model.addDirectory(\"Herbs\", new String[]{\"root\", \"TCM\"});"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        model.addMedicine(\"test\", new String[]{\"root\"}, BigDecimal.valueOf(33));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        model.addMedicine(\"data\", 59, new String[]{\"root\"}, BigDecimal.valueOf(97));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void viewRoot() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new ViewStorageCommand(new String[] {\"root\"}).execute(model, commandHistory);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            sb.append(\"Directory found at root\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            sb.append(\"List of sub-directories: \\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            sb.append(\"- ECM\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            sb.append(\"- TCM\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            sb.append(\"List of Medicine under this directory: \\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            sb.append(\"Medicine: data, Quantity: 59, Price: 97\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            sb.append(\"Medicine: test, Quantity: 0, Price: 33\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(sb.toString(), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void viewEmptyDirectory() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d new ViewStorageCommand(new String[] {\"root\", \"TCM\", \"Herbs\"})"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    .execute(model, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(\"Directory found at root\\\\TCM\\\\Herbs\\nEmpty directory\\n\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void viewValidMedicine() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new ViewStorageCommand(new String[] {\"root\", \"data\"}).execute(model, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(\"Medicine found at root\\\\data\\nMedicine: data, Quantity: 59, Price: 97\\n\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void viewNonExistingDirectory() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    new ViewStorageCommand(new String[]{\"root\", \"root2\"}).execute(model, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.assertEquals(\"No directory/medicine found at the given path\\n\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                    commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddDirectoryCommandParseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.AddDirectoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class AddDirectoryCommandParseTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private AddDirectoryCommandParser parser \u003d new AddDirectoryCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void validArgument_returnsAddDirectoryCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertParseSuccess(parser, \"root\\\\test1\\\\test2 test3\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                new AddDirectoryCommand(new String[] {\"root\", \"test1\", \"test2\"}, \"test3\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void parse_emptyArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDirectoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void invalidArgument_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertParseFailure(parser, \"root\\\\test1 test\\\\1\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDirectoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddMedicineCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.AddMedicineCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class AddMedicineCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private AddMedicineCommandParser parser \u003d new AddMedicineCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void parse_validArgs_returnsAddMedicineCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertParseSuccess(parser, \"root\\\\test\\\\test2 panaddol 30 40\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                new AddMedicineCommand("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                        new String[] {\"root\", \"test\", \"test2\"}, \"panaddol\", 40, new BigDecimal(30)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void parse_validArgsWithoutQuantity_returnsAddMedicineCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertParseSuccess(parser, \"root\\\\test\\\\test2 panaddol 20.3\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                new AddMedicineCommand("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                        new String[] {\"root\", \"test\", \"test2\"}, \"panaddol\", BigDecimal.valueOf(20.3)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void parse_emptyArgs_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMedicineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void parse_argsWithoutMedicine_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertParseFailure(parser, \"root\\\\test\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMedicineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddPatientParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.AddPatientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class AddPatientParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private AddPatientParser parser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        parser \u003d new AddPatientParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void successfulAddPatient() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1999-09-09\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \" n/\" + name.getName() + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"r/\" + nric.getNric() + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"e/\" + email.getEmail() + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"a/\" + address.getAddress() + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"c/\" + contact.getContact() + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"g/\" + gender.getGender() + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"d/\" + dob.getDob();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertParseSuccess(parser, userInput,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                new AddPatientCommand(patient1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void invalidPatientAdding() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1999-09-09\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // missing gender"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \" n/\" + name.getName() + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"r/\" + nric.getNric() + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"e/\" + email.getEmail() + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"a/\" + address.getAddress() + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"c/\" + contact.getContact() + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"d/\" + dob.getDob();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertParseFailure(parser, userInput, \"Some details are left out, please retype the command\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.util.StringUtil.fromPathToString;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddAppCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.AddMedicineCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.AddPatientCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddRemCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.ConsultationCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.DiagnosePatientCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.EditPatientCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.EndConsultationCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListAppCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.ListConsultationCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.ListPatientCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListRemCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.PrescriptionCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Assessment;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Diagnosis;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Symptom;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.PatientEditedFields;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void parseCommand_addPatient() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \"padd n/\" + name.getName() + \" \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"r/\" + nric.getNric() + \" \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"e/\" + email.getEmail() + \" \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"a/\" + address.getAddress() + \" \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"c/\" + contact.getContact() + \" \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"g/\" + gender.getGender() + \" \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"d/\" + dob.getDob();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        AddPatientCommand command \u003d (AddPatientCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(new AddPatientCommand(patient1), command);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void parseCommand_editPatient() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \"pedit 1 n/\" + name.getName() + \" \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"r/\" + nric.getNric() + \" \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"e/\" + email.getEmail() + \" \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"a/\" + address.getAddress();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        PatientEditedFields pef \u003d new PatientEditedFields();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        pef.setName(name);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        pef.setNric(nric);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        pef.setEmail(email);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        pef.setAddress(address);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(1, pef);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        EditPatientCommand command \u003d (EditPatientCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void parseCommand_listPatient() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \"plist r/S92\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ListPatientCommand command1 \u003d new ListPatientCommand(\"S92\", false);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(command1, parser.parseCommand(userInput));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        userInput \u003d \"plist n/pe\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ListPatientCommand command2 \u003d new ListPatientCommand(\"pe\", true);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(command2, parser.parseCommand(userInput));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        userInput \u003d \"plist t/diabetes\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ListPatientCommand command3 \u003d new ListPatientCommand(new Tag(\"diabetes\"));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(command3, parser.parseCommand(userInput));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        userInput \u003d \"plist 1\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ListPatientCommand command4 \u003d new ListPatientCommand(1);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(command4, parser.parseCommand(userInput));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        userInput \u003d \"plist\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ListPatientCommand command5 \u003d new ListPatientCommand();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(command5, parser.parseCommand(userInput));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void parseCommand_consultationcommand() throws Exception {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \"consult r/S9123456A\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ConsultationCommand command \u003d new ConsultationCommand(\"S9123456A\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(command, parser.parseCommand(userInput));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void parseCommand_diagnosepatientcommand() throws Exception {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \"diagnose a/migrane s/constant headache s/blurred vision\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assessment assessment \u003d new Assessment(\"migrane\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cSymptom\u003e symptoms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        symptoms.add(new Symptom(\"constant headache\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        symptoms.add(new Symptom(\"blurred vision\"));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        DiagnosePatientCommand command \u003d new DiagnosePatientCommand(new Diagnosis(assessment, symptoms));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(command, parser.parseCommand(userInput));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void parseCommand_prescriptioncommand() throws Exception {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \"prescribe m/antibiotics q/1\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cString\u003e meds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        meds.add(\"antibiotics\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cInteger\u003e qtys \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        qtys.add(1);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        PrescriptionCommand command \u003d new PrescriptionCommand(meds, qtys);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(command, parser.parseCommand(userInput));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void parseCommand_endconsultation() throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \"endconsult\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        org.junit.Assert.assertTrue(parser.parseCommand(userInput) instanceof EndConsultationCommand);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void parseCommand_listconsultation() throws Exception {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \"listconsult r/S1234567A\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ListConsultationCommand command \u003d new ListConsultationCommand(\"S1234567A\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(command, parser.parseCommand(userInput));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_addAppointment() throws Exception {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        String nricString \u003d \"S9234568C\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateString \u003d \"2019-10-23\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        String startString \u003d \"16:00\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        String endString \u003d \"17:00\";"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        Nric nric \u003d new Nric(nricString);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(startString);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(endString);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        String comment \u003d \"This is a test comment\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d AddAppCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" r/\" + nricString"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" d/\" + dateString"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" s/\" + startString"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" e/\" + endString"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" c/\" + comment;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        AddAppCommand command \u003d (AddAppCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddAppCommand(nric, date, start, end, comment), command);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_listApp() throws Exception {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListAppCommand.COMMAND_WORD) instanceof ListAppCommand);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListAppCommand.COMMAND_WORD + \" 3\") instanceof ListAppCommand);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_addReminder() throws Exception {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        String title \u003d \"Refill Medicine ABC\";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateString \u003d \"2019-05-22\";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        String startString \u003d \"13:00\";"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        String endString \u003d \"14:00\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        String comment \u003d \"This is a test comment\";"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(startString);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(endString);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        Reminder toAdd \u003d new Reminder(title, comment, date, start, end);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d AddRemCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" t/\" + title"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" d/\" + dateString"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" s/\" + startString"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" e/\" + endString"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" c/\" + comment;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        AddRemCommand command \u003d (AddRemCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddRemCommand(toAdd), command);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_listReminder() throws Exception {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListRemCommand.COMMAND_WORD) instanceof ListRemCommand);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListRemCommand.COMMAND_WORD + \" 3\") instanceof ListRemCommand);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void parseCommand_addMedicine() throws Exception {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String[] path \u003d new String[] {\"root\", \"TCM\", \"Herbs\"};"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String rawPath \u003d fromPathToString(path);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String name \u003d \"panaddol\";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        sb.append(AddMedicineCommand.COMMAND_WORD + \" \" + rawPath + \" \");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        sb.append(name + \" 30 \");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        int quantity \u003d 60;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        sb.append(quantity);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertTrue(new AddMedicineCommand(path, name, quantity, new BigDecimal(30))"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                .equals(parser.parseCommand(sb.toString())));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 137,
      "Xue-Chenyang": 17,
      "-": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AlarmCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.AlarmCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class AlarmCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private AlarmCommandParser parser \u003d new AlarmCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void parse_validArguments_returnAlarmCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertParseSuccess(parser, \"root\\\\TCM\\\\MCT 40\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                new AlarmCommand(new String[] {\"root\", \"TCM\", \"MCT\"}, 40));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void parse_invalidArgument_throwParserException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertParseFailure(parser, \"root\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AlarmCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ConsultationCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.ConsultationCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class ConsultationCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ConsultationCommandParser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void invalidParses() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String args \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        parser \u003d new ConsultationCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertParseFailure(parser, args, \"Some details are left out, please retype the command\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        args \u003d \" r/S9123456A\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertParseSuccess(parser, args, new ConsultationCommand(\"S9123456A\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DiagnosePatientCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.DiagnosePatientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Assessment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Diagnosis;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.consultation.Symptom;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class DiagnosePatientCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private DiagnosePatientCommandParser parser \u003d new DiagnosePatientCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void parseDiagnosis() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String input \u003d \" a/migrane s/constant headache s/blurred vision\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assessment assessment \u003d new Assessment(\"migrane\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cSymptom\u003e symptoms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        symptoms.add(new Symptom(\"constant headache\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        symptoms.add(new Symptom(\"blurred vision\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertParseSuccess(parser, input, new DiagnosePatientCommand(new Diagnosis(assessment, symptoms)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        input \u003d \" a/migrane\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertParseFailure(parser, input, \"Some details are left out, please retype the command\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        input \u003d \" s/constant headache s/blurred vision\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertParseFailure(parser, input, \"Some details are left out, please retype the command\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditPatientParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.EditPatientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.PatientEditedFields;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class EditPatientParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private EditPatientParser parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        parser \u003d new EditPatientParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void successfulEdit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1999-09-09\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Tag tag \u003d new Tag(\"Diabetes\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        tagList.add(tag);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \"0 n/\" + name.getName() + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"r/\" + nric.getNric() + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"e/\" + email.getEmail() + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"t/\" + tag.tagName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        PatientEditedFields peft \u003d new PatientEditedFields();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft.setName(new Name(\"Peter Tan\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft.setNric(new Nric(\"S9123456A\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft.setEmail(new Email(\"ptan@gmail.com\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertTrue(parser.parse(userInput).equals(new EditPatientCommand(0, peft)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (ParseException ce) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListConsultationParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.ListConsultationCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class ListConsultationParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ListConsultationCommandParser parser \u003d new ListConsultationCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \"1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertTrue(parser.parse(userInput).equals(new ListConsultationCommand(1)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        userInput \u003d \" r/S1234567A\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertTrue(parser.parse(userInput).equals(new ListConsultationCommand(\"S1234567A\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListPatientParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.ListPatientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class ListPatientParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private ListPatientParser parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        parser \u003d new ListPatientParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void defaultConstruction() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertTrue(parser.parse(userInput).equals(new ListPatientCommand()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructionByIndex() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \"1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertTrue(parser.parse(userInput).equals(new ListPatientCommand(1)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        //invalid index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        userInput \u003d \"a\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertParseFailure(parser, userInput, \"Index should be numeric\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructionByName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \" n/Be\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertTrue(parser.parse(userInput).equals(new ListPatientCommand(\"Be\", true)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructionByNric() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \" r/S92\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertTrue(parser.parse(userInput).equals(new ListPatientCommand(\"S92\", false)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructionByTag() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \" t/Diabetes\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Tag tag \u003d new Tag(\"Diabetes\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.assertTrue(parser.parse(userInput).equals(new ListPatientCommand(tag)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Assert.fail();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PrescriptionCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.logic.commands.PrescriptionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class PrescriptionCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private PrescriptionCommandParser parser \u003d new PrescriptionCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void successfulPrescription() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \" m/antibiotics q/1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cString\u003e medList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cInteger\u003e qtyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        medList.add(\"antibiotics\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        qtyList.add(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertParseSuccess(parser, userInput, new PrescriptionCommand(medList, qtyList));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void invalidPrescriptions() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String userInput \u003d \"m/antibiotics\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \"Some details are left out, please retype the command\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        userInput \u003d \" m/antibiotics m/cough syrup q/1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \"Some medicine do not have assigned quantity, please reenter command\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        userInput \u003d \" m/antibiotics q/2 q/1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                \"Additional quantities specified, please retype the command\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PurchaseMedicineCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.PurchaseMedicineCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.PurchaseMedicineViaPathCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.PurchaseMedicineWoPathCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class PurchaseMedicineCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private Parser\u003cPurchaseMedicineCommand\u003e parser \u003d new PurchaseMedicineCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void validViaPathArgument_returnsPurchaseMedicineViaPathCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \"root\\\\test1\\\\test2\\\\med 40 50.0\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                new PurchaseMedicineViaPathCommand("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                        new String[] {\"root\", \"test1\", \"test2\", \"med\"}, 40, BigDecimal.valueOf(50.0)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void validWoPathArgument_returnsPurchaseMedicineWoPathCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \"med 40 500\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                new PurchaseMedicineWoPathCommand(\"med\", 40, BigDecimal.valueOf(500)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void invalidArgument_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertParseFailure(parser, \"med 40\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, PurchaseMedicineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void invalidArgument2_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertParseFailure(parser, \"root\\\\med 40 med\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, PurchaseMedicineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SetConsultationFeeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.commands.SetConsultationFeeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "class SetConsultationFeeCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private SetConsultationFeeCommandParser parser \u003d new SetConsultationFeeCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private BigDecimal fee \u003d BigDecimal.valueOf(30.00);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void parse_validArgs_returnsSetConsultationFeeCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        assertParseSuccess(parser, \"$30.00\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                new SetConsultationFeeCommand(fee));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        assertParseFailure(parser, \"30.\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetConsultationFeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public void parse_emptyArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetConsultationFeeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/StatisticsCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "class StatisticsCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private StatisticsCommandParser parser \u003d new StatisticsCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private String topic \u003d \"finances\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private YearMonth from \u003d YearMonth.of(2019, 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private YearMonth to \u003d YearMonth.of(2019, 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public void parse_validArgs_returnsStatisticsCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        assertParseSuccess(parser, \"finances 0119\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                new StatisticsCommand(topic, from, to));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public void parse_emptyArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewStorageCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.logic.commands.ViewStorageCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class ViewStorageCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private ViewStorageCommandParser parser \u003d new ViewStorageCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void validArgument_returnsViewStorageCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertParseSuccess(parser, \"root\\\\TCM\\\\Healroot\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                new ViewStorageCommand(new String[] {\"root\", \"TCM\", \"Healroot\"}));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void blankArgument_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertParseFailure(parser, \"   \","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewStorageCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private final AddressBook addressBookWithBobAndAmy \u003d new AddressBookBuilder().withPerson(BOB)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            .withPerson(AMY).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void removeTag_nonExistentTag_addressBookUnchanged() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_UNUSED));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void removeTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_FRIEND));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                .withPerson(amyWithoutFriendTag).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeListener(listener);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        public ArrayList\u003cPatient\u003e getPatients() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 7,
      "Xue-Chenyang": 28,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void deleteTag_nonExistentTag_modelUnchanged() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertEquals(new ModelManager(addressBook, userPrefs), modelManager);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void deleteTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        expectedModelManager.setPerson(AMY, amyWithoutFriendTag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        expectedModelManager.setPerson(BOB, bobWithoutFriendTag);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(null);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(ALICE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(BOB);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(BOB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(BOB);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person updatedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setPerson(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 30,
      "-": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/AppointmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Nric nric \u003d new Nric(\"S9367777A\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDate dateA \u003d LocalDate.parse(\"2019-10-23\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDate dateB \u003d LocalDate.parse(\"2019-10-24\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalTime startA \u003d LocalTime.parse(\"16:00\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalTime startB \u003d LocalTime.parse(\"12:00\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalTime endA \u003d LocalTime.parse(\"17:00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalTime endB \u003d LocalTime.parse(\"13:00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private String comment \u003d \"This is a comment\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        model.initQuickDocsSampleData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment appA \u003d new Appointment(model.getPatientWithNric(nric).get(), dateA, startA, endA, comment);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment appB \u003d new Appointment(model.getPatientWithNric(nric).get(), dateA, startA, endA, comment);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // test equality of same referenced object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(appA.equals(appB));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // test equality of two different appointment object with different date"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appA \u003d new Appointment(model.getPatientWithNric(nric).get(), dateA, startA, endA, comment);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appB \u003d new Appointment(model.getPatientWithNric(nric).get(), dateB, startA, endA, comment);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(appA.equals(appB));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // test equality of two different appointment object with different start time"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        appA \u003d new Appointment(model.getPatientWithNric(nric).get(), dateA, startA, endA, comment);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        appB \u003d new Appointment(model.getPatientWithNric(nric).get(), dateA, startB, endA, comment);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(appA.equals(appB));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // test equality of two different appointment object with different end time"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        appA \u003d new Appointment(model.getPatientWithNric(nric).get(), dateA, startA, endA, comment);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        appB \u003d new Appointment(model.getPatientWithNric(nric).get(), dateA, startA, endB, comment);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(appA.equals(appB));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 6,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/consultation/AssessmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class AssessmentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Assessment(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void invalidSymptoms() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()-\u003enew Assessment(\"\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()-\u003enew Assessment(\" \"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()-\u003enew Assessment(\",\u0026/*\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()-\u003enew Assessment(\"Coughing\u0026\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assessment assessment1 \u003d new Assessment(\"Influenza\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(assessment1.equals(assessment1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assessment assessment2 \u003d new Assessment(\"Influenza\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(assessment1.equals(assessment2));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assessment assessment3 \u003d new Assessment(\"Diarrhea\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(assessment1.equals(assessment3));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/consultation/ConsultationManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.PatientManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class ConsultationManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static ConsultationManager consultationManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static PatientManager patientManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.consultationManager \u003d new ConsultationManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patientManager \u003d new PatientManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientManager.addPatient(patient1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void createConsultation() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient \u003d patientManager.getPatientAtIndex(1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        consultationManager.createConsultation(patient);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        //attempt to start another consultation when there is an existing current session"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e consultationManager.createConsultation(patient));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void diagnosePatient() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // will only fail when diagnosis is created before a consultation begun"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cSymptom\u003e symptoms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        symptoms.add(new Symptom(\"Runny nose\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assessment assessment \u003d new Assessment(\"Cold\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Diagnosis diagnosis \u003d new Diagnosis(assessment, symptoms);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e consultationManager.diagnosePatient(diagnosis));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void checkConsultation() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        org.junit.Assert.assertFalse(consultationManager.checkConsultation());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient \u003d patientManager.getPatientAtIndex(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        consultationManager.createConsultation(patient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        org.junit.Assert.assertTrue(consultationManager.checkConsultation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void getCurrentConsultation() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        org.junit.Assert.assertTrue(consultationManager.getCurrentConsultation() \u003d\u003d null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient \u003d patientManager.getPatientAtIndex(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        consultationManager.createConsultation(patient);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        org.junit.Assert.assertTrue(consultationManager.getCurrentConsultation() !\u003d null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void endConsultation() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e consultationManager.endConsultation());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient \u003d patientManager.getPatientAtIndex(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        consultationManager.createConsultation(patient);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // diagnosis and prescription null"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        consultationManager.endConsultation();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        org.junit.Assert.assertTrue(consultationManager.getCurrentConsultation() \u003d\u003d null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/model/consultation/DiagnosisTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class DiagnosisTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void diagnosisCreation() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assessment testAssessment \u003d new Assessment(\"Test\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList \u003cSymptom\u003e testSymptoms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        seedu.address.testutil.Assert.assertThrows("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                IllegalArgumentException.class, () -\u003e new Diagnosis(testAssessment, testSymptoms));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        testSymptoms.add(new Symptom(\"Vomitting blood\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assessment testAssessment2 \u003d new Assessment(\"Test\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList \u003cSymptom\u003e testSymptoms2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        testSymptoms2.add(new Symptom(\"Vomitting blood\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Diagnosis testDiagnosis \u003d new Diagnosis(testAssessment2, testSymptoms2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertEquals(testDiagnosis, new Diagnosis(testAssessment, testSymptoms));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assessment testAssessment \u003d new Assessment(\"Test\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList \u003cSymptom\u003e testSymptoms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        testSymptoms.add(new Symptom(\"Vomitting blood\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Diagnosis diagnosis1 \u003d new Diagnosis(testAssessment, testSymptoms);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertTrue(diagnosis1.equals(diagnosis1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assessment testAssessment2 \u003d new Assessment(\"Test\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList \u003cSymptom\u003e testSymptoms2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        testSymptoms2.add(new Symptom(\"Vomitting blood\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Diagnosis diagnosis2 \u003d new Diagnosis(testAssessment2, testSymptoms2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertTrue(diagnosis1.equals(diagnosis2));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assessment testAssessment3 \u003d new Assessment(\"Test\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList \u003cSymptom\u003e testSymptoms3 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        testSymptoms3.add(new Symptom(\"Coughing blood\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Diagnosis diagnosis3 \u003d new Diagnosis(testAssessment3, testSymptoms3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertFalse(diagnosis1.equals(diagnosis3));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/consultation/PrescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class PrescriptionTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void invalidPrescription() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String medicine \u003d \" \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        int quantity \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()-\u003enew Prescription(new Medicine(medicine, 2),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                quantity));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        int quantity2 \u003d -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()-\u003enew Prescription(new Medicine(medicine, 2),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                quantity2));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/consultation/SymptomTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class SymptomTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Symptom(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void invalidSymptoms() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()-\u003enew Symptom(\"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()-\u003enew Symptom(\" \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()-\u003enew Symptom(\",\u0026/*\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()-\u003enew Symptom(\"Coughing\u0026\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Symptom symptom1 \u003d new Symptom(\"Constant coughing\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(symptom1.equals(symptom1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Symptom symptom2 \u003d new Symptom(\"Constant coughing\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(symptom1.equals(symptom2));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Symptom symptom3 \u003d new Symptom(\"Runny nose\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(symptom1.equals(symptom3));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicine/DirectoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class DirectoryTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static String[] typicalNames \u003d new String[] {\"test1\", \"test2\", \"test3\"};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static String duplicateDirectoryName \u003d \"test1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static String duplicateMedicineName \u003d \"testMedicine\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static Medicine medicineTest \u003d new Medicine(duplicateMedicineName);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private Directory typicalDirectory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * Initialize a typical directory for testing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void initializeTypicalDirectory() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        typicalDirectory \u003d new Directory(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        for (String name : typicalNames) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            typicalDirectory.addDirectory(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        typicalDirectory.addMedicine(medicineTest);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Directory(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addDirectory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e typicalDirectory.addDirectory(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addDirectory_duplicate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                IllegalArgumentException.class, () -\u003e typicalDirectory.addDirectory(duplicateDirectoryName));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addMedicine_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e typicalDirectory.addMedicine(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addMedicine_duplicateName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                -\u003e typicalDirectory.addMedicine(new Medicine(duplicateMedicineName)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void findMedicine_nonMatchingDirectoryName_throwsIllegalStateException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                IllegalStateException.class, () -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                        typicalDirectory.findMedicine(new String[] {\"testt\", duplicateMedicineName}, 0));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void findMedicine_nonMatchingMedicineName_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertFalse(typicalDirectory.findMedicine(new String[] {\"test\", \"tt\"}, 0).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void findDirectory_nonMatchingDirectoryName_throwsIllegalStateException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                IllegalStateException.class, () -\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                        typicalDirectory.findDirectory(new String[] {\"testt\", duplicateDirectoryName}, 0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void findDirectory_nonExistingDirectoryName_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertFalse(typicalDirectory.findDirectory(new String[] {\"test\", \"tt\"}, 0).isPresent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void findMedicine_returnsSameMedicine() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertTrue(typicalDirectory.findMedicine("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                new String[] {\"test\", duplicateMedicineName}, 0).get().equals(medicineTest));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void setThresholdForDirectory() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        typicalDirectory.findDirectory("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                new String[]{\"test\", \"test1\"}, 0).get().addMedicine(new Medicine(\"tt\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        typicalDirectory.findDirectory("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                new String[]{\"test\", \"test2\"}, 0).get().addMedicine(new Medicine(\"ttt\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        typicalDirectory.setThresholdForAll(10);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertTrue(typicalDirectory.findMedicine("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                new String[]{\"test\", \"test1\", \"tt\"}, 0).get().getThreshold() \u003d\u003d 10"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                \u0026\u0026 typicalDirectory.findMedicine("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                new String[]{\"test\", \"test2\", \"ttt\"}, 0).get().getThreshold() \u003d\u003d 10);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicine/MedicineManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class MedicineManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static MedicineManager typicalMedicineManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static final String[] directoriesNames \u003d new String[] {\"test1\", \"test2\", \"test3\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    private static final String[] medicineNames \u003d new String[] {\"med1\", \"med2\", \"med3\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * initialize a typical storage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void initializeTypicalStorage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        typicalMedicineManager \u003d new MedicineManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        for (String c : directoriesNames) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "            typicalMedicineManager.addDirectory(c, new String[] {\"root\"});"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addMedicine_wrongPath_throwsIllegalStateException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                IllegalStateException.class, ()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                -\u003e typicalMedicineManager.addMedicine(medicineNames[0], new String[]{\"RRR\"}, BigDecimal.valueOf(22)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addMedicine_searchByName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        initializeTypicalStorage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        typicalMedicineManager.addMedicine(medicineNames[0], new String[] {\"root\", \"test1\"}, BigDecimal.valueOf(33));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertTrue(typicalMedicineManager.findMedicine(medicineNames[0]).get().name \u003d\u003d medicineNames[0]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addMedicine_searchThroughWrongPath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        typicalMedicineManager.addMedicine(medicineNames[0], new String[] {\"root\", \"test2\"}, BigDecimal.valueOf(7));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertFalse(typicalMedicineManager.findMedicine(new String[] {\"root\", \"test1\", medicineNames[0]}).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void addMedicine_searchThroughRightPath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        typicalMedicineManager.addMedicine(medicineNames[0], new String[] {\"root\", \"test2\"}, BigDecimal.valueOf(44));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                typicalMedicineManager.findMedicine("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                        new String[] {\"root\", \"test2\", medicineNames[0]}).get().name \u003d\u003d medicineNames[0]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void purchaseMedicine_viaPath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        typicalMedicineManager.addMedicine("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                medicineNames[0], 20, new String[] {\"root\", \"test2\"}, BigDecimal.valueOf(11));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        typicalMedicineManager.purchaseMedicine(new String[] {\"root\", \"test2\", medicineNames[0]}, 50);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertEquals(70, typicalMedicineManager.findMedicine("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                new String[] {\"root\", \"test2\", medicineNames[0]}).get().getQuantity());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void purchaseMedicine_woPath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        typicalMedicineManager.addMedicine("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "                medicineNames[0], 20, new String[] {\"root\", \"test2\"}, BigDecimal.valueOf(22));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        typicalMedicineManager.purchaseMedicine(medicineNames[0], 50);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertEquals(70, typicalMedicineManager.findMedicine(medicineNames[0]).get().getQuantity());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicine/MedicineTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "public class MedicineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Medicine(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void constructorWithQuantity_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Medicine(null, 40));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void constructor_invalidMedicine_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        String invalidMedicine \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Medicine(invalidMedicine));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void invalidAdditionQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Medicine medicineTest \u003d new Medicine(\"test\", 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e medicineTest.addQuantity(-40));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void invalidSubtractionQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Medicine medicineTest \u003d new Medicine(\"test\", 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e medicineTest.subtractQuantity(-40));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void insufficientQuantityForSubtraction_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Medicine medicineTest \u003d new Medicine(\"test\", 50);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e medicineTest.subtractQuantity(60));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void negativeThreshold_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Medicine medicineTest \u003d new Medicine(\"test\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e medicineTest.setThreshold(-60));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    public void setValidThreshold() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        Medicine medicineTest \u003d new Medicine(\"test\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        medicineTest.setThreshold(100);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "        assertTrue(medicineTest.getThreshold() \u003d\u003d 100 \u0026\u0026 !medicineTest.isThresholdIsDefault());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String onlySpace \u003d \" \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(onlySpace));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String emptyAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(emptyAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String onlySymbols \u003d \"@\\\\/3n()3\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(onlySymbols));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address1 \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        org.junit.Assert.assertTrue(address1.equals(address1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address2 \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        org.junit.Assert.assertTrue(address1.equals(address2));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address3 \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address4 \u003d new Address(\"1 SIMEI Road\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        org.junit.Assert.assertFalse(address3.equals(address4));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/ContactTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class ContactTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Contact(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Contact(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String onlySpace \u003d \"        \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Contact(onlySpace));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String onlySymbol \u003d \"@#$%^*()\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Contact(onlySymbol));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String insufficientNumbers \u003d \"1234567\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Contact(insufficientNumbers));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String extraNumbers \u003d \"123456789\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Contact(extraNumbers));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String alphabetsIncluded \u003d \"12E45678\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Contact(extraNumbers));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact1 \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(contact1.equals(contact1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact2 \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(contact1.equals(contact2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact3 \u003d new Contact(\"82222222\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(contact1.equals(contact3));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/DobTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class DobTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Dob(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_invalidDob_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String onlySpace \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Dob(onlySpace));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String emptyAddress \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Dob(emptyAddress));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String onlySymbols \u003d \"@@-##-$$$$\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Dob(onlySymbols));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String wrongFormat \u003d \"19-09-1999\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Dob(wrongFormat));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String no31Days \u003d \"31-4-2002\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Dob(no31Days));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String invalidLeapYear \u003d \"29-2-2007\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Dob(invalidLeapYear));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String invalidFebDate \u003d \"30-2-2000\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Dob(invalidFebDate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String invalidDay \u003d \"32-2-2000\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Dob(invalidDay));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String invalidMonth \u003d \"01-13-2000\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Dob(invalidMonth));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob1 \u003d new Dob(\"1999-09-09\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(dob1.equals(dob1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob2 \u003d new Dob(\"1999-09-09\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob3 \u003d new Dob(\"1999-09-08\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(dob1.equals(dob3));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(dob1.toString().equals(dob2.toString()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String onlySpace \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(onlySpace));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String onlySymbols \u003d \"^\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(onlySymbols));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String noDomain \u003d \"abc\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(noDomain));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String noLocalPart \u003d \"@gmail.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(noLocalPart));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String noDot \u003d \"abc@gmail\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(noDot));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String unallowedlocalCharacters \u003d \"@/c@gmail.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(unallowedlocalCharacters));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String unallowedDomainCharacters \u003d \"abc@gm@il.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(unallowedDomainCharacters));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"abc@gmail.com\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(email.equals(email));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email2 \u003d new Email(\"abc@gmail.com\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(email.equals(email2));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email3 \u003d new Email(\"bbc@gmail.com\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(email.equals(email3));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/GenderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class GenderTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Gender(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String onlySpace \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Gender(onlySpace));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String emptyGender \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Gender(emptyGender));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String onlySymbols \u003d \"@\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Gender(onlySymbols));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String longForm \u003d \"Male\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Gender(longForm));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String invalidGenderCode \u003d \"N\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Gender(invalidGenderCode));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(gender.equals(gender));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender2 \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(gender.equals(gender2));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender3 \u003d new Gender(\"F\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(gender.equals(gender3));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String onlySpace \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(onlySpace));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String onlySymbols \u003d \"^\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(onlySymbols));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String containsSymbols \u003d \"peter*\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(containsSymbols));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"George Gan\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(name.equals(name));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name2 \u003d new Name(\"George Gan\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(name.equals(name2));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name3 \u003d new Name(\"Georgina Gan\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(name.equals(name3));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/NricTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class NricTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Nric(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void constructor_invalidNric_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String onlySpace \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(onlySpace));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String onlySymbols \u003d \"^\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(onlySymbols));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String invalidStartingLetter \u003d \"A7693825C\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidStartingLetter));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String invalidEndingLetterForSandT \u003d \"S7693825K\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidEndingLetterForSandT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String invalidEndingLetterFandG \u003d \"F8868575A\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidEndingLetterFandG));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String insufficientNumbers \u003d \"S496387H\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(insufficientNumbers));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String noFirstAndLastLetter \u003d \"4963872\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(noFirstAndLastLetter));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String noFirstLetter \u003d \"4963872H\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(noFirstAndLastLetter));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String noLastLetter \u003d \"S4963872\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(noFirstAndLastLetter));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"F2131944U\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(nric.equals(nric));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric2 \u003d new Nric(\"F2131944U\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(nric.equals(nric2));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric3 \u003d new Nric(\"S5072487E\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(nric.equals(nric3));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PatientEditedFieldsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class PatientEditedFieldsTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void checkEmpty() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        PatientEditedFields peft \u003d new PatientEditedFields();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(peft.checkEmpty());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name newName \u003d new Name(\"Mohamed Rizal bin Ramlee\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft.setName(newName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(peft.checkEmpty());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void checkEquals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        PatientEditedFields peft1 \u003d new PatientEditedFields();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(peft1.equals(peft1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"abc@gmail.com\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(peft1.equals(email));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        PatientEditedFields peft2 \u003d new PatientEditedFields();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(peft1.equals(peft2));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft1.setName(new Name(\"Peter\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft1.setNric(new Nric(\"S1234567A\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft1.setEmail(new Email(\"peter@gmail.com\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft1.setAddress(new Address(\"1 Simei Road\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft2.setName(new Name(\"Peter\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft2.setNric(new Nric(\"S1234567A\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft2.setEmail(new Email(\"peter@gmail.com\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft2.setAddress(new Address(\"1 Simei Road\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(peft1.equals(peft2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft1.setContact(new Contact(\"11111111\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft1.setGender(new Gender(\"M\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft1.setDob(new Dob(\"1990-01-01\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft1.setTagList(new ArrayList\u003cTag\u003e());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft2.setContact(new Contact(\"11111111\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft2.setGender(new Gender(\"M\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft2.setDob(new Dob(\"1990-01-01\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e peft2Tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft2Tags.add(new Tag(\"Diabetes\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        peft2.setTagList(peft2Tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(peft1.equals(peft2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PatientManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class PatientManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static PatientManager patientManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patientManager \u003d new PatientManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientManager.addPatient(patient1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void testDuplicates() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Pepper Toh\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptoh@gmail.com\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"2 Simei Road\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"92222222\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"F\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1993-03-03\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertTrue(patientManager.duplicatePatient(patient1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric2 \u003d new Nric(\"S9123456B\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient2 \u003d new Patient(name, nric2, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(patientManager.duplicatePatient(patient2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void testAddPatients() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Pepper Toh\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptoh@gmail.com\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"2 Simei Road\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"92222222\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"F\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1993-03-03\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientManager.addPatient(patient1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertTrue(patientManager.getPatientList().size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void testEmptyListCheck() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientManager \u003d new PatientManager();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertTrue(patientManager.isPatientListEmpty());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Pepper Toh\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptoh@gmail.com\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"2 Simei Road\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"92222222\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"F\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1993-03-03\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientManager.addPatient(patient1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(patientManager.isPatientListEmpty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void checkIndex() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertTrue(patientManager.checkValidIndex(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(patientManager.checkValidIndex(2));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(patientManager.checkValidIndex(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void editDuplicate() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Pepper Toh\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456B\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptoh@gmail.com\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"2 Simei Road\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"92222222\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"F\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1993-03-03\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientManager.addPatient(patient1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // edited patient have the same nric as the second patient in list"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name2 \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric2 \u003d new Nric(\"S9123456B\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email2 \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address2 \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact2 \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender2 \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob2 \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList2 \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient editedPatient \u003d new Patient(name2, nric2, email2, address2, contact2, gender2, dob2, tagList2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertTrue(patientManager.checkDuplicatePatientAfterEdit(1, editedPatient));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric3 \u003d new Nric(\"S9123456C\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        editedPatient \u003d new Patient(name2, nric3, email2, address2, contact2, gender2, dob2, tagList2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(patientManager.checkDuplicatePatientAfterEdit(1, editedPatient));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void findPatientByName() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Perry Ng\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9234567B\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"png@gmail.com\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"2 Simei Road\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"92222222\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1992-02-02\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientManager.addPatient(patient1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name2 \u003d new Name(\"Piper Wright\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric2 \u003d new Nric(\"S9273478C\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email2 \u003d new Email(\"pwright@gmail.com\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address2 \u003d new Address(\"3 Simei Road\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact2 \u003d new Contact(\"92222222\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender2 \u003d new Gender(\"F\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob2 \u003d new Dob(\"1992-02-02\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList2 \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient2 \u003d new Patient(name2, nric2, email2, address2, contact2, gender2, dob2, tagList2);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientManager.addPatient(patient2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(1 + \") \" + \"Peter Tan\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + \"S9123456A\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + \"M\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + \"1991-01-01\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(2 + \") \" + name"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + nric"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + gender"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + dob"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(patientManager.findPatientsByName(\"Pe\"), sb.toString());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(patientManager.findPatientsByName(\"Be\"), \"No patient record found\\n\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void findPatientByNric() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Perry Ng\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9234567B\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"png@gmail.com\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"2 Simei Road\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"92222222\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1992-02-02\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientManager.addPatient(patient1);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name2 \u003d new Name(\"Piper Wright\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric2 \u003d new Nric(\"S9273478C\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email2 \u003d new Email(\"pwright@gmail.com\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address2 \u003d new Address(\"3 Simei Road\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact2 \u003d new Contact(\"92222222\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender2 \u003d new Gender(\"F\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob2 \u003d new Dob(\"1992-02-02\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList2 \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient2 \u003d new Patient(name2, nric2, email2, address2, contact2, gender2, dob2, tagList2);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientManager.addPatient(patient2);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(2 + \") \" + name"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + nric"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + gender"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + dob"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(3 + \") \" + name2"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + nric2"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + gender2"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + dob2"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(patientManager.findPatientsByNric(\"S92\"), sb.toString());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(patientManager.findPatientsByNric(\"S88\"), \"No patient record found\\n\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void findPatientByTag() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        this.patientManager \u003d new PatientManager();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9123456A\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Simei Road\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"91111111\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1991-01-01\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        tagList.add(new Tag(\"Diabetes\"));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name2 \u003d new Name(\"Perry Ng\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric2 \u003d new Nric(\"S9123456B\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList2 \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        tagList2.add(new Tag(\"Highbloodpressure\"));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient2 \u003d new Patient(name2, nric2, email, address, contact, gender, dob, tagList2);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name3 \u003d new Name(\"Pablo Alena\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric3 \u003d new Nric(\"S9123456C\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList\u003cTag\u003e tagList3 \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        tagList3.add(new Tag(\"Diabetes\"));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        tagList3.add(new Tag(\"Highbloodpressure\"));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient3 \u003d new Patient(name3, nric3, email, address, contact, gender, dob, tagList3);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientManager.addPatient(patient1);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientManager.addPatient(patient2);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patientManager.addPatient(patient3);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(1 + \") \" + name"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + nric"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + gender"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + dob"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(3 + \") \" + name3"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + nric3"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + gender"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \" \" + dob"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Tag tag \u003d new Tag(\"Diabetes\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Tag otherTag \u003d new Tag(\"Highcholesterol\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(patientManager.findPatientsByTag(tag), sb.toString());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(patientManager.findPatientsByTag(otherTag), \"No patient record found\\n\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void getPatientByNric() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        String nric \u003d \"S9123456A\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d patientManager.getPatientAtIndex(1);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient2 \u003d patientManager.getPatientByNric(nric);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertTrue(patient1.equals(patient2));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        nric \u003d \"S9123456B\";"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patient2 \u003d patientManager.getPatientByNric(nric);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertFalse(patient1.equals(patient2));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 283
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PatientTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class PatientTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name \u003d new Name(\"Peter Tan\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric \u003d new Nric(\"S9802708D\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email \u003d new Email(\"ptan@gmail.com\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address \u003d new Address(\"1 Tanah Merah Road\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact \u003d new Contact(\"92345678\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob \u003d new Dob(\"1998-02-18\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList tagList \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Name name2 \u003d new Name(\"Peter Toh\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric2 \u003d new Nric(\"S9802708D\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email email2 \u003d new Email(\"ptoh@gmail.com\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Address address2 \u003d new Address(\"2 Tanah Merah Road\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Contact contact2 \u003d new Contact(\"95678234\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Gender gender2 \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Dob dob2 \u003d new Dob(\"1998-02-20\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ArrayList tagList2 \u003d new ArrayList\u003cTag\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient1 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient2 \u003d new Patient(name2, nric2, email2, address2, contact2, gender2, dob2, tagList2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // test equality of same referenced object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertTrue(patient1.equals(patient1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // test equality of two different object except Nric, which is the same"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertTrue(patient1.equals(patient2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // test equality of two different patient object with different nric"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Nric nric4 \u003d new Nric(\"S6134937E\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient3 \u003d new Patient(name, nric, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Patient patient4 \u003d new Patient(name, nric4, email, address, contact, gender, dob, tagList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertFalse(patient3.equals(patient4));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // test equality of different object types"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Email otherObject \u003d new Email(\"abc@gmail.com\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertFalse(patient1.equals(otherObject));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/ConsultationRecordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.consultation.Prescription;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": "class ConsultationRecordTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void toStatistics() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Medicine medicine \u003d new Medicine(\"test\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        medicine.setPrice(BigDecimal.valueOf(22.20));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Prescription prescription \u003d new Prescription(medicine, 3);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        BigDecimal prescriptionFee \u003d prescription.getMedicine().getPrice()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .multiply(new BigDecimal(prescription.getQuantity()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Statistics stats \u003d new Statistics(1,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                Statistics.getConsultationFee().add(prescriptionFee), BigDecimal.ZERO);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        ConsultationRecord consultRecord \u003d new ConsultationRecord(prescription);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Assert.assertEquals(consultRecord.toStatistics(), stats);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/ConsultationStatisticsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": "class ConsultationStatisticsTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Statistics stats \u003d new Statistics(3, BigDecimal.ZERO, BigDecimal.ZERO);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Statistics consultStats \u003d new ConsultationStatistics(stats);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void toStringTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        sb.append(\"Number of consultations: \")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(3)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Assert.assertEquals(consultStats.toString(), sb.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/FinancesStatisticsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": "class FinancesStatisticsTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Statistics stats \u003d new Statistics(3, BigDecimal.valueOf(39.20), BigDecimal.valueOf(10.10));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Statistics financesStats \u003d new FinancesStatistics(stats);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void toStringTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        sb.append(\"Revenue: \")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(Statistics.currencyFormat(BigDecimal.valueOf(39.20)))"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"Expenditure: \")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(Statistics.currencyFormat(BigDecimal.valueOf(10.10)))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"Profit: \")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(Statistics.currencyFormat(BigDecimal.valueOf(29.10)))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Assert.assertEquals(financesStats.toString(), sb.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/MedicinePurchaseRecordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "class MedicinePurchaseRecordTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void toStatistics() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Medicine medicine \u003d new Medicine(\"test\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        medicine.setPrice(BigDecimal.valueOf(11.10));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Statistics stats \u003d new Statistics(0, BigDecimal.ZERO, BigDecimal.valueOf(44.40));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        MedicinePurchaseRecord mpr \u003d new MedicinePurchaseRecord(medicine, 4);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Assert.assertEquals(mpr.toStatistics(), stats);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/MonthRecordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.consultation.Prescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "class MonthRecordTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private MonthRecord monthRecord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Record consultationRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Record medicinePurchaseRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Medicine medicine \u003d new Medicine(\"test\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        monthRecord \u003d new MonthRecord(YearMonth.of(2019, 1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        consultationRecord \u003d new ConsultationRecord(new Prescription(medicine, 1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        medicinePurchaseRecord \u003d new MedicinePurchaseRecord(medicine, 1, BigDecimal.valueOf(10.00));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void getStatistics() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        monthRecord.addRecord(consultationRecord);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        monthRecord.addRecord(medicinePurchaseRecord);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Statistics stats \u003d new Statistics(1, BigDecimal.valueOf(30.00), BigDecimal.valueOf(10.00));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Assert.assertEquals(monthRecord.getStatistics(), stats);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void addRecord() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        monthRecord.addRecord(consultationRecord);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        monthRecord.addRecord(medicinePurchaseRecord);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Assert.assertEquals(monthRecord.getNoOfRecords(), 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 43,
      "simjiazhi": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/RecordManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "class RecordManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private final RecordManager recordManager \u003d new RecordManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Record record1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Clock clock;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Medicine medicine \u003d new Medicine(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        record1 \u003d new MedicinePurchaseRecord(medicine, 1, BigDecimal.valueOf(10.00));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        clock \u003d Clock.fixed(Instant.parse(\"2019-01-01T10:15:30.00Z\"), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void record() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        recordManager.record(record1, clock);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Assert.assertEquals(recordManager.getTotalNoOfRecords(), 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void getStatistics() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        String topic \u003d \"finances\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Statistics stats \u003d new FinancesStatistics(new Statistics(0, BigDecimal.ZERO, BigDecimal.valueOf(10.00)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        recordManager.record(record1, clock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Statistics testStats \u003d recordManager.getStatistics(topic, YearMonth.of(2019, 1), YearMonth.of(2019, 1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Assert.assertEquals(testStats, stats);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/StatisticsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bentwj"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.consultation.Prescription;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bentwj"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bentwj"
        },
        "content": "class StatisticsTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Statistics stats;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Record record1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    private Record record2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     * Setup before each test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bentwj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Medicine medicine \u003d new Medicine(\"test\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        record1 \u003d new ConsultationRecord(new Prescription(medicine, 1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        record2 \u003d new MedicinePurchaseRecord(medicine, 1, BigDecimal.valueOf(10.00));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        stats \u003d new Statistics(1, BigDecimal.valueOf(30.00), BigDecimal.valueOf(10.00));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void merge() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Statistics testStats \u003d record1.toStatistics().merge(record2.toStatistics());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Assert.assertEquals(testStats, stats);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void fromRecordList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        List\u003cRecord\u003e recordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        recordList.add(record1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        recordList.add(record2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Statistics testStats \u003d Statistics.fromRecordList(recordList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Assert.assertEquals(testStats, stats);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    void toStringTest() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        sb.append(\"Number of consultations: \")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(1)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bentwj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"Revenue: \")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(Statistics.currencyFormat(BigDecimal.valueOf(30.00)))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"Expenditure: \")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(Statistics.currencyFormat(BigDecimal.valueOf(10.00)))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"Profit: \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(Statistics.currencyFormat(BigDecimal.valueOf(20.00)))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bentwj"
        },
        "content": "                .append(\"\\n\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bentwj"
        },
        "content": "        Assert.assertEquals(stats.toString(), sb.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bentwj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bentwj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bentwj": 62,
      "simjiazhi": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPatientTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class JsonAdaptedPatientTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"S1234567X\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"Rachel@gmail\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \"4 @dmiralty R0ad\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String INVALID_CONTACT \u003d \"888899999\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"N\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String INVALID_DOB \u003d \"31-02-1999\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String INVALID_TAG \u003d \"D|4b3t35\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String VALID_NRIC \u003d \"S1234567J\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"Rachel@gmail.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4 admiralty Road\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String VALID_CONTACT \u003d \"88888888\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String VALID_GENDER \u003d \"F\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final String VALID_DOB \u003d \"2000-02-29\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAG \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            Arrays.asList(new JsonAdaptedTag(\"Diabetes\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final Patient EXPECTED \u003d new Patient("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Name(VALID_NAME),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Nric(VALID_NRIC),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Email(VALID_EMAIL),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Address(VALID_ADDRESS),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Contact(VALID_CONTACT),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Gender(VALID_GENDER),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Dob(VALID_DOB),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new ArrayList\u003cTag\u003e(Arrays.asList(new Tag(\"Diabetes\")))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void toModelType_validPatientDetails_returnsPatient() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_EMAIL,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                VALID_ADDRESS, VALID_CONTACT, VALID_GENDER, VALID_DOB, VALID_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(EXPECTED, patient.toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void toModelType_invalidPatientdetails() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // Name testing"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(INVALID_NAME, VALID_NRIC, VALID_EMAIL,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                VALID_ADDRESS, VALID_CONTACT, VALID_GENDER, VALID_DOB, VALID_TAG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, Name.NAME_CONSTRAINTS, patient::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // NRIC testing"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patient \u003d new JsonAdaptedPatient(VALID_NAME, INVALID_NRIC, VALID_EMAIL,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                VALID_ADDRESS, VALID_CONTACT, VALID_GENDER, VALID_DOB, VALID_TAG);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, Nric.NRIC_CONSTRAINTS, patient::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // Email testing"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, INVALID_EMAIL,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                VALID_ADDRESS, VALID_CONTACT, VALID_GENDER, VALID_DOB, VALID_TAG);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, Email.EMAIL_CONSTRAINTS, patient::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // address testing"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_EMAIL,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                INVALID_ADDRESS, VALID_CONTACT, VALID_GENDER, VALID_DOB, VALID_TAG);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, Address.ADDRESS_CONSTRAINTS, patient::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // contact testing"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_EMAIL,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                VALID_ADDRESS, INVALID_CONTACT, VALID_GENDER, VALID_DOB, VALID_TAG);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, Contact.CONTACT_CONSTRAINTS, patient::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // gender testing"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_EMAIL,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                VALID_ADDRESS, VALID_CONTACT, INVALID_GENDER, VALID_DOB, VALID_TAG);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, Gender.GENDER_CONSTRAINTS, patient::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // date of birth testing"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_EMAIL,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                VALID_ADDRESS, VALID_CONTACT, VALID_GENDER, INVALID_DOB, VALID_TAG);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, Dob.DOB_CONSTRAINTS, patient::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // invalid tags"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_EMAIL,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                VALID_ADDRESS, VALID_CONTACT, VALID_GENDER, VALID_DOB, invalidTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, patient::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"notJsonFormatAddressBook.json\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void readPatientTest() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"patientAddressBook.json\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        AddressBook original \u003d getTypicalPatientddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        original.addPatient(TypicalPatients.EVE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        original.replacePatient(2, TypicalPatients.EDITED_BOB);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 20,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonQuickDocsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class JsonQuickDocsStorageTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    //patients"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final Path TYPICAL_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientsAddressBook.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    private static final Path TYPICAL_INVALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientsAddressBook.json\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void toModelType_typicalPatientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_FILE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        AddressBook typicalPatientsAddressBook \u003d TypicalPatients.getTypicalPatientddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPatientsAddressBook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public void toModelType_invalidPatientsFile_throwsIllegalArgumentException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_INVALID_FILE,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 22,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPatients.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Contact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Dob;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " * A utility class containing a list of {@code Patient} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "public class TypicalPatients {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Patient ALICE \u003d new Patient("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Name(\"Alice\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Nric(\"S1111111A\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Email(\"alice@gmail.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Address(\"1 Admiralty Road\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Contact(\"91111111\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Gender(\"F\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Dob(\"1990-01-01\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new ArrayList\u003cTag\u003e(Arrays.asList(new Tag(\"Diabetes\")))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Patient BOB \u003d new Patient("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Name(\"Bob\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Nric(\"S2222222A\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Email(\"bob@gmail.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Address(\"1 Bishan Road\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Contact(\"92222222\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Gender(\"M\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Dob(\"1985-02-02\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new ArrayList\u003cTag\u003e(Arrays.asList(new Tag(\"Gout\")))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Patient CHUCK \u003d new Patient("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Name(\"Chuck\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Nric(\"S3333333C\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Email(\"chuck@gmail.com\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Address(\"1 Clementi Road\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Contact(\"93333333\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Gender(\"M\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Dob(\"1980-03-03\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new ArrayList\u003cTag\u003e(Arrays.asList(new Tag(\"Highbloodpressure\")))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    // manually edited"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Patient EVE \u003d new Patient("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Name(\"Eve\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Nric(\"S5555555E\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Email(\"eve@gmail.com\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Address(\"5 Edelweiss Road\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Contact(\"95555555\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Gender(\"F\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Dob(\"2000-05-05\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new ArrayList\u003cTag\u003e(Arrays.asList())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static final Patient EDITED_BOB \u003d new Patient("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Name(\"Bob\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Nric(\"S2222333B\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Email(\"bob@gmail.com\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Address(\"2 Bishan Road\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Contact(\"92222222\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Gender(\"M\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new Dob(\"1985-02-02\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            new ArrayList\u003cTag\u003e(Arrays.asList(new Tag(\"Gout\")))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static AddressBook getTypicalPatientddressBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        for (Patient patient : getTypicalPatients()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "            ab.addPatient(patient);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    public static List\u003cPatient\u003e getTypicalPatients() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BOB, CHUCK));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simjiazhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simjiazhi": 96
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * 4. {@code MedicineManager} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xue-Chenyang"
        },
        "content": "     * 4. {@code MedicineManager} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xue-Chenyang": 2,
      "-": 147
    }
  }
]
